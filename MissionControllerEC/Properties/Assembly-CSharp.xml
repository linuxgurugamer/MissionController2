<?xml version="1.0" encoding="UTF-8"?><doc><assembly><name>XMLDocumentation</name></assembly><members><member name="T:ActiveJoint"></member><member name="F:ActiveJoint.activeAxis"><para>initial and end orientations for measuring motor angles (in vessel space)</para></member><member name="F:ActiveJoint.anchor"></member><member name="F:ActiveJoint.Angle"></member><member name="F:ActiveJoint.axis"></member><member name="F:ActiveJoint.ctrlAxis"><para>the axis around which the joint rotates. For motors, it will be the joint&amp;apos;s primary axis.</para></member><member name="F:ActiveJoint.dPos"><para>accumulated offset from the joint tgt pos</para></member><member name="F:ActiveJoint.dRot"><para>accumulated rotation from the joint&amp;apos;s tgt rot and angular speed</para></member><member name="F:ActiveJoint.endOrt"></member><member name="F:ActiveJoint.hostPart"><para>A reference to the part that contains the moduleHost, not to be confused with &lt;ref refid='class_part_joint' kindref='compound'&gt;PartJoint&lt;/ref&gt;&amp;apos;s host.</para></member><member name="F:ActiveJoint.initOrt"></member><member name="F:ActiveJoint.jointRot0"></member><member name="F:ActiveJoint.lastAngle"></member><member name="F:ActiveJoint.lastDPos"></member><member name="F:ActiveJoint.lastDRot"></member><member name="F:ActiveJoint.lastOrt"></member><member name="F:ActiveJoint.lastPivot"><para>axis used to test the angle when the joint is rotated.</para></member><member name="F:ActiveJoint.maxJointDamper"><para>the drive that is being modified on this joint.</para></member><member name="F:ActiveJoint.moduleHost"></member><member name="F:ActiveJoint.pivot"></member><member name="F:ActiveJoint.refNode"></member><member name="F:ActiveJoint.secAxis"></member><member name="F:ActiveJoint.targetDrive"></member><member name="F:ActiveJoint.targetParent"></member><member name="P:ActiveJoint.driveMode"></member><member name="P:ActiveJoint.isValid"></member><member name="P:ActiveJoint.joint"></member><member name="P:ActiveJoint.jointMode"></member><member name="P:ActiveJoint.pJoint"></member><member name="M:ActiveJoint.DrawDebug"><para>&amp;lt; draw current rot (from target local space)</para><para>&amp;lt; draw cross vector between them</para><para>&amp;lt; draw the joint axis</para></member><member name="M:ActiveJoint.Equals(object)"></member><member name="M:ActiveJoint.Finalize"></member><member name="M:ActiveJoint.findJointAtNode(AttachNode)"></member><member name="M:ActiveJoint.findJointBetweenParts(Part,Part)"></member><member name="M:ActiveJoint.getAnchorOffset(PartSpaceMode)"></member><member name="M:ActiveJoint.getControlOrt(UnityEngine.Vector3,PartSpaceMode)"><para>Returns a reference vector that can be used to measure the angle after a part has been spun around by a rotating joint. Vector will be in target part&amp;apos;s local space, use getInvControlOrt to transform that into host local space</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ActiveJoint.getControlPos(UnityEngine.Vector3,PartSpaceMode)"></member><member name="M:ActiveJoint.GetCtrlAxis"></member><member name="M:ActiveJoint.GetHashCode"></member><member name="M:ActiveJoint.getInvControlOrt(UnityEngine.Vector3,PartSpaceMode)"></member><member name="M:ActiveJoint.getInvControlPos(UnityEngine.Vector3,PartSpaceMode)"></member><member name="M:ActiveJoint.GetJointDrive"></member><member name="M:ActiveJoint.GetType"></member><member name="M:ActiveJoint.InitJoint"></member><member name="M:ActiveJoint.Load(ConfigNode)"></member><member name="M:ActiveJoint.MemberwiseClone"></member><member name="M:ActiveJoint.onJointInit(System.Boolean)"></member><member name="M:ActiveJoint.restartJoint"></member><member name="M:ActiveJoint.Save(ConfigNode)"></member><member name="M:ActiveJoint.SetAxis(UnityEngine.Transform,UnityEngine.Vector3)"></member><member name="M:ActiveJoint.SetDriveMode(ActiveJoint+DriveMode)"></member><member name="M:ActiveJoint.SetJointDrive(UnityEngine.JointDrive)"></member><member name="M:ActiveJoint.SetSecondaryAxis(UnityEngine.Transform,UnityEngine.Vector3)"></member><member name="M:ActiveJoint.startForRefNode(string)"></member><member name="M:ActiveJoint.Terminate"><para>Ends all active joint operations. Clears listeners and detaches from joint. Does not destroy the joint itself.</para></member><member name="M:ActiveJoint.ToString"></member><member name="M:ActiveJoint.Create(IActiveJointHost,string,ActiveJoint+JointMode)"><para>Creates an instance of ModuleJoint to handle the connection at a given attachment node.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;jointOwnerPart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The IActivePartHost-implementing module that will host this instance (you).</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;refNodeId&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The id of the attachment node to target. Pass an empty string to target the parent part joint instead of a node. Pass null to cause a bug.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The active joint instance.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ActiveJoint.Create(IActiveJointHost,AttachNode,ActiveJoint+JointMode)"></member><member name="M:ActiveJoint.#ctor"><para>&amp;lt; draw current rot (from target local space)</para><para>&amp;lt; draw cross vector between them</para><para>&amp;lt; draw the joint axis</para></member><member name="T:AstronautComplexFacility"></member><member name="F:AstronautComplexFacility.additionalColliderPrefab"></member><member name="F:AstronautComplexFacility.buildingDescription"></member><member name="F:AstronautComplexFacility.buildingInfoName"></member><member name="F:AstronautComplexFacility.buildingRenderers"></member><member name="F:AstronautComplexFacility.colliderIgnoreMaterialNames"></member><member name="F:AstronautComplexFacility.destructibles"></member><member name="F:AstronautComplexFacility.facilityName"></member><member name="F:AstronautComplexFacility.OnClick"></member><member name="F:AstronautComplexFacility.OnInViewChange"></member><member name="F:AstronautComplexFacility.tooltipPrefab"></member><member name="P:AstronautComplexFacility.BuildingTransform"></member><member name="P:AstronautComplexFacility.enabled"></member><member name="P:AstronautComplexFacility.Facility"></member><member name="P:AstronautComplexFacility.gameObject"></member><member name="P:AstronautComplexFacility.hideFlags"></member><member name="P:AstronautComplexFacility.InView"></member><member name="P:AstronautComplexFacility.isActiveAndEnabled"></member><member name="P:AstronautComplexFacility.name"></member><member name="P:AstronautComplexFacility.Operational"></member><member name="P:AstronautComplexFacility.StructuralDamage"></member><member name="P:AstronautComplexFacility.tag"></member><member name="P:AstronautComplexFacility.TooltipPrefabInstance"></member><member name="P:AstronautComplexFacility.TooltipPrefabInstanceTransform"></member><member name="P:AstronautComplexFacility.TooltipPrefabType"></member><member name="P:AstronautComplexFacility.transform"></member><member name="P:AstronautComplexFacility.useGUILayout"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,object)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string)"></member><member name="M:AstronautComplexFacility.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.CancelInvoke"></member><member name="M:AstronautComplexFacility.CancelInvoke(string)"></member><member name="M:AstronautComplexFacility.ColliderHover(System.Boolean)"></member><member name="M:AstronautComplexFacility.CompareTag(string)"></member><member name="M:AstronautComplexFacility.DemolishFacility"></member><member name="M:AstronautComplexFacility.Despawntooltip"></member><member name="M:AstronautComplexFacility.EnterBuilding"></member><member name="M:AstronautComplexFacility.Equals(object)"></member><member name="M:AstronautComplexFacility.Finalize"></member><member name="M:AstronautComplexFacility.FindVesselsAtFacility(FlightState,System.Collections.Generic.IEnumerable)"></member><member name="M:AstronautComplexFacility.FindVesselsAtGrounds(FlightState,UnityEngine.Transform)"></member><member name="M:AstronautComplexFacility.GetCollapseReputationHit"></member><member name="M:AstronautComplexFacility.GetComponent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponent"></member><member name="M:AstronautComplexFacility.GetComponent(string)"></member><member name="M:AstronautComplexFacility.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentInChildren(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentInChildren"></member><member name="M:AstronautComplexFacility.GetComponentInChildren(System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentInParent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentInParent"></member><member name="M:AstronautComplexFacility.GetComponents(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:AstronautComplexFacility.GetComponents(List)"></member><member name="M:AstronautComplexFacility.GetComponents"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren"></member><member name="M:AstronautComplexFacility.GetComponentsInChildren(List)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Type)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Boolean)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent(System.Boolean,List)"></member><member name="M:AstronautComplexFacility.GetComponentsInParent"></member><member name="M:AstronautComplexFacility.GetHashCode"></member><member name="M:AstronautComplexFacility.GetInstanceID"></member><member name="M:AstronautComplexFacility.GetRepairsCost"></member><member name="M:AstronautComplexFacility.GetStructureDamage"></member><member name="M:AstronautComplexFacility.GetType"></member><member name="M:AstronautComplexFacility.HighLightBuilding(System.Boolean)"></member><member name="M:AstronautComplexFacility.Invoke(string,System.Single)"></member><member name="M:AstronautComplexFacility.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:AstronautComplexFacility.IsFacilityOperational(System.Single)"></member><member name="M:AstronautComplexFacility.IsInvoking(string)"></member><member name="M:AstronautComplexFacility.IsInvoking"></member><member name="M:AstronautComplexFacility.IsOpen"><summary>open is refered to wether you can enter the building (e.g. in sandboxmode the astronaut complex is closed)</summary></member><member name="M:AstronautComplexFacility.KSP.UI.ITooltipController.get_name"></member><member name="M:AstronautComplexFacility.KSP.UI.ITooltipController.set_name(string)"></member><member name="M:AstronautComplexFacility.MemberwiseClone"></member><member name="M:AstronautComplexFacility.OnClicked"></member><member name="M:AstronautComplexFacility.OnContextMenuSpawn"></member><member name="M:AstronautComplexFacility.OnLeftClick"></member><member name="M:AstronautComplexFacility.OnOnDestroy"></member><member name="M:AstronautComplexFacility.OnRightClick"></member><member name="M:AstronautComplexFacility.OnStart"></member><member name="M:AstronautComplexFacility.OnTooltipAboutToDespawn"></member><member name="M:AstronautComplexFacility.OnTooltipAboutToSpawn"></member><member name="M:AstronautComplexFacility.OnTooltipDespawned(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.OnTooltipSpawned(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.OnTooltipUpdate(KSP.UI.Tooltip)"></member><member name="M:AstronautComplexFacility.RepairFacility(System.Boolean)"></member><member name="M:AstronautComplexFacility.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessage(string,object)"></member><member name="M:AstronautComplexFacility.SendMessage(string)"></member><member name="M:AstronautComplexFacility.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,object)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string)"></member><member name="M:AstronautComplexFacility.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:AstronautComplexFacility.SetupColliders"></member><member name="M:AstronautComplexFacility.SetupRenderers"></member><member name="M:AstronautComplexFacility.SpawnTooltip"></member><member name="M:AstronautComplexFacility.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StartCoroutine(string,object)"></member><member name="M:AstronautComplexFacility.StartCoroutine(string)"></member><member name="M:AstronautComplexFacility.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StopAllCoroutines"></member><member name="M:AstronautComplexFacility.StopCoroutine(string)"></member><member name="M:AstronautComplexFacility.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:AstronautComplexFacility.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:AstronautComplexFacility.ToString"></member><member name="M:AstronautComplexFacility.#ctor"></member><member name="T:AttachNode"><summary>An AttachNode represents the physical connection between a Part and its parent Part.</summary></member><member name="F:AttachNode.attachedPart"><summary>The part attached to this node. Null if no part is attached.</summary></member><member name="F:AttachNode.attachedPartId"></member><member name="F:AttachNode.attachMethod"></member><member name="F:AttachNode.breakingForce"></member><member name="F:AttachNode.breakingTorque"></member><member name="F:AttachNode.contactArea"></member><member name="F:AttachNode.icon"></member><member name="F:AttachNode.id"></member><member name="F:AttachNode.nodeTransform"></member><member name="F:AttachNode.nodeType"><summary>Whether this node is a surface-attach node, a stack node, or a docking node.</summary></member><member name="F:AttachNode.offset"></member><member name="F:AttachNode.orientation"></member><member name="F:AttachNode.originalOrientation"></member><member name="F:AttachNode.originalPosition"></member><member name="F:AttachNode.originalSecondaryAxis"></member><member name="F:AttachNode.overrideDragArea"></member><member name="F:AttachNode.owner"></member><member name="F:AttachNode.position"></member><member name="F:AttachNode.radius"></member><member name="F:AttachNode.requestGate"></member><member name="F:AttachNode.ResourceXFeed"><summary>Wether or not resource cross feed can pass through this node.</summary></member><member name="F:AttachNode.rigid"></member><member name="F:AttachNode.secondaryAxis"></member><member name="F:AttachNode.size"></member><member name="M:AttachNode.DestroyNodeIcon"></member><member name="M:AttachNode.Equals(object)"></member><member name="M:AttachNode.Finalize"></member><member name="M:AttachNode.FindAttachedPart(System.Collections.Generic.List)"></member><member name="M:AttachNode.FindAttachedPart"></member><member name="M:AttachNode.FindOpposingNode"><para>Returns the attachnode on the other part which connects to this one, if any (srf attachments won&amp;apos;t have an opposing node)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:AttachNode.GetHashCode"></member><member name="M:AttachNode.GetType"></member><member name="M:AttachNode.MemberwiseClone"></member><member name="M:AttachNode.ToString"></member><member name="M:AttachNode.#ctor"></member><member name="M:AttachNode.#ctor(string,UnityEngine.Transform,System.Int32,AttachNodeMethod,System.Boolean,System.Boolean)"></member><member name="T:AudioFX"></member><member name="F:AudioFX.channel"></member><member name="F:AudioFX.clip"></member><member name="F:AudioFX.effectName"></member><member name="F:AudioFX.hostPart"></member><member name="F:AudioFX.instanceName"></member><member name="F:AudioFX.loop"><summary>probably whether this effect loops, I dunno</summary></member><member name="F:AudioFX.pitch"></member><member name="F:AudioFX.polyphony"></member><member name="F:AudioFX.volume"></member><member name="P:AudioFX.enabled"></member><member name="P:AudioFX.gameObject"></member><member name="P:AudioFX.hideFlags"></member><member name="P:AudioFX.isActiveAndEnabled"></member><member name="P:AudioFX.name"></member><member name="P:AudioFX.tag"></member><member name="P:AudioFX.transform"></member><member name="P:AudioFX.useGUILayout"></member><member name="M:AudioFX.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.BroadcastMessage(string,object)"></member><member name="M:AudioFX.BroadcastMessage(string)"></member><member name="M:AudioFX.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.CancelInvoke"></member><member name="M:AudioFX.CancelInvoke(string)"></member><member name="M:AudioFX.CompareTag(string)"></member><member name="M:AudioFX.Equals(object)"></member><member name="M:AudioFX.Finalize"></member><member name="M:AudioFX.GetComponent(System.Type)"></member><member name="M:AudioFX.GetComponent"></member><member name="M:AudioFX.GetComponent(string)"></member><member name="M:AudioFX.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:AudioFX.GetComponentInChildren(System.Type)"></member><member name="M:AudioFX.GetComponentInChildren"></member><member name="M:AudioFX.GetComponentInChildren(System.Boolean)"></member><member name="M:AudioFX.GetComponentInParent(System.Type)"></member><member name="M:AudioFX.GetComponentInParent"></member><member name="M:AudioFX.GetComponents(System.Type)"></member><member name="M:AudioFX.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:AudioFX.GetComponents(List)"></member><member name="M:AudioFX.GetComponents"></member><member name="M:AudioFX.GetComponentsInChildren(System.Type)"></member><member name="M:AudioFX.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:AudioFX.GetComponentsInChildren(System.Boolean)"></member><member name="M:AudioFX.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:AudioFX.GetComponentsInChildren"></member><member name="M:AudioFX.GetComponentsInChildren(List)"></member><member name="M:AudioFX.GetComponentsInParent(System.Type)"></member><member name="M:AudioFX.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:AudioFX.GetComponentsInParent(System.Boolean)"></member><member name="M:AudioFX.GetComponentsInParent(System.Boolean,List)"></member><member name="M:AudioFX.GetComponentsInParent"></member><member name="M:AudioFX.GetHashCode"></member><member name="M:AudioFX.GetInstanceID"></member><member name="M:AudioFX.GetType"></member><member name="M:AudioFX.Invoke(string,System.Single)"></member><member name="M:AudioFX.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:AudioFX.IsInvoking(string)"></member><member name="M:AudioFX.IsInvoking"></member><member name="M:AudioFX.MemberwiseClone"></member><member name="M:AudioFX.OnEvent(System.Single)"></member><member name="M:AudioFX.OnEvent"></member><member name="M:AudioFX.OnEvent(System.Int32)"></member><member name="M:AudioFX.OnEvent(System.Single,System.Int32)"></member><member name="M:AudioFX.OnInitialize"></member><member name="M:AudioFX.OnLoad(ConfigNode)"></member><member name="M:AudioFX.OnSave(ConfigNode)"></member><member name="M:AudioFX.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.SendMessage(string,object)"></member><member name="M:AudioFX.SendMessage(string)"></member><member name="M:AudioFX.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.SendMessageUpwards(string,object)"></member><member name="M:AudioFX.SendMessageUpwards(string)"></member><member name="M:AudioFX.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:AudioFX.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:AudioFX.StartCoroutine(string,object)"></member><member name="M:AudioFX.StartCoroutine(string)"></member><member name="M:AudioFX.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:AudioFX.StopAllCoroutines"></member><member name="M:AudioFX.StopCoroutine(string)"></member><member name="M:AudioFX.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:AudioFX.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:AudioFX.ToString"></member><member name="M:AudioFX.SetSourceVolume(UnityEngine.AudioSource,System.Single,AudioFX+AudioChannel)"></member><member name="M:AudioFX.#ctor"></member><member name="T:AvailablePart"><summary>An AvailablePart object contains the summary information about a single type of part which is shown in the editor.</summary></member><member name="F:AvailablePart._entryCost"><para>The Cost to purchase this part from RnD.</para></member><member name="F:AvailablePart.amountAvailable"><para>Amount of these parts in stock</para><remarks>-</remarks></member><member name="F:AvailablePart.author"><para>The author&amp;apos;s name, shown on parts list</para><remarks>-</remarks></member><member name="F:AvailablePart.bulkheadProfiles"><para>Tags for this part&amp;apos;s bulkhead (cross-section) profiles</para></member><member name="F:AvailablePart.category"><para>The category this part will be shown under</para><remarks>- Which tab this part shows up in in the editor.</remarks></member><member name="F:AvailablePart.configFileFullName"></member><member name="F:AvailablePart.cost"><para>Cost of this part (by unit), this includes the price of resources as well.</para><remarks>- The cost of this part, as displayed in the editor.</remarks></member><member name="F:AvailablePart.costsFunds"><para>Used when purchasing to determine if should pay for it. Set only when you purchase another part and this part is in that part&amp;apos;s identicalParts</para></member><member name="F:AvailablePart.description"><para>A description for the part</para><remarks>- The description of this part, as displayed in the editor?  Does this include the GetInfo() of the part's PartModules?</remarks></member><member name="F:AvailablePart.fileTimes"></member><member name="F:AvailablePart.iconOffset"></member><member name="F:AvailablePart.iconPrefab"><para>A reference to the icon prefab for instantiation</para><remarks>-</remarks></member><member name="F:AvailablePart.iconScale"><para>The scale factor applied to this icon</para><remarks>-</remarks></member><member name="F:AvailablePart.iconUrl"></member><member name="F:AvailablePart.identicalParts"><para>what parts are identical to this and should unlock with this</para></member><member name="F:AvailablePart.internalConfig"></member><member name="F:AvailablePart.manufacturer"><para>The manufacturer&amp;apos;s name, shown on the parts list</para><remarks>-</remarks></member><member name="F:AvailablePart.moduleInfo"><para>The compiled module information</para><remarks>-</remarks></member><member name="F:AvailablePart.moduleInfos"></member><member name="F:AvailablePart.name"><para>A string identifier for the part</para><remarks>- The name of this kind of part, as specified in the "name =" line of its part.cfg.</remarks></member><member name="F:AvailablePart.partConfig"></member><member name="F:AvailablePart.partPrefab"><para>A reference to the part prefab for instantiation</para><remarks>- The object that gets cloned when you create a new instance of this part in the editor?</remarks></member><member name="F:AvailablePart.partSize"><para>Approximation of the visual size of the part</para></member><member name="F:AvailablePart.partUrl"><para>The url of the part config</para><remarks>-</remarks></member><member name="F:AvailablePart.partUrlConfig"></member><member name="F:AvailablePart.resourceInfo"><para>The compiled module information</para><remarks>-</remarks></member><member name="F:AvailablePart.resourceInfos"></member><member name="F:AvailablePart.tags"><para>This part&amp;apos;s search tags</para></member><member name="F:AvailablePart.TechRequired"><para>The id of the technology required to make this part available for purchase.</para></member><member name="F:AvailablePart.title"><para>The title that is shown on the parts list</para><remarks>-</remarks></member><member name="F:AvailablePart.typeDescription"><para>A short description for the part</para><remarks>-</remarks></member><member name="F:AvailablePart.EntryCostGetter"></member><member name="P:AvailablePart.entryCost"></member><member name="P:AvailablePart.partPath"></member><member name="M:AvailablePart.AddFileTime(UrlDir+UrlFile)"></member><member name="M:AvailablePart.Equals(object)"></member><member name="M:AvailablePart.Finalize"></member><member name="M:AvailablePart.GetHashCode"></member><member name="M:AvailablePart.GetType"></member><member name="M:AvailablePart.MemberwiseClone"></member><member name="M:AvailablePart.SetEntryCost(System.Int32)"></member><member name="M:AvailablePart.ToString"></member><member name="M:AvailablePart._GetEntryCost(AvailablePart)"></member><member name="M:AvailablePart.#ctor"></member><member name="M:AvailablePart.#ctor(string)"></member><member name="M:AvailablePart.#ctor(AvailablePart)"></member><member name="T:BaseAction"><para>A part action</para><remarks>- A BaseAction object is the basic action object. There is one of these automatically created for each 'KSPAction' field in a partModule</remarks></member><member name="F:BaseAction.actionGroup"><para>Added to action groups here the event will fire on activate</para><remarks>- Bitmap of the action groups this action is currently assigned to.
Example:</remarks><code>bool isPartOfCustom01 = ((action.actionGroup &amp; KSPActionGroup.Custom01) == KSPActionGroup.Custom01</code></member><member name="F:BaseAction.active"><para>Set to false to remove visibilty from editor and stop this action from firing</para><remarks>- Is this action available? Setting this false disables the action so it will not show in the available actions list. 

Note this totally disables the action, even calling it in code will not execute the action if this bool is false. (As of KSP 0.90, assumed still true in KSP 1.1)</remarks></member><member name="F:BaseAction.advancedTweakable"><para>Does the action require advanced tweakables?</para></member><member name="F:BaseAction.defaultActionGroup"><para>Added to action groups here the event will fire on activate</para><remarks>- Assign this action to action groups upon creation ('Gear' group for landing legs)

Set the default group to Brakes only:</remarks><code>action.defaultActionGroup = KSPActionGroup.Brakes;</code><remarks>Add the Custom01 group to the default groups.</remarks><code>action.defaultActionGroup = action.defaultActionGroup | KSPActionGroup.Custom01;</code><remarks>Note this value is only used when a part is placed in the editor and the values in defaultActionGroup are transferred to actionGroup at that time. Once a part is placed in the editor (or in flight mode) use the actionGroup object instead.</remarks></member><member name="F:BaseAction.guiName"><summary>Name shown in editor action groups panel, can safely be edited as any other string.</summary></member><member name="F:BaseAction.isPersistent"><para>Does this action get its active field serialized?</para></member><member name="F:BaseAction.listParent"><summary>Information about what the action is attached to. listParent.module = partModule this action is a memeber of listParent.part = part this action is a member of</summary></member><member name="F:BaseAction.name"><para>The exposed name of this action method</para><remarks>- Name of the action group as seen in code where the KSPAction field exists. Do not edit, this is the identifier of the action as used in code and is not player visible. (See guiName for what is visible in game.)</remarks></member><member name="F:BaseAction.requireFullControl"><para>Does this require full, not just partial, control?</para></member><member name="P:BaseAction.guiName"><para>The name of this action presented in the gui (user readable name)</para></member><member name="P:BaseAction.onEvent"><para>The delegate method this action fires</para></member><member name="P:BaseAction.ActionGroupsLength"></member><member name="M:BaseAction.Equals(object)"></member><member name="M:BaseAction.Finalize"></member><member name="M:BaseAction.GetHashCode"></member><member name="M:BaseAction.GetType"></member><member name="M:BaseAction.Invoke(KSPActionParam)"><summary>Activate this action. Note that there is no toggle activation, you must check state yourself in code and activate or deactivate as appropriate  **Example code start to activate an action: KSP version 0.24.2**</summary><code>KSPActionParam actParam = new KSPActionParam(KSPActionGroup.None, KSPActionType.Activate); //okay to create this new just before invoking exampleAction.Invoke(actParam); //action defined as a KSPAction in a partModule</code><remarks>**Example code start to deactivate an action: KSP version 0.24.2**</remarks><code>KSPActionParam actParam = new KSPActionParam(KSPActionGroup.None, KSPActionType.Deactivate); //okay to create this new just before invoking exampleAction.Invoke(actParam); //action defined as a KSPAction in a partModule</code></member><member name="M:BaseAction.MemberwiseClone"></member><member name="M:BaseAction.OnLoad(ConfigNode)"></member><member name="M:BaseAction.OnSave(ConfigNode)"></member><member name="M:BaseAction.ToString"></member><member name="M:BaseAction.ContainsNonDefaultActions(Part)"></member><member name="M:BaseAction.CreateActionList(System.Collections.Generic.List,KSPActionGroup,System.Boolean)"></member><member name="M:BaseAction.CreateActionList(Part,KSPActionGroup,System.Boolean)"></member><member name="M:BaseAction.CreateGroupList(Part)"></member><member name="M:BaseAction.CreateGroupList(System.Collections.Generic.List)"></member><member name="M:BaseAction.FireAction(System.Collections.Generic.List,KSPActionGroup,KSPActionType)"></member><member name="M:BaseAction.GetActionGroups(System.Int32)"></member><member name="M:BaseAction.GetActionGroupsLength(System.Single,System.Boolean)"></member><member name="M:BaseAction.GetGroupIndex(KSPActionGroup)"></member><member name="M:BaseAction.#ctor(BaseActionList,string,BaseActionDelegate,KSPAction)"><para>Create a new action</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Exposed action name</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onEvent&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Reflected method delegate&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;actionAttr&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Action&amp;apos;s attribute data&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="T:BaseActionList"><para>List of all defined part actions</para><remarks>- A BaseActionList is an object to manipulate actions.</remarks></member><member name="F:BaseActionList.module"><summary>The partModule this list of actions belongs to</summary></member><member name="F:BaseActionList.part"><summary>The Part this list of actions belongs to</summary></member><member name="F:BaseActionList.reflectedAttributeCache"></member><member name="P:BaseActionList.Capacity"></member><member name="P:BaseActionList.Count"></member><member name="P:BaseActionList.Item"></member><member name="P:BaseActionList.Item"></member><member name="M:BaseActionList.Add(BaseAction)"></member><member name="M:BaseActionList.AddRange(System.Collections.Generic.IEnumerable)"></member><member name="M:BaseActionList.AsReadOnly"></member><member name="M:BaseActionList.BinarySearch(System.Int32,System.Int32,BaseAction,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.BinarySearch(BaseAction)"></member><member name="M:BaseActionList.BinarySearch(BaseAction,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Clear"></member><member name="M:BaseActionList.Contains(KSPActionGroup)"></member><member name="M:BaseActionList.Contains(BaseAction)"></member><member name="M:BaseActionList.ConvertAll(Converter)"></member><member name="M:BaseActionList.CopyTo(BaseAction[])"></member><member name="M:BaseActionList.CopyTo(System.Int32,BaseAction[],System.Int32,System.Int32)"></member><member name="M:BaseActionList.CopyTo(BaseAction[],System.Int32)"></member><member name="M:BaseActionList.Equals(object)"></member><member name="M:BaseActionList.Exists(System.Predicate)"></member><member name="M:BaseActionList.Finalize"></member><member name="M:BaseActionList.Find(System.Predicate)"></member><member name="M:BaseActionList.FindAll(System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindIndex(System.Int32,System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindLast(System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Int32,System.Predicate)"></member><member name="M:BaseActionList.FindLastIndex(System.Int32,System.Int32,System.Predicate)"></member><member name="M:BaseActionList.ForEach(System.Action)"></member><member name="M:BaseActionList.GetEnumerator"></member><member name="M:BaseActionList.GetHashCode"></member><member name="M:BaseActionList.GetRange(System.Int32,System.Int32)"></member><member name="M:BaseActionList.GetType"></member><member name="M:BaseActionList.IndexOf(BaseAction)"></member><member name="M:BaseActionList.IndexOf(BaseAction,System.Int32)"></member><member name="M:BaseActionList.IndexOf(BaseAction,System.Int32,System.Int32)"></member><member name="M:BaseActionList.Insert(System.Int32,BaseAction)"></member><member name="M:BaseActionList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction,System.Int32)"></member><member name="M:BaseActionList.LastIndexOf(BaseAction,System.Int32,System.Int32)"></member><member name="M:BaseActionList.MemberwiseClone"></member><member name="M:BaseActionList.OnLoad(ConfigNode)"></member><member name="M:BaseActionList.OnSave(ConfigNode)"></member><member name="M:BaseActionList.Remove(BaseAction)"></member><member name="M:BaseActionList.RemoveAll(System.Predicate)"></member><member name="M:BaseActionList.RemoveAt(System.Int32)"></member><member name="M:BaseActionList.RemoveRange(System.Int32,System.Int32)"></member><member name="M:BaseActionList.Reverse"></member><member name="M:BaseActionList.Reverse(System.Int32,System.Int32)"></member><member name="M:BaseActionList.Sort"></member><member name="M:BaseActionList.Sort(System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer)"></member><member name="M:BaseActionList.Sort(System.Comparison)"></member><member name="M:BaseActionList.ToArray"></member><member name="M:BaseActionList.ToString"></member><member name="M:BaseActionList.TrimExcess"></member><member name="M:BaseActionList.TrueForAll(System.Predicate)"></member><member name="M:BaseActionList.GetReflectedAttributes(System.Type)"></member><member name="M:BaseActionList.#ctor(Part,PartModule)"><para>Creates a new instance</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;part&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The parent part</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; -</remarks></member><member name="T:BaseConverter"></member><member name="F:BaseConverter._preCalculateEfficiency"></member><member name="F:BaseConverter._resBroker"></member><member name="F:BaseConverter._resConverter"></member><member name="F:BaseConverter._totalEfficiencyModifiers"></member><member name="F:BaseConverter.AlwaysActive"><summary>Simply means that this converter is "always on" once turned on (and cannot be shut off), or that it is "always on" when in active view.</summary></member><member name="F:BaseConverter.AutoShutdown"><summary>Simply means that the converter shuts down after a predetermined set of conditions are met; such as "resource(s) full" or "used up".</summary></member><member name="F:BaseConverter.ConverterName"><summary>The name of the converter as it should appear in-game to players.</summary></member><member name="F:BaseConverter.debugCrewBon"></member><member name="F:BaseConverter.debugDelta"></member><member name="F:BaseConverter.debugEffBonus"></member><member name="F:BaseConverter.debugFinBon"></member><member name="F:BaseConverter.debugTimeFac"></member><member name="F:BaseConverter.DefaultShutoffTemp"><summary>Shuts off the converter after a certain temperature is reached. Definable?</summary></member><member name="F:BaseConverter.DirtyFlag"></member><member name="F:BaseConverter.Efficiency"><summary>A math coefficient. Let's say you've set your Input and Output levels all to 1.0 ... set your Efficiency to any number from 0.01 to 1.0 (1~100%), and now you've defined how efficient you want your converter to be. Play around with your Input and Output values as desired to get the effects you're looking for.</summary></member><member name="F:BaseConverter.EfficiencyBonus"><para>When determining final efficiency (which is multiplied against all inputs and outputs of a recipe), the EfficiencyBonus will be factored in (multiplied). Defaults to 1 (i.e. no effect), and is persistent.</para><remarks>- Defines whether to *use* an Efficiency Bonus or not. 0 to not use it, 1 to use it.</remarks></member><member name="F:BaseConverter.EfficiencyModifiers"><para>When determining final efficiency (which is multiplied against all inputs and outputs of a recipe), each EfficiencyMultiplier will be factored in (multiplied) in sequence. Use for when you want to handle multiple efficiency bonuses.</para></member><member name="F:BaseConverter.ExperienceEffect"><summary>Based on http://forum.kerbalspaceprogram.com/index.php?/topic/113131-moduleresourceconverter-documentation/ : is the level of the highest-level engineer on the vessel. Complete formula: Eff = EB * (SBB + [SEF * EE]), where EB is EfficiencyBonus, SBB is SpecialistBaseBonus, SEF is SpecialistEfficiencyFactor, and EE is ExperienceEffect. EE ranges from 0 (no specialist), 2 (1-star engineer), to 6 (5-star engineer).</summary></member><member name="F:BaseConverter.FillAmount"><summary>How much to make before shutting down, ie "fill it up". If the tank is emptied, is likely able to be filled again.</summary></member><member name="F:BaseConverter.GeneratesHeat"><summary>Whether the converter generates heat during the conversion process.</summary></member><member name="F:BaseConverter.inputList"><summary>Literally the resource we're putting *in* to be converted. Can only be one resource per entry; ie, can't rattle off two or more resources in a single entry slot. Instead, make a new entry and add a single resource to that, then repeat with new entries down the list. Strongly recommend reading the 'ResourceRatio' to view the correct way to build the list.</summary></member><member name="F:BaseConverter.IsActivated"><summary>A check to see if the convertor has been activated -- we need this to help toggle other events in the Config Code (Animations and such). Compare to If/Then/And statements? (Needs verification) :: (Could this one also be a check to "autostart/autostop" it if the parent MODULE has been activated, such as ModuleAnimateGeneric?)</summary></member><member name="F:BaseConverter.isEnabled"></member><member name="F:BaseConverter.lastHeatFlux"></member><member name="F:BaseConverter.lastTimeFactor"></member><member name="F:BaseConverter.lastUpdateTime"><summary>Time of the last (physics?) update.</summary></member><member name="F:BaseConverter.moduleIsEnabled"></member><member name="F:BaseConverter.moduleName"></member><member name="F:BaseConverter.outputList"><summary>Literally the resource we want made. Can only be one resource per entry; ie, can't rattle off two or more resources in a single entry slot. Instead, make a new entry and add a single resource to that, then repeat with new entries down the list. Strongly recommend reading the 'ResourceRatio' to view the correct way to build the list.</summary></member><member name="F:BaseConverter.overrideStagingIconIfBlank"></member><member name="F:BaseConverter.reqList"></member><member name="F:BaseConverter.resHandler"></member><member name="F:BaseConverter.showUpgradesInModuleInfo"></member><member name="F:BaseConverter.snapshot"></member><member name="F:BaseConverter.SpecialistBonusBase"><summary>Simply a math function to determine how much of a bonus we get for having a Specialist on board the vessel we're using the converter with. Careful with this number, because it's a multiplier!
Based on http://forum.kerbalspaceprogram.com/index.php?/topic/113131-moduleresourceconverter-documentation/ : is the base factor by which efficiency is multiplied. Complete formula: Eff = EB * (SBB + [SEF * EE]), where EB is EfficiencyBonus, SBB is SpecialistBaseBonus, SEF is SpecialistEfficiencyFactor, and EE is ExperienceEffect. If less effect from engineers is desired, tweak SBB towards 1.0, and SEF downwards.</summary></member><member name="F:BaseConverter.SpecialistEfficiencyFactor"><para>How much each level of the specified ExperienceEffect will increase efficiency</para><remarks>- How *quickly* the converter works with the Specialist on-board. Better speed = better efficiency.
Based on http://forum.kerbalspaceprogram.com/index.php?/topic/113131-moduleresourceconverter-documentation/ : is the factor, multiplied by engineer level, that is added to SpecialistBaseBonus to determine the overall efficiency. Complete formula: Eff = EB * (SBB + [SEF * EE]), where EB is EfficiencyBonus, SBB is SpecialistBaseBonus, SEF is SpecialistEfficiencyFactor, and EE is ExperienceEffect.</remarks></member><member name="F:BaseConverter.SpecialistHeatFactor"><para>How much each level of the specified ExperienceEffect will reduce heat</para></member><member name="F:BaseConverter.Specialty"><summary>Which career makes this converter more efficient? If left blank, there's no difference, and it receives NO bonuses.</summary></member><member name="F:BaseConverter.stagingDisableText"></member><member name="F:BaseConverter.stagingEnabled"></member><member name="F:BaseConverter.stagingEnableText"></member><member name="F:BaseConverter.stagingToggleEnabledEditor"></member><member name="F:BaseConverter.stagingToggleEnabledFlight"></member><member name="F:BaseConverter.StartActionName"><summary>Likely the description next to the button to commence a resource conversion.  This should be set in the craft's .cfg file.  A right-click button will be created for the part during a flight scene with this name.</summary></member><member name="F:BaseConverter.startEvt"></member><member name="F:BaseConverter.status"><summary>Probably best to not use this one, as this could cause issues if tampered with.</summary></member><member name="F:BaseConverter.statusPercent"></member><member name="F:BaseConverter.StopActionName"><summary>The complement of StartActionName, this stops the resource conversion.  This should be set in the craft's .cfg file.  A right-click button will be created for the part during a flight scene with this name.</summary></member><member name="F:BaseConverter.stopEvt"></member><member name="F:BaseConverter.TakeAmount"></member><member name="F:BaseConverter.TemperatureModifier"><summary>Does this converter get more (or less) efficient due to temperature? That's defined here, and is an array like ThermalEfficiency below.</summary></member><member name="F:BaseConverter.ThermalEfficiency"><summary>This is a definable array of different efficiencies over different temperatures. Opening the file /GameData/Squad/Parts/Resources/ISRU/ISRU.cfg and scrolling down to the thermalEfficiency section(s) will provide good examples of how this function is actually used.</summary></member><member name="F:BaseConverter.ToggleActionName"><summary>As with StartActionName and StopActionName, ToggleActionName is the GUI name that the Player actually sees in-game for the converter when they right-click the equipped part. The toggle function is a combination start/stop button.</summary></member><member name="F:BaseConverter.upgrades"></member><member name="F:BaseConverter.upgradesApplied"></member><member name="F:BaseConverter.upgradesApply"></member><member name="F:BaseConverter.upgradesAsk"></member><member name="F:BaseConverter.UseSpecialistBonus"><para>Whether or not crew experience effects should affect efficiency of the converter</para><remarks>- If true, the converter will gain efficiency bonus if a crewmember is on board (defined in Specialty).</remarks></member><member name="F:BaseConverter.UseSpecialistHeatBonus"><para>Whether or not crew experience effects should decrease heat generation of the converter</para></member><member name="P:BaseConverter.Actions"></member><member name="P:BaseConverter.ClassID"></member><member name="P:BaseConverter.ClassName"></member><member name="P:BaseConverter.enabled"></member><member name="P:BaseConverter.Events"></member><member name="P:BaseConverter.Fields"></member><member name="P:BaseConverter.gameObject"></member><member name="P:BaseConverter.GUIName"></member><member name="P:BaseConverter.hideFlags"></member><member name="P:BaseConverter.isActiveAndEnabled"></member><member name="P:BaseConverter.ModuleAttributes"></member><member name="P:BaseConverter.name"></member><member name="P:BaseConverter.part"></member><member name="P:BaseConverter.ResBroker"></member><member name="P:BaseConverter.ResConverter"></member><member name="P:BaseConverter.tag"></member><member name="P:BaseConverter.transform"></member><member name="P:BaseConverter.useGUILayout"></member><member name="P:BaseConverter.vessel"></member><member name="M:BaseConverter.AppliedUpgrades"></member><member name="M:BaseConverter.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:BaseConverter.ApplyUpgrades(PartModule+StartState)"></member><member name="M:BaseConverter.Awake"></member><member name="M:BaseConverter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.BroadcastMessage(string,object)"></member><member name="M:BaseConverter.BroadcastMessage(string)"></member><member name="M:BaseConverter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.CancelInvoke"></member><member name="M:BaseConverter.CancelInvoke(string)"></member><member name="M:BaseConverter.CheckForShutdown"></member><member name="M:BaseConverter.CompareTag(string)"></member><member name="M:BaseConverter.ConvertRecipeToUnits(ConversionRecipe)"></member><member name="M:BaseConverter.Copy(PartModule)"></member><member name="M:BaseConverter.DisableModule"></member><member name="M:BaseConverter.DisplayCoreHeat"></member><member name="M:BaseConverter.EnableModule"></member><member name="M:BaseConverter.Equals(object)"></member><member name="M:BaseConverter.Finalize"></member><member name="M:BaseConverter.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:BaseConverter.FixedUpdate"></member><member name="M:BaseConverter.GetBestDeltaTime(System.Double)"></member><member name="M:BaseConverter.GetComponent(System.Type)"></member><member name="M:BaseConverter.GetComponent"></member><member name="M:BaseConverter.GetComponent(string)"></member><member name="M:BaseConverter.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:BaseConverter.GetComponentInChildren(System.Type)"></member><member name="M:BaseConverter.GetComponentInChildren"></member><member name="M:BaseConverter.GetComponentInChildren(System.Boolean)"></member><member name="M:BaseConverter.GetComponentInParent(System.Type)"></member><member name="M:BaseConverter.GetComponentInParent"></member><member name="M:BaseConverter.GetComponents(System.Type)"></member><member name="M:BaseConverter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:BaseConverter.GetComponents(List)"></member><member name="M:BaseConverter.GetComponents"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Type)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:BaseConverter.GetComponentsInChildren"></member><member name="M:BaseConverter.GetComponentsInChildren(List)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Type)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Boolean)"></member><member name="M:BaseConverter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:BaseConverter.GetComponentsInParent"></member><member name="M:BaseConverter.GetCoreTemperature"></member><member name="M:BaseConverter.GetCrewEfficiencyBonus"><para>Returns a value used to scale efficiency based on the highest rated crew member with the appropriate specialty (if specialty bonuses are enabled).</para></member><member name="M:BaseConverter.GetCrewHeatBonus"><para>Returns a value used to scale thermal efficiency based on the highest rated crew member with the appropriate specialty (if specialty bonuses are enabled).</para></member><member name="M:BaseConverter.GetDeltaTime"></member><member name="M:BaseConverter.GetEfficiencyMultiplier"></member><member name="M:BaseConverter.GetFlux"></member><member name="M:BaseConverter.GetGoalTemperature"></member><member name="M:BaseConverter.GetHashCode"></member><member name="M:BaseConverter.GetHeatThrottle"></member><member name="M:BaseConverter.GetInfo"></member><member name="M:BaseConverter.GetInstanceID"></member><member name="M:BaseConverter.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:BaseConverter.GetStagingDisableText"></member><member name="M:BaseConverter.GetStagingEnableText"></member><member name="M:BaseConverter.GetType"></member><member name="M:BaseConverter.GetUpgrade(string)"></member><member name="M:BaseConverter.GetUpgradeInfo"></member><member name="M:BaseConverter.HasSpecialist(string)"></member><member name="M:BaseConverter.HasUpgrades"></member><member name="M:BaseConverter.Invoke(string,System.Single)"></member><member name="M:BaseConverter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:BaseConverter.IsInvoking(string)"></member><member name="M:BaseConverter.IsInvoking"></member><member name="M:BaseConverter.IsOverheating"></member><member name="M:BaseConverter.IsSituationValid"></member><member name="M:BaseConverter.IsStageable"></member><member name="M:BaseConverter.IsValidContractObjective(string)"></member><member name="M:BaseConverter.Load(ConfigNode)"></member><member name="M:BaseConverter.LoadUpgrades(ConfigNode)"></member><member name="M:BaseConverter.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:BaseConverter.MemberwiseClone"></member><member name="M:BaseConverter.ModuleIsActive"></member><member name="M:BaseConverter.OnActive"></member><member name="M:BaseConverter.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:BaseConverter.OnCopy(PartModule)"></member><member name="M:BaseConverter.OnFixedUpdate"></member><member name="M:BaseConverter.OnIconCreate"></member><member name="M:BaseConverter.OnInactive"></member><member name="M:BaseConverter.OnInitialize"></member><member name="M:BaseConverter.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:BaseConverter.OnOverheat(System.Double)"></member><member name="M:BaseConverter.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:BaseConverter.OnStart(PartModule+StartState)"><para>Called when the part starts. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:BaseConverter.OnStartFinished(PartModule+StartState)"></member><member name="M:BaseConverter.OnUpdate"></member><member name="M:BaseConverter.PostProcess(ConverterResults,System.Double)"></member><member name="M:BaseConverter.PostUpdateCleanup"></member><member name="M:BaseConverter.PrepareRecipe(System.Double)"></member><member name="M:BaseConverter.PreProcessing"></member><member name="M:BaseConverter.PrintUpgrades"></member><member name="M:BaseConverter.Save(ConfigNode)"></member><member name="M:BaseConverter.SaveUpgradesApplied(ConfigNode)"></member><member name="M:BaseConverter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessage(string,object)"></member><member name="M:BaseConverter.SendMessage(string)"></member><member name="M:BaseConverter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SendMessageUpwards(string,object)"></member><member name="M:BaseConverter.SendMessageUpwards(string)"></member><member name="M:BaseConverter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:BaseConverter.SetEfficiencyBonus(System.Single)"></member><member name="M:BaseConverter.SetStaging(System.Boolean)"></member><member name="M:BaseConverter.SetupDebugging"></member><member name="M:BaseConverter.SetupLabels"></member><member name="M:BaseConverter.SetupModule"></member><member name="M:BaseConverter.StagingEnabled"></member><member name="M:BaseConverter.StagingToggleEnabledEditor"></member><member name="M:BaseConverter.StagingToggleEnabledFlight"></member><member name="M:BaseConverter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StartCoroutine(string,object)"></member><member name="M:BaseConverter.StartCoroutine(string)"></member><member name="M:BaseConverter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StartResourceConverter"></member><member name="M:BaseConverter.StartResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.StopAllCoroutines"></member><member name="M:BaseConverter.StopCoroutine(string)"></member><member name="M:BaseConverter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:BaseConverter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:BaseConverter.StopResourceConverter"></member><member name="M:BaseConverter.StopResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.TallyEfficiencyModifiers"></member><member name="M:BaseConverter.ToggleResourceConverterAction(KSPActionParam)"></member><member name="M:BaseConverter.ToggleStaging"></member><member name="M:BaseConverter.ToString"></member><member name="M:BaseConverter.UpdateConverterStatus"></member><member name="M:BaseConverter.UpdateDebugInfo(ConverterResults,System.Double)"></member><member name="M:BaseConverter.UpdateStagingToggle"></member><member name="M:BaseConverter.UpgradeWaitForScenarioModules"></member><member name="M:BaseConverter.#ctor"></member><member name="T:CameraKeyFrameEvents.CameraKeyFrameEvent"></member><member name="F:CameraKeyFrameEvents.CameraKeyFrameEvent.done"></member><member name="F:CameraKeyFrameEvents.CameraKeyFrameEvent.timeIntoFrame"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.enabled"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.gameObject"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.hideFlags"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.isActiveAndEnabled"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.name"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.tag"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.transform"></member><member name="P:CameraKeyFrameEvents.CameraKeyFrameEvent.useGUILayout"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CancelInvoke"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CancelInvoke(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.CompareTag(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Equals(object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Finalize"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponent(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInChildren(System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInParent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentInParent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents(List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponents"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInChildren(List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Type)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Boolean)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetComponentsInParent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetHashCode"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetInstanceID"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.GetType"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.Invoke(string,System.Single)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.IsInvoking(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.IsInvoking"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.MemberwiseClone"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.RunEvent"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(string,object)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopAllCoroutines"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(string)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.ToString"></member><member name="M:CameraKeyFrameEvents.CameraKeyFrameEvent.#ctor"></member><member name="T:CameraManager"></member><member name="F:CameraManager.currentCameraMode"></member><member name="F:CameraManager.existingFlightFoV"></member><member name="F:CameraManager.existingIVAFoV"></member><member name="F:CameraManager.previousCameraMode"></member><member name="P:CameraManager.enabled"></member><member name="P:CameraManager.gameObject"></member><member name="P:CameraManager.hideFlags"></member><member name="P:CameraManager.isActiveAndEnabled"></member><member name="P:CameraManager.IVACameraActiveKerbal"><summary>The Kerbal that the current/last IVA Camera is/was attached to.</summary></member><member name="P:CameraManager.IVACameraActiveKerbalIndex"><summary>This is the index in the activeVessel.GetVesselCrew() list of the current/las IVACameraActiveKerbal</summary></member><member name="P:CameraManager.name"></member><member name="P:CameraManager.tag"></member><member name="P:CameraManager.transform"></member><member name="P:CameraManager.useGUILayout"></member><member name="P:CameraManager.Instance"></member><member name="M:CameraManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.BroadcastMessage(string,object)"></member><member name="M:CameraManager.BroadcastMessage(string)"></member><member name="M:CameraManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.CancelInvoke"></member><member name="M:CameraManager.CancelInvoke(string)"></member><member name="M:CameraManager.CompareTag(string)"></member><member name="M:CameraManager.Equals(object)"></member><member name="M:CameraManager.Finalize"></member><member name="M:CameraManager.GetComponent(System.Type)"></member><member name="M:CameraManager.GetComponent"></member><member name="M:CameraManager.GetComponent(string)"></member><member name="M:CameraManager.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:CameraManager.GetComponentInChildren(System.Type)"></member><member name="M:CameraManager.GetComponentInChildren"></member><member name="M:CameraManager.GetComponentInChildren(System.Boolean)"></member><member name="M:CameraManager.GetComponentInParent(System.Type)"></member><member name="M:CameraManager.GetComponentInParent"></member><member name="M:CameraManager.GetComponents(System.Type)"></member><member name="M:CameraManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CameraManager.GetComponents(List)"></member><member name="M:CameraManager.GetComponents"></member><member name="M:CameraManager.GetComponentsInChildren(System.Type)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:CameraManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CameraManager.GetComponentsInChildren"></member><member name="M:CameraManager.GetComponentsInChildren(List)"></member><member name="M:CameraManager.GetComponentsInParent(System.Type)"></member><member name="M:CameraManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CameraManager.GetComponentsInParent(System.Boolean)"></member><member name="M:CameraManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CameraManager.GetComponentsInParent"></member><member name="M:CameraManager.GetHashCode"></member><member name="M:CameraManager.GetInstanceID"></member><member name="M:CameraManager.GetType"></member><member name="M:CameraManager.Invoke(string,System.Single)"></member><member name="M:CameraManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CameraManager.IsInvoking(string)"></member><member name="M:CameraManager.IsInvoking"></member><member name="M:CameraManager.MemberwiseClone"></member><member name="M:CameraManager.NextCamera"><para>Switches to next camera in current mode</para></member><member name="M:CameraManager.NextCameraIVA"><para>Sets next IVA camera active</para></member><member name="M:CameraManager.NextCameraMode"><para>Switches to next camera mode</para></member><member name="M:CameraManager.PreviousCameraMode"><para>Switches to previous camera mode</para></member><member name="M:CameraManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessage(string,object)"></member><member name="M:CameraManager.SendMessage(string)"></member><member name="M:CameraManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SendMessageUpwards(string,object)"></member><member name="M:CameraManager.SendMessageUpwards(string)"></member><member name="M:CameraManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CameraManager.SetCameraFlight"><para>Sets flight camera active</para></member><member name="M:CameraManager.SetCameraInternal(InternalModel,UnityEngine.Transform)"></member><member name="M:CameraManager.SetCameraIVA"><para>Sets first IVA camera active</para><para>&lt;simplesect kind='return'&gt;<para>False if no IVA camera is available</para>&lt;/simplesect&gt;</para></member><member name="M:CameraManager.SetCameraIVA(Kerbal,System.Boolean)"><para>Sets specified kerbal camera active</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;kerbal&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:CameraManager.SetCameraMap"><para>Sets map camera active</para></member><member name="M:CameraManager.SetCameraMode(CameraManager+CameraMode)"><para>Sets the camera mode</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mode&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:CameraManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StartCoroutine(string,object)"></member><member name="M:CameraManager.StartCoroutine(string)"></member><member name="M:CameraManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StopAllCoroutines"></member><member name="M:CameraManager.StopCoroutine(string)"></member><member name="M:CameraManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CameraManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CameraManager.ToString"></member><member name="M:CameraManager.GetCurrentCamera"></member><member name="M:CameraManager.ICameras_DeactivateAll"><para>Deactivates all cameras implementing ICamera interface</para></member><member name="M:CameraManager.ICameras_ResetAll"><para>Deactivates all cameras implementing ICamera interface</para></member><member name="M:CameraManager.#ctor"></member><member name="T:CelestialBody"><summary>The Sun, the planets, and the moons are all CelestialBodies.</summary></member><member name="F:CelestialBody.afg"></member><member name="F:CelestialBody.albedo"></member><member name="F:CelestialBody.angularV"><summary>The magnitude of the angular velocity of the body's rotation, in radians per second.</summary></member><member name="F:CelestialBody.angularVelocity"><summary>The body's angular velocity vector, in rotations per second. This points along the axis of rotation and its magnitude is the rotation rate in radians per second.</summary></member><member name="F:CelestialBody.atmDensityASL"></member><member name="F:CelestialBody.atmosphere"><summary>Whether this body has an atmosphere</summary></member><member name="F:CelestialBody.atmosphereAdiabaticIndex"><para>&lt;ulink url='http://en.wikipedia.org/wiki/Heat_capacity_ratio'&gt;http://en.wikipedia.org/wiki/Heat_capacity_ratio&lt;/ulink&gt;</para></member><member name="F:CelestialBody.atmosphereContainsOxygen"><summary>Presumably, whether jet engines will work in this body's atmosphere</summary></member><member name="F:CelestialBody.atmosphereDepth"><para>m</para></member><member name="F:CelestialBody.atmosphereGasMassLapseRate"><para>bananas per km</para></member><member name="F:CelestialBody.atmosphereMolarMass"><para>kg/mol</para></member><member name="F:CelestialBody.atmospherePressureCurve"><summary>Curve of the pressure(kPa) at altitude(m)</summary></member><member name="F:CelestialBody.atmospherePressureCurveIsNormalized"></member><member name="F:CelestialBody.atmospherePressureSeaLevel"><para>kPA</para></member><member name="F:CelestialBody.atmosphereTemperatureCurve"></member><member name="F:CelestialBody.atmosphereTemperatureCurveIsNormalized"></member><member name="F:CelestialBody.atmosphereTemperatureLapseRate"><para>K/km.</para></member><member name="F:CelestialBody.atmosphereTemperatureSeaLevel"><para>K.</para></member><member name="F:CelestialBody.atmosphereTemperatureSunMultCurve"></member><member name="F:CelestialBody.atmosphereUsePressureCurve"></member><member name="F:CelestialBody.atmosphereUseTemperatureCurve"></member><member name="F:CelestialBody.atmosphericAmbientColor"></member><member name="F:CelestialBody.axialTemperatureSunBiasCurve"></member><member name="F:CelestialBody.axialTemperatureSunMultCurve"></member><member name="F:CelestialBody.BiomeMap"></member><member name="F:CelestialBody.bodyDescription"></member><member name="F:CelestialBody.bodyDisplayName"><para>This is the Celestial Body name text that is used in UI displays. It is localized and has a Gender for &lt;ref refid='namespace_lingoona' kindref='compound'&gt;Lingoona&lt;/ref&gt;. Genders are ^M - Male, ^F - Female, ^N - Neutral.</para></member><member name="F:CelestialBody.BodyFrame"></member><member name="F:CelestialBody.bodyName"><para>This is the Celestial Body name text. It will always be in English.</para><remarks>- The name of the body, as a string.</remarks></member><member name="F:CelestialBody.bodyTransform"></member><member name="F:CelestialBody.bodyType"></member><member name="F:CelestialBody.clampInverseRotThreshold"></member><member name="F:CelestialBody.convectionMultiplier"></member><member name="F:CelestialBody.coreTemperatureOffset"></member><member name="F:CelestialBody.Density"></member><member name="F:CelestialBody.directRotAngle"></member><member name="F:CelestialBody.eccentricityTemperatureBiasCurve"></member><member name="F:CelestialBody.emissivity"></member><member name="F:CelestialBody.GeeASL"><summary>The gravitational acceleration of the body at sea level, in units of gees (1 gee = 9.81 m/s^2)</summary></member><member name="F:CelestialBody.gMagnitudeAtCenter"><summary>The gravitational acceleration (in m/s^2) at a radius r (in m) from the body's center is gMagnitudeAtCenter / r^2</summary></member><member name="F:CelestialBody.gravParameter"><summary>The gravitational parameter GM is the universal gravitational constant G times the mass M of the body.  In KSP the gravitational constant G is exactly 6.673 m^3 / (kg s^2), and the body mass is measured in kilograms.</summary></member><member name="F:CelestialBody.hasSolidSurface"></member><member name="F:CelestialBody.hillSphere"><summary>Unused?</summary></member><member name="F:CelestialBody.initialRotation"></member><member name="F:CelestialBody.inverseRotation"></member><member name="F:CelestialBody.inverseRotThresholdAltitude"></member><member name="F:CelestialBody.isHomeWorld"></member><member name="F:CelestialBody.latitudeTemperatureBiasCurve"></member><member name="F:CelestialBody.latitudeTemperatureSunMultCurve"></member><member name="F:CelestialBody.Mass"><summary>The mass of the body in kilograms. Computed</summary></member><member name="F:CelestialBody.maxAxialDot"></member><member name="F:CelestialBody.MiniBiomes"></member><member name="F:CelestialBody.minOrbitalDistance"></member><member name="F:CelestialBody.navballSwitchRadiusMult"></member><member name="F:CelestialBody.navballSwitchRadiusMultLow"></member><member name="F:CelestialBody.ocean"><summary>Whether this planet has an ocean at "sea level"</summary></member><member name="F:CelestialBody.oceanAFGAltMult"></member><member name="F:CelestialBody.oceanAFGBase"></member><member name="F:CelestialBody.oceanAFGLerp"></member><member name="F:CelestialBody.oceanAFGMin"></member><member name="F:CelestialBody.oceanAlbedoDistanceScalar"></member><member name="F:CelestialBody.oceanAlphaDistanceScalar"></member><member name="F:CelestialBody.oceanDensity"></member><member name="F:CelestialBody.oceanFogColorEnd"></member><member name="F:CelestialBody.oceanFogColorStart"></member><member name="F:CelestialBody.oceanFogDawnFactor"></member><member name="F:CelestialBody.oceanFogDensityAltScalar"></member><member name="F:CelestialBody.oceanFogDensityEnd"></member><member name="F:CelestialBody.oceanFogDensityExponent"></member><member name="F:CelestialBody.oceanFogDensityPQSMult"></member><member name="F:CelestialBody.oceanFogDensityStart"></member><member name="F:CelestialBody.oceanFogPQSDepth"></member><member name="F:CelestialBody.oceanFogPQSDepthRecip"></member><member name="F:CelestialBody.oceanMaxAlbedoFog"></member><member name="F:CelestialBody.oceanMaxAlphaFog"></member><member name="F:CelestialBody.oceanMinAlphaFogDistance"></member><member name="F:CelestialBody.oceanSkyColorMult"></member><member name="F:CelestialBody.oceanSkyColorOpacityAltMult"></member><member name="F:CelestialBody.oceanSkyColorOpacityBase"></member><member name="F:CelestialBody.oceanSunAltMult"></member><member name="F:CelestialBody.oceanSunBase"></member><member name="F:CelestialBody.oceanSunMin"></member><member name="F:CelestialBody.oceanUseFog"></member><member name="F:CelestialBody.orbitDriver"><summary>this is what gives the celestial body its orbit and makes it go along the orbit as well</summary></member><member name="F:CelestialBody.orbitingBodies"><summary>A list of this body's moons (or, in the case of the Sun, a list of the planets).</summary></member><member name="F:CelestialBody.pqsController"><summary>The pqsController computes the terrain of the planet. Note that for the Sun and Gas Giants, pqsController = null.</summary></member><member name="F:CelestialBody.pqsSurfaceObjects"></member><member name="F:CelestialBody.progressTree"></member><member name="F:CelestialBody.Radius"><summary>The radius of the planet in meters. Note that this is only the radius of "sea level"; the actual terrain may be higher.</summary></member><member name="F:CelestialBody.radiusAtmoFactor"></member><member name="F:CelestialBody.rotates"></member><member name="F:CelestialBody.rotation"></member><member name="F:CelestialBody.rotationAngle"></member><member name="F:CelestialBody.rotationPeriod"><summary>The time, in seconds, for the body to complete one rotation around its axis</summary></member><member name="F:CelestialBody.rotPeriodRecip"></member><member name="F:CelestialBody.scaledBody"></member><member name="F:CelestialBody.scaledElipRadMult"></member><member name="F:CelestialBody.scaledEllipsoid"></member><member name="F:CelestialBody.scaledRadiusHorizonMultiplier"></member><member name="F:CelestialBody.scienceValues"></member><member name="F:CelestialBody.shockTemperatureMultiplier"></member><member name="F:CelestialBody.solarDayLength"></member><member name="F:CelestialBody.solarRotationPeriod"></member><member name="F:CelestialBody.sphereOfInfluence"><summary>The radius of this body's sphere of influence (measured from the center of the body), in meters.</summary></member><member name="F:CelestialBody.SurfaceArea"></member><member name="F:CelestialBody.tidallyLocked"><summary>Presumably, whether this body is tidally locked to the body around with it orbits.</summary></member><member name="F:CelestialBody.timeWarpAltitudeLimits"><summary>Presumably, this gives the minimum altitude you must have in order to be allowed to use each warp rate when in this body's sphere of influence.</summary></member><member name="F:CelestialBody.zUpAngularVelocity"></member><member name="F:CelestialBody.bodyEmissiveScalarS0Back"></member><member name="F:CelestialBody.bodyEmissiveScalarS0Front"></member><member name="F:CelestialBody.bodyEmissiveScalarS0Top"></member><member name="F:CelestialBody.bodyEmissiveScalarS1"></member><member name="F:CelestialBody.bodyEmissiveScalarS1Top"></member><member name="P:CelestialBody.DiscoveryInfo"><summary>Describes to what extent this body has been explored</summary></member><member name="P:CelestialBody.displayName"><para>This is the Celestial Body name that is used in UI displays. It includes the planets Gender tag for grammar purposes.</para></member><member name="P:CelestialBody.enabled"></member><member name="P:CelestialBody.flightGlobalsIndex"></member><member name="P:CelestialBody.gameObject"></member><member name="P:CelestialBody.hideFlags"></member><member name="P:CelestialBody.isActiveAndEnabled"></member><member name="P:CelestialBody.MapObject"></member><member name="P:CelestialBody.name"></member><member name="P:CelestialBody.orbit"><summary>Describes the orbit of this body around its primary.</summary></member><member name="P:CelestialBody.position"><summary>The position of the center of the body, in world coordinates.</summary></member><member name="P:CelestialBody.referenceBody"><summary>Presumably, the body this body orbits around</summary></member><member name="P:CelestialBody.ResourceMap"></member><member name="P:CelestialBody.RotationAxis"></member><member name="P:CelestialBody.tag"></member><member name="P:CelestialBody.transform"></member><member name="P:CelestialBody.useGUILayout"></member><member name="M:CelestialBody.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.BroadcastMessage(string,object)"></member><member name="M:CelestialBody.BroadcastMessage(string)"></member><member name="M:CelestialBody.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.CancelInvoke"></member><member name="M:CelestialBody.CancelInvoke(string)"></member><member name="M:CelestialBody.CBUpdate"><para>&amp;lt; update rotation before position, as the orbit calculations will use &lt;ref refid='class_planetarium_1a55ac5ee010f611c35c4b2a4c6feab45a' kindref='member'&gt;Planetarium.Rotation&lt;/ref&gt;, and that needs to be updated</para><para>&amp;lt; Set solar day length</para></member><member name="M:CelestialBody.CompareTag(string)"></member><member name="M:CelestialBody.debugTimeWarpLimits"></member><member name="M:CelestialBody.Equals(object)"></member><member name="M:CelestialBody.Finalize"></member><member name="M:CelestialBody.GetActiveTargetable"></member><member name="M:CelestialBody.GetAltitude(Vector3d)"><summary>Gets the height of a given position above this body's sea level, in meters.</summary><param name="worldPos">A position in world coordinates</param><returns>Altitude in meters</returns></member><member name="M:CelestialBody.GetAtmoThermalStats(System.Boolean,CelestialBody,Vector3d,System.Double,Vector3d,System.Double,double&amp;,double&amp;,double&amp;)"></member><member name="M:CelestialBody.getBounds"></member><member name="M:CelestialBody.GetComponent(System.Type)"></member><member name="M:CelestialBody.GetComponent"></member><member name="M:CelestialBody.GetComponent(string)"></member><member name="M:CelestialBody.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:CelestialBody.GetComponentInChildren(System.Type)"></member><member name="M:CelestialBody.GetComponentInChildren"></member><member name="M:CelestialBody.GetComponentInChildren(System.Boolean)"></member><member name="M:CelestialBody.GetComponentInParent(System.Type)"></member><member name="M:CelestialBody.GetComponentInParent"></member><member name="M:CelestialBody.GetComponents(System.Type)"></member><member name="M:CelestialBody.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CelestialBody.GetComponents(List)"></member><member name="M:CelestialBody.GetComponents"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Type)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CelestialBody.GetComponentsInChildren"></member><member name="M:CelestialBody.GetComponentsInChildren(List)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Type)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Boolean)"></member><member name="M:CelestialBody.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CelestialBody.GetComponentsInParent"></member><member name="M:CelestialBody.GetDensity(System.Double,System.Double)"></member><member name="M:CelestialBody.GetDisplayName"></member><member name="M:CelestialBody.GetFrameVel"><para>Get the velocity of the celestial body in relation to the solar system inertial frame.</para><para>&lt;simplesect kind='return'&gt;<para>Vector in Z-up coords.</para>&lt;/simplesect&gt;</para><remarks>- The velocity of the CelestialBody, {AliceWorld, Sun}. (See Orbit.cs for the reference frame definitions).</remarks></member><member name="M:CelestialBody.GetFrameVelAtUT(System.Double)"></member><member name="M:CelestialBody.GetFullTemperature(System.Double,System.Double)"></member><member name="M:CelestialBody.GetFullTemperature(Vector3d)"></member><member name="M:CelestialBody.GetFwdVector"></member><member name="M:CelestialBody.GetHashCode"></member><member name="M:CelestialBody.GetImpactLatitudeAndLongitude(Vector3d,Vector3d,double&amp;,double&amp;)"></member><member name="M:CelestialBody.GetInstanceID"></member><member name="M:CelestialBody.GetLatitude(Vector3d,System.Boolean)"></member><member name="M:CelestialBody.GetLatitude(Vector3d)"><summary>Gets the latitude of a given position, in degrees.</summary><param name="worldPos">A position in world coordinates</param><returns>Latitude in degrees</returns></member><member name="M:CelestialBody.GetLatitudeAndLongitude(Vector3d,System.Boolean)"></member><member name="M:CelestialBody.GetLatLonAlt(Vector3d,double&amp;,double&amp;,double&amp;)"></member><member name="M:CelestialBody.GetLatLonAltOrbital(Vector3d,double&amp;,double&amp;,double&amp;)"></member><member name="M:CelestialBody.GetLongitude(Vector3d,System.Boolean)"></member><member name="M:CelestialBody.GetLongitude(Vector3d)"><summary>Gets the longitude of a given position, in degrees. Note that you CANNOT count on this value being in any particular range. This function may for example return 420, meaning 60 degrees east. You would be well advised to coerce it into a standard range like -180 to 180 before using it.</summary><param name="worldPos">A position in world coordinates</param><returns>Longitude in degrees</returns></member><member name="M:CelestialBody.GetName"></member><member name="M:CelestialBody.GetObtVelocity"></member><member name="M:CelestialBody.GetOrbit"></member><member name="M:CelestialBody.GetOrbitDriver"></member><member name="M:CelestialBody.getPositionAtUT(System.Double)"></member><member name="M:CelestialBody.GetPressure(System.Double)"></member><member name="M:CelestialBody.GetRandomLatitudeAndLongitude(double&amp;,double&amp;,System.Boolean,System.Boolean,System.Random)"></member><member name="M:CelestialBody.GetRelSurfaceDirection(Vector3d)"><para>Returns a planet-relative direction, given the world space direction</para></member><member name="M:CelestialBody.GetRelSurfaceNVector(System.Double,System.Double)"><para>Returns a planet-relative normal vector, given latitude and longitude</para><para>&lt;simplesect kind='return'&gt;<para>A normalized radial vector, relative to planet space</para>&lt;/simplesect&gt;</para></member><member name="M:CelestialBody.GetRelSurfacePosition(System.Double,System.Double,System.Double)"><para>Returns a planet-relative position, given the latitude, longitude and altitude. (takes into account planet rotation)</para><remarks>- Returns a vector pointing from the center of the body to the given latitude, longitude, and altitude.</remarks><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><param name="alt">Altitude above sea level in meters</param><returns>A position vector relative to the center of the body</returns></member><member name="M:CelestialBody.GetRelSurfacePosition(System.Double,System.Double,System.Double,Vector3d&amp;)"></member><member name="M:CelestialBody.GetRelSurfacePosition(Vector3d)"><para>Returns a planet-relative position, given the world space position</para></member><member name="M:CelestialBody.getRFrmVel(Vector3d)"><summary>Returns the velocity at a given position of the frame of reference that rotates with the planet. This velocity is the difference between the "orbit" and "surface" velocities.</summary><param name="worldPos">A position in world coordinates</param><returns>Velocity of the rotating reference frame</returns></member><member name="M:CelestialBody.getRFrmVelOrbit(Orbit)"></member><member name="M:CelestialBody.GetSolarAtmosphericEffects(System.Double,System.Double,double&amp;,double&amp;)"></member><member name="M:CelestialBody.GetSolarPowerFactor(System.Double)"></member><member name="M:CelestialBody.GetSpeedOfSound(System.Double,System.Double)"></member><member name="M:CelestialBody.GetSrfVelocity"></member><member name="M:CelestialBody.GetSurfaceNVector(System.Double,System.Double)"><para>Returns a normal vector, given the latitude and longitude (takes planet rotation into account)</para><para>&lt;simplesect kind='return'&gt;<para>A normalized vector, pointing to the resulting direction</para>&lt;/simplesect&gt;</para><remarks>- Returns a unit vector perpendicular to the surface of the body at the given latitude and longitude (pretending for the moment that the body is a perfect sphere).</remarks><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><returns>A unit normal vector to the surface</returns></member><member name="M:CelestialBody.GetTargetingMode"></member><member name="M:CelestialBody.GetTemperature(System.Double)"><para>&amp;lt; baseValue += latitudeTemperatureBiasCurve.Evaluate(latitudeDot);</para></member><member name="M:CelestialBody.GetTransform"></member><member name="M:CelestialBody.getTruePositionAtUT(System.Double)"></member><member name="M:CelestialBody.GetType"></member><member name="M:CelestialBody.GetVessel"></member><member name="M:CelestialBody.GetWorldSurfacePosition(System.Double,System.Double,System.Double)"><para>Returns a worldspace position, given the latitude, longitude and altitude. (takes into account planet rotation)</para><remarks>- Returns the position, in world coordinates, of a given latitude, longitude, and altitude</remarks><param name="lat">Latitude in degrees</param><param name="lon">Longitude in degrees</param><param name="alt">Altitude above sea level in meters</param><returns>Position in world coordinates</returns></member><member name="M:CelestialBody.HasChild(CelestialBody)"></member><member name="M:CelestialBody.HasParent(CelestialBody)"><para>&amp;lt; sun case</para></member><member name="M:CelestialBody.HideSurfaceResource"></member><member name="M:CelestialBody.Invoke(string,System.Single)"></member><member name="M:CelestialBody.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CelestialBody.IsInvoking(string)"></member><member name="M:CelestialBody.IsInvoking"></member><member name="M:CelestialBody.MemberwiseClone"></member><member name="M:CelestialBody.resetTimeWarpLimits"></member><member name="M:CelestialBody.RevealAltitude"><summary>Returns the body's altitude above the reference sphere of its primary  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealDisplayName"></member><member name="M:CelestialBody.RevealMass"><summary>Returns the body's mass, in kg  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealName"><summary>Returns the body's tracking station name  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealSituationString"><summary>Describes the state of the body</summary><returns>A string containing the sphere of influence and trajectory of the object</returns><example>"Orbiting the Sun"</example><remarks>Implements IDiscoverable</remarks></member><member name="M:CelestialBody.RevealSpeed"><summary>Returns the body's speed  Implements IDiscoverable</summary></member><member name="M:CelestialBody.RevealType"><summary>Returns the type of the body</summary><returns>One of "Sun", "Planet", or "Moon"</returns><remarks>Implements IDiscoverable</remarks></member><member name="M:CelestialBody.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessage(string,object)"></member><member name="M:CelestialBody.SendMessage(string)"></member><member name="M:CelestialBody.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SendMessageUpwards(string,object)"></member><member name="M:CelestialBody.SendMessageUpwards(string)"></member><member name="M:CelestialBody.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CelestialBody.SetResourceMap(UnityEngine.Texture2D)"></member><member name="M:CelestialBody.SetupConstants"><para>&amp;lt; depth to scaleheight (approx)</para></member><member name="M:CelestialBody.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StartCoroutine(string,object)"></member><member name="M:CelestialBody.StartCoroutine(string)"></member><member name="M:CelestialBody.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StopAllCoroutines"></member><member name="M:CelestialBody.StopCoroutine(string)"></member><member name="M:CelestialBody.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CelestialBody.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CelestialBody.TerrainAltitude(System.Double,System.Double,System.Boolean)"></member><member name="M:CelestialBody.ToString"></member><member name="M:CelestialBody.GetBodyReferencing(CelestialBody,CelestialBody)"></member><member name="M:CelestialBody.#ctor"><para>&amp;lt; update rotation before position, as the orbit calculations will use &lt;ref refid='class_planetarium_1a55ac5ee010f611c35c4b2a4c6feab45a' kindref='member'&gt;Planetarium.Rotation&lt;/ref&gt;, and that needs to be updated</para><para>&amp;lt; Set solar day length</para></member><member name="T:ConfigNode"><para>Acts as a config file reader and writer. Contains a list of values and sub nodes. Can read or write itself or objects to files.</para><remarks>- A ConfigNode represents a collection of data that can be serialized to or deserialized from a file. A ConfigNode contains a set of values, and optionally one or more ConfigNodes, so they can be used recursively.</remarks></member><member name="F:ConfigNode.comment"><para>The comment, if any, for this node</para></member><member name="F:ConfigNode.id"><para>ID of this node if given</para></member><member name="F:ConfigNode.name"><para>Name of this node</para><remarks>-</remarks></member><member name="F:ConfigNode.configTabIndent"><para>Default config indent character</para><para>************************************* Constructors, ToString, CopyTo *************************************</para><remarks>-</remarks></member><member name="P:ConfigNode.CountNodes"><para>Returns number of nodes in this node</para><remarks>-</remarks></member><member name="P:ConfigNode.CountValues"><para>Returns number of values in this node</para><remarks>-</remarks></member><member name="P:ConfigNode.HasData"><para>Has this config node any data (values or nodes) assigned</para><remarks>-</remarks></member><member name="P:ConfigNode.nodes"></member><member name="P:ConfigNode.values"></member><member name="M:ConfigNode.AddData(ConfigNode)"></member><member name="M:ConfigNode.AddNode(string)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Add a sub-ConfigNode with a given name to this node.</remarks><param name="name">The name of the new node</param><returns>The newly created sub-ConfigNode</returns></member><member name="M:ConfigNode.AddNode(string,string)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddNode(ConfigNode)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddNode(string,ConfigNode)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,object,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;(defaults to null)</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,string,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;(defaults to null)</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,object)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Add a new piece of data to this ConfigNode. Values show up in serialized ConfigNodes as lines of the form</remarks><para><code>name = value</code></para><param name="name">The name of the new value.</param><param name="value">The data to store.</param></member><member name="M:ConfigNode.AddValue(string,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Add a new piece of data to this ConfigNode. Values show up in serialized ConfigNodes as lines of the form</remarks><para><code>name = value</code></para><param name="name">The name of the new value.</param><param name="value">The data to store.</param></member><member name="M:ConfigNode.AddValue(string,System.Boolean,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Boolean)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Byte,string)"></member><member name="M:ConfigNode.AddValue(string,System.Byte)"></member><member name="M:ConfigNode.AddValue(string,System.SByte,string)"></member><member name="M:ConfigNode.AddValue(string,System.SByte)"></member><member name="M:ConfigNode.AddValue(string,System.Char,string)"></member><member name="M:ConfigNode.AddValue(string,System.Char)"></member><member name="M:ConfigNode.AddValue(string,System.Decimal,string)"></member><member name="M:ConfigNode.AddValue(string,System.Decimal)"></member><member name="M:ConfigNode.AddValue(string,System.Double,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Double)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Single,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Single)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Int32,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Int32)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.UInt32,string)"></member><member name="M:ConfigNode.AddValue(string,System.UInt32)"></member><member name="M:ConfigNode.AddValue(string,System.Int64,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.Int64)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,System.UInt64,string)"></member><member name="M:ConfigNode.AddValue(string,System.UInt64)"></member><member name="M:ConfigNode.AddValue(string,System.Int16,string)"></member><member name="M:ConfigNode.AddValue(string,System.Int16)"></member><member name="M:ConfigNode.AddValue(string,System.UInt16,string)"></member><member name="M:ConfigNode.AddValue(string,System.UInt16)"></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector2,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector2)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector3,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector3)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,Vector3d,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,Vector3d)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector4,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Vector4)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Quaternion,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Quaternion)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.QuaternionD,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.QuaternionD)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Matrix4x4,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Matrix4x4)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Color,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Color)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Color32,string)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;commment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.AddValue(string,UnityEngine.Color32)"><para>Adds a value of given name to values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.ClearData"><para>Clear all data that this node has</para><remarks>- Remove all nodes and values?</remarks></member><member name="M:ConfigNode.ClearNodes"><para>Clears the list of nodes</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Remove all sub-ConfigNodes from this ConfigNode?</remarks></member><member name="M:ConfigNode.ClearValues"><para>Clears the list of values</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Remove all values from this ConfigNode?</remarks></member><member name="M:ConfigNode.CopyTo(ConfigNode)"><para>Copies this &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; into another &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; recursivly</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Node to copy into</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Copies the contents of this node into a different ConfigNode</remarks><param name="node">The ConfigNode to copy this one into.</param></member><member name="M:ConfigNode.CopyTo(ConfigNode,System.Boolean)"><para>Copies this &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; into another ConfgNode recursively, overwriting nodes/values if specified.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;overwrite&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ConfigNode.CopyTo(ConfigNode,string)"><para>Copies this &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; into another &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; recursivly</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Node to copy into</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.CreateCopy"><para>Creates a copy of this confignode</para></member><member name="M:ConfigNode.Equals(object)"></member><member name="M:ConfigNode.Finalize"></member><member name="M:ConfigNode.GetHashCode"></member><member name="M:ConfigNode.GetNode(string)"><para>Gets a node of the given name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.GetNode(string,string,string)"><para>Gets a node of the given name and has a value of value value</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;valueName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetNode(string,System.Int32)"><para>Gets a node of the given name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;index&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetNodeID(string)"><para>Gets a node of the given ID</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetNodes(string)"><para>Gets an array of nodes that share the given name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.GetNodes(string,string,string)"><para>Gets an array of nodes that share the given name and have a value of name valueName and value value</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;valueName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetNodes"><para>Gets an array of all nodes within this node</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetType"></member><member name="M:ConfigNode.GetValue(string)"><para>Gets a value by name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.GetValue(string,System.Int32)"><para>Gets a value by name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;index&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetValues"><para>Gets an array of all values on the node</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ConfigNode.GetValues(string)"><para>Gets an array of values sharing the same name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.GetValuesList(string)"><para>Gets an array of values sharing the same name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.GetValuesStartsWith(string)"><para>Gets an array of values sharing the same name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.HasNode(string)"><para>Does this node contain a node of the given name?</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.HasNode"><para>Does this config node contain any nodes</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.HasNodeID(string)"><para>Does this node contain a node of the given name?</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.HasValue(string)"><para>Does this config node contain a value of given name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.HasValue"><para>Does this config node contain any values</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.HasValues(string[])"></member><member name="M:ConfigNode.MemberwiseClone"></member><member name="M:ConfigNode.RemoveNode(string)"><para>Removes the first node of given name from the node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of node to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveNode(ConfigNode)"><para>Removes the first node of given name from the node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of node to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveNodes(string)"><para>Removes all nodes of given name from the node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of nodes to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveNodesStartWith(string)"><para>Removes all nodes of given name from the node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;startsWith&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of nodes to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveValue(string)"><para>Removes the first value of given name from the value list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of value to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveValues(string[])"></member><member name="M:ConfigNode.RemoveValues(string)"><para>Removes all values of given name from the value list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;startsWith&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of values to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.RemoveValuesStartWith(string)"><para>Removes all values that start with the given string form the values list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of values to remove</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.Save(string)"><para>Saves this node to a file</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fileFullName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Full file path of file to load</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>true</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Seralize this ConfigNode to a file.</remarks><param name="fileFullName">A filename (absolute path?)</param><returns>?</returns></member><member name="M:ConfigNode.Save(string,string)"><para>Saves this node to a file</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fileFullName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Full file path of file to load</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;header&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Helpful header text&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;True&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Boolean)"><para>Sets a node by name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Int32,System.Boolean)"><para>Sets a node by name. index being the nth occurance of the value name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetNode(string,ConfigNode)"></member><member name="M:ConfigNode.SetNode(string,ConfigNode,System.Int32)"></member><member name="M:ConfigNode.SetValue(string,System.Int64,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt64,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt64,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt64,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt64,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int16,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int16,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int16,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int16,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt16,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt16,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt16,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt16,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector2,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector2,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector2,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector2,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector3,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector3,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector3,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector3,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,Vector3d,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,Vector3d,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,Vector3d,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,Vector3d,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector4,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector4,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector4,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Vector4,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Quaternion,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Quaternion,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Quaternion,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Quaternion,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.QuaternionD,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.QuaternionD,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.QuaternionD,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.QuaternionD,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Matrix4x4,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Matrix4x4,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Matrix4x4,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Matrix4x4,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color32,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color32,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,UnityEngine.Color32,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string,System.Boolean)"><para>Sets a value by name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetValue(string,string,System.Int32,System.Boolean)"><para>Sets a value by name. index being the nth occurance of the value name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetValue(string,string,string,System.Boolean)"><para>Sets a value by name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetValue(string,string,string,System.Int32,System.Boolean)"><para>Sets a value by name. index being the nth occurance of the value name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.SetValue(string,System.Boolean,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Boolean,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Boolean,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Boolean,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Byte,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Byte,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Byte,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Byte,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.SByte,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.SByte,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.SByte,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.SByte,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Char,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Char,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Char,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Char,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Decimal,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Decimal,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Decimal,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Decimal,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Double,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Double,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Double,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Double,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Single,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Single,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Single,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Single,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int32,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int32,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int32,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt32,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt32,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.UInt32,string,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int64,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int64,System.Int32,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,System.Int64,string,System.Boolean)"></member><member name="M:ConfigNode.SetValue(string,string)"></member><member name="M:ConfigNode.SetValue(string,string,System.Int32)"></member><member name="M:ConfigNode.ToString"><para>Gets string representation of this node recursivly</para><para>&lt;simplesect kind='return'&gt;<para>Multi-line string</para>&lt;/simplesect&gt;</para><remarks>- Seralizes this ConfigNode to a string.</remarks><returns>A serialized version of this ConfigNode</returns></member><member name="M:ConfigNode.TryGetNode(string,ConfigNode&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,string&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,string[]&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,float&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,double&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,int&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,long&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,bool&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector3&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,Vector3d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector2&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector2d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector4&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Vector4d&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Quaternion&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.QuaternionD&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Rect&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Color&amp;)"></member><member name="M:ConfigNode.TryGetValue(string,UnityEngine.Color32&amp;)"></member><member name="M:ConfigNode.CheckAndParseColor(string,UnityEngine.Color&amp;)"></member><member name="M:ConfigNode.CompileConfig(ConfigNode)"></member><member name="M:ConfigNode.CreateConfigFromObject(object)"><para>Creates a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from any object. Uses reflection.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;obj&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Object to create &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; representation</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Create a ConfigNode from a given object. This function will use reflection to scan the given object looking for fields with the [Persistent] attribute. When it finds such a field  it adds it as a name-value pair to the returned ConfigNode. The name wil be the name of the field, and the value will the the serialized version of the field's data.</remarks><param name="obj">The object to scan to create a ConfigNode</param><returns>A ConfigNode containing the persistent fields of the object.</returns></member><member name="M:ConfigNode.CreateConfigFromObject(object,ConfigNode)"><para>Creates a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from any object. Uses reflection.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;obj&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Object to create &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to create data into&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; representation&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.CreateConfigFromObject(object,System.Int32)"><para>Creates a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from any object. Uses reflection.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;obj&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Object to create &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; representation</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Like CreateConfigFromObject, but only pays attention to fields with the "pass" field of the [Persistent] attribute set to pass.</remarks><param name="obj">The object to scan to create a ConfigNode.</param><param name="pass">A flag indicate which fields to serialize.</param><returns>A ConfigNode containing the desired persistent fields of the object.</returns></member><member name="M:ConfigNode.CreateConfigFromObject(object,System.Int32,ConfigNode)"><para>Creates a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from any object. Uses reflection.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;obj&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Object to create &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to create data into&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; representation&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.CreateObjectFromConfig(string,ConfigNode)"><para>Creates an object from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; of the given type name and loads the values into it. DO NOT USE ON MONOBEHAVIOURS!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;typeName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of type to create</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to load from&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;Created object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.CreateObjectFromConfig(ConfigNode)"><para>Creates an object from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;, the class name being the node name and loads the values into it. DO NOT USE ON MONOBEHAVIOURS!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to load from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>Created object</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.CreateObjectFromConfig(ConfigNode)"><para>Creates an object from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;, the class name being the node name and loads the values into it. DO NOT USE ON MONOBEHAVIOURS!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to load from</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>Created object</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.Load(string)"><para>Loads a file into a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fileFullName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Full file path of file to load</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>Created &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; or null if failure</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.LoadFromTextAssetResource(string)"><para>Loads a text asset in resoruces into a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;, splits the file using the standard line brakes.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;cfgData&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Path in resources for the TextAsset</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>Created &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; or null if failure&amp;lt;/returns</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode,System.Int32,System.Boolean)"><para>Loads values from a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; into an object</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;obj&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Object to load node into</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to load from&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;True if successful&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode,System.Int32)"><summary>Like LoadObjectFromConfig, but only pays attention to fields for which the "pass" field of the [Persistent] attribute is equal to pass.</summary><param name="obj">The object to initialize</param><param name="node">The ConfigNode used to initialize the object.</param><param name="pass">A flag indicating which fields to initialize.</param><returns/></member><member name="M:ConfigNode.LoadObjectFromConfig(object,ConfigNode)"><summary>Initialize an existing object using data from the ConfigNode. This method will scan the object looking for fields with the [Persistent] attribute. When it finds such a field, it looks in the ConfigNode for a matching name-value pair, and then parses the value and sets the field to the result.</summary><param name="obj">The object to initialize</param><param name="node">The ConfigNode used to initialize the object.</param><returns/></member><member name="M:ConfigNode.Merge(ConfigNode,ConfigNode)"></member><member name="M:ConfigNode.Parse(string)"><para>Creates a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; from a string</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;s&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Input string</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.ParseColor(string)"><para>Parses a Color from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseColor32(string)"><para>Parses a Color from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseEnum(System.Type,string)"><para>Parses a Color from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseMatrix4x4(string)"><para>Parses a Matrix4x4 from a comma-separated string of values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseQuaternion(string)"><para>Parses a Quaternion from a comma-separated string of XYZW values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseQuaternionD(string)"><para>Parses a QuaternionD from a comma-separated string of XYZW values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseVector2(string)"><para>Parses a Vector2 from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseVector3(string)"><para>Parses a Vector3 from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseVector3D(string)"><para>Parses a Vector3 from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.ParseVector4(string)"><para>Parses a Vector4 from a comma-separated string of XYZ values</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteColor(UnityEngine.Color)"><para>Returns a comma-separated string for the given color</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteColor(UnityEngine.Color32)"><para>Returns a comma-separated string for the given color</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteEnum(System.Enum)"><para>Returns a comma-separated string for the given color</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteMatrix4x4(UnityEngine.Matrix4x4)"><para>Returns a comma-separated string for the given Matrix4x4</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteQuaternion(UnityEngine.Quaternion)"><para>Returns a comma-separated string for the given quaternion</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteQuaternion(UnityEngine.QuaternionD)"><para>Returns a comma-separated string for the given quaternion</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector2)"><para>Returns a comma-separated string for the given vector</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector3)"><para>Returns a comma-separated string for the given vector</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteVector(Vector3d)"><para>Returns a comma-separated string for the given vector</para><remarks>-</remarks></member><member name="M:ConfigNode.WriteVector(UnityEngine.Vector4)"><para>Returns a comma-separated string for the given vector</para><remarks>-</remarks></member><member name="M:ConfigNode.#ctor(string)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:ConfigNode.#ctor(string,string)"><para>Adds a &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; to this node&amp;apos;s node list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ConfigNode.#ctor"><para>Clear all data that this node has</para><remarks>-</remarks></member><member name="T:Contracts.Contract"></member><member name="F:Contracts.Contract.agent"></member><member name="F:Contracts.Contract.AutoAccept"><para>Whether this contract is automatically accepted after being offered by the contract system.</para><remarks>-</remarks></member><member name="F:Contracts.Contract.dateAccepted"></member><member name="F:Contracts.Contract.dateDeadline"></member><member name="F:Contracts.Contract.dateExpire"></member><member name="F:Contracts.Contract.dateFinished"></member><member name="F:Contracts.Contract.deadlineType"></member><member name="F:Contracts.Contract.expiryType"></member><member name="F:Contracts.Contract.FundsAdvance"><para>The funds advance gained from accepting this mission</para><remarks>-</remarks></member><member name="F:Contracts.Contract.FundsCompletion"><para>The funds gained for completing the mission</para><remarks>-</remarks></member><member name="F:Contracts.Contract.FundsFailure"><para>The funds gained for failing the mission</para><remarks>-</remarks></member><member name="F:Contracts.Contract.IgnoresWeight"><para>Whether this contract ignores weight changes, always staying at default.</para></member><member name="F:Contracts.Contract.OnStateChange"></member><member name="F:Contracts.Contract.OnViewedChange"></member><member name="F:Contracts.Contract.prestige"></member><member name="F:Contracts.Contract.ReputationCompletion"><para>The reputation gain for completing the mission</para><remarks>-</remarks></member><member name="F:Contracts.Contract.ReputationFailure"><para>The reputation gain for failing to complete the mission before the deadline</para><remarks>-</remarks></member><member name="F:Contracts.Contract.ScienceCompletion"><para>The science gained for completing the mission</para><remarks>-</remarks></member><member name="F:Contracts.Contract.TimeDeadline"><para>The time duration from when this mission was accepted until the deadline is hit</para><remarks>-</remarks></member><member name="F:Contracts.Contract.TimeExpiry"><para>The time duration from when this mission was generated until it expires</para><remarks>-</remarks></member><member name="P:Contracts.Contract.Agent"><para>Space agency or organisation that is requesting this mission</para><remarks>-</remarks></member><member name="P:Contracts.Contract.AllParameters"></member><member name="P:Contracts.Contract.ContractGuid"><para>Globally unique mission identifier (will be unique even for two contracts considered to be repeats (matching ContractIDs))</para><remarks>-</remarks></member><member name="P:Contracts.Contract.ContractID"><para>Unique mission identifier (combines mission name and parameters)</para><remarks>-</remarks></member><member name="P:Contracts.Contract.ContractState"></member><member name="P:Contracts.Contract.ContractViewed"></member><member name="P:Contracts.Contract.DateAccepted"></member><member name="P:Contracts.Contract.DateDeadline"></member><member name="P:Contracts.Contract.DateExpire"></member><member name="P:Contracts.Contract.DateFinished"></member><member name="P:Contracts.Contract.Description"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Item"></member><member name="P:Contracts.Contract.Keywords"><para>Keywords which help to score agent suitability for this contract</para><remarks>-</remarks></member><member name="P:Contracts.Contract.KeywordsRequired"><para>Keywords which MUST be matched by a mentality in order for agents/mentalities to be valid eg. A mentality which DOES NOT positively score these have these will fail verification (excludes others)</para><remarks>-</remarks></member><member name="P:Contracts.Contract.MissionSeed"><para>The seed that was used to generate the mission</para><remarks>-</remarks></member><member name="P:Contracts.Contract.Notes"></member><member name="P:Contracts.Contract.ParameterCount"></member><member name="P:Contracts.Contract.Parent"></member><member name="P:Contracts.Contract.Prestige"><para>Difficulty that this contract was generated for</para><remarks>-</remarks></member><member name="P:Contracts.Contract.Root"></member><member name="P:Contracts.Contract.Synopsys"></member><member name="P:Contracts.Contract.Title"></member><member name="P:Contracts.Contract.contractsInExistance"></member><member name="P:Contracts.Contract.GameTime"></member><member name="M:Contracts.Contract.Accept"></member><member name="M:Contracts.Contract.AddKeywords(string[])"></member><member name="M:Contracts.Contract.AddKeywordsRequired(string[])"></member><member name="M:Contracts.Contract.AddParameter(Contracts.ContractParameter,string)"></member><member name="M:Contracts.Contract.AwardAdvance"></member><member name="M:Contracts.Contract.AwardCompletion"></member><member name="M:Contracts.Contract.CanBeCancelled"><para>If this contract can be cancelled</para><remarks>-</remarks></member><member name="M:Contracts.Contract.CanBeDeclined"><para>If this contract can be declined</para><remarks>-</remarks></member><member name="M:Contracts.Contract.CanBeFailed"><para>If this contract can fail</para></member><member name="M:Contracts.Contract.Cancel"></member><member name="M:Contracts.Contract.Complete"></member><member name="M:Contracts.Contract.Decline"></member><member name="M:Contracts.Contract.Equals(object)"></member><member name="M:Contracts.Contract.Fail"></member><member name="M:Contracts.Contract.Finalize"></member><member name="M:Contracts.Contract.Generate"><para>Generates a new random mission</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GenerateFailed"></member><member name="M:Contracts.Contract.GetDescription"><para>Generates the human readable mission text from instance info</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GetDestinationWeight(CelestialBody)"></member><member name="M:Contracts.Contract.GetHashCode"></member><member name="M:Contracts.Contract.GetHashString"></member><member name="M:Contracts.Contract.GetNotes"><para>Generates the human readable mission text from instance info</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GetParameter(System.Int32)"></member><member name="M:Contracts.Contract.GetParameter(string)"></member><member name="M:Contracts.Contract.GetParameter(System.Type)"></member><member name="M:Contracts.Contract.GetParameter(string)"></member><member name="M:Contracts.Contract.GetSynopsys"><para>Generates the human readable mission text from instance info</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GetTitle"><para>Generates the human readable mission text from instance info</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GetType"></member><member name="M:Contracts.Contract.GetWeightBodies"><para>Optional celestial bodies to use when making weight changes.</para></member><member name="M:Contracts.Contract.IsFinished"></member><member name="M:Contracts.Contract.Kill"><para>Prepares a contract to be forcibly removed from the contract system.</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MeetRequirements"><para>Test to see if this contract type meets requirements to be able to create a contract</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MemberwiseClone"></member><member name="M:Contracts.Contract.MessageAccepted"><para>Overload to replace standard &amp;apos;contract complete&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageAdvances"><para>Appended to the MessageAccepted when a mission is accepted</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageCancellationPenalties(System.Double,System.Single)"><para>Appended to the text when a mission is cancelled</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageCancelled"><para>Overload to replace standard &amp;apos;mission cancelled&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageCompleted"><para>Overload to replace standard &amp;apos;contract complete&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageDeadlineExpired"><para>Overload to replace standard &amp;apos;deadline expired&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageFailed"><para>Overload to replace standard &amp;apos;deadline expired&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageFailurePenalties"><para>Appended to the text when a mission is failed</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageOffered"><para>Overload to replace standard &amp;apos;contract offered&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageOfferExpired"><para>Overload to replace standard &amp;apos;offer expired&amp;apos; message</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MessageRewards"><para>Appended to the MessageCompleted text when a mission is completed</para><remarks>-</remarks></member><member name="M:Contracts.Contract.MissionControlTextRich"></member><member name="M:Contracts.Contract.MissionNotes"></member><member name="M:Contracts.Contract.MissionParameter(Contracts.ContractParameter,System.Int32)"></member><member name="M:Contracts.Contract.Offer"></member><member name="M:Contracts.Contract.OnAccepted"></member><member name="M:Contracts.Contract.OnCancelled"></member><member name="M:Contracts.Contract.OnCompleted"></member><member name="M:Contracts.Contract.OnDeadlineExpired"></member><member name="M:Contracts.Contract.OnDeclined"></member><member name="M:Contracts.Contract.OnFailed"></member><member name="M:Contracts.Contract.OnFinished"></member><member name="M:Contracts.Contract.OnGenerateFailed"></member><member name="M:Contracts.Contract.OnLoad(ConfigNode)"></member><member name="M:Contracts.Contract.OnOffered"></member><member name="M:Contracts.Contract.OnOfferExpired"></member><member name="M:Contracts.Contract.OnParameterStateChange(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.OnRead"></member><member name="M:Contracts.Contract.OnRegister"><para>Registers all event hooks when contract is spawned in correct scene and is active</para><remarks>-</remarks></member><member name="M:Contracts.Contract.OnReset"><para>Called to reset the contract on scene loads, vessel changes, etc, if required.</para><remarks>-</remarks></member><member name="M:Contracts.Contract.OnSave(ConfigNode)"></member><member name="M:Contracts.Contract.OnSeen"></member><member name="M:Contracts.Contract.OnUnregister"><para>Unregisters all event hooks when contract becomes inactive or scene changes</para><remarks>-</remarks></member><member name="M:Contracts.Contract.OnUpdate"><para>Called per frame - with current time - when contract is active</para><remarks>-</remarks></member><member name="M:Contracts.Contract.OnWithdrawn"></member><member name="M:Contracts.Contract.ParameterStateUpdate(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.PenalizeCancellation"></member><member name="M:Contracts.Contract.PenalizeFailure"></member><member name="M:Contracts.Contract.Register"><para>Registers all event hooks when contract is spawned in correct scene and is active</para><remarks>-</remarks></member><member name="M:Contracts.Contract.RemoveParameter(System.Int32)"></member><member name="M:Contracts.Contract.RemoveParameter(string)"></member><member name="M:Contracts.Contract.RemoveParameter(System.Type)"></member><member name="M:Contracts.Contract.RemoveParameter(Contracts.ContractParameter)"></member><member name="M:Contracts.Contract.Reset"></member><member name="M:Contracts.Contract.Save(ConfigNode)"></member><member name="M:Contracts.Contract.SendStateMessage(string,string,KSP.UI.Screens.MessageSystemButton+MessageButtonColor,KSP.UI.Screens.MessageSystemButton+ButtonIcons)"><para>Sends user a text message via messaging system</para><remarks>-</remarks></member><member name="M:Contracts.Contract.SetDeadlineDays(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetDeadlineYears(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetExpiry"></member><member name="M:Contracts.Contract.SetExpiry(System.Int32,System.Int32)"></member><member name="M:Contracts.Contract.SetExpiry(System.Single,System.Single)"></member><member name="M:Contracts.Contract.SetFunds(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetFunds(System.Single,System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetReputation(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetReputation(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetScience(System.Single,CelestialBody)"></member><member name="M:Contracts.Contract.SetState(Contracts.Contract+State)"><para>&amp;lt; SendStateMessage(&amp;quot;Contract Cancelled&amp;quot;, &lt;ref refid='class_contracts_1_1_contract_1a9674a819eb550b57d0c53db21b7f0bc4' kindref='member'&gt;MessageCancelled()&lt;/ref&gt; + StateMsgAddition(MessagePenalties()), MessageSystemButton.MessageButtonColor.GREEN, MessageSystemButton.ButtonIcons.MESSAGE);</para><remarks>-</remarks></member><member name="M:Contracts.Contract.SetViewed(Contracts.Contract+Viewed)"><para>Sets whether the player has either seen or read a contract in Mission Control.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;viewed&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The new viewed state - can only go up.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Contracts.Contract.ToString"></member><member name="M:Contracts.Contract.Unregister"><para>Unregisters all event hooks when contract becomes inactive or scene changes</para><remarks>-</remarks></member><member name="M:Contracts.Contract.Update"></member><member name="M:Contracts.Contract.WeightedBodyChoice(System.Collections.Generic.IList,System.Random)"></member><member name="M:Contracts.Contract.Withdraw"></member><member name="M:Contracts.Contract.CountBodies_Complete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.CountBodies_Reached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.Generate(System.Type,Contracts.Contract+ContractPrestige,System.Int32,Contracts.Contract+State)"><para>Generates a new random mission</para><para>&amp;lt; set up initial contract generation</para><para>&amp;lt; check to see if contract type requirements are met - if not, discard</para><para>&amp;lt; generate the contract - if contract somehow generates as invalid then discard</para><para>&amp;lt; grab a suitable agent</para><para>&amp;lt; if no suitable agent is found then discard</para><para>&amp;lt; create the contract&amp;apos;s unique id from it&amp;apos;s parameters</para><remarks>-</remarks></member><member name="M:Contracts.Contract.GetBodies(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.GetBodies(string,Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contracts.Contract+ProgressState,string,Contracts.Contract+ProgressState,System.Func)"></member><member name="M:Contracts.Contract.GetBodies(Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies(string,Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies(Contract.ProgressState,string,Contract.ProgressState,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies_Complete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.GetBodies_InComplete(System.Boolean,System.Boolean,string)"></member><member name="M:Contracts.Contract.GetBodies_NextUnreached(System.Int32,System.Func)"></member><member name="M:Contracts.Contract.GetBodies_NextUnreached(System.Int32,Func&lt;CelestialBody,bool&gt;)"></member><member name="M:Contracts.Contract.GetBodies_NotReached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.GetBodies_Reached(System.Boolean,System.Boolean)"></member><member name="M:Contracts.Contract.Load(Contracts.Contract,ConfigNode)"><para>&amp;lt; values</para><para>&amp;lt; parameters</para><remarks>-</remarks></member><member name="M:Contracts.Contract.#ctor"></member><member name="T:Contracts.ContractParameter"></member><member name="F:Contracts.ContractParameter.allowPartialFailure"></member><member name="F:Contracts.ContractParameter.disableOnStateChange"></member><member name="F:Contracts.ContractParameter.enabled"></member><member name="F:Contracts.ContractParameter.FundsCompletion"><para>The funds gained for completing this parameter</para><remarks>-</remarks></member><member name="F:Contracts.ContractParameter.FundsFailure"><para>The funds gained for failing this parameter</para><remarks>-</remarks></member><member name="F:Contracts.ContractParameter.id"></member><member name="F:Contracts.ContractParameter.OnStateChange"></member><member name="F:Contracts.ContractParameter.optional"></member><member name="F:Contracts.ContractParameter.ReputationCompletion"><para>The reputation gain for completing this parameter</para><remarks>-</remarks></member><member name="F:Contracts.ContractParameter.ReputationFailure"><para>The reputation gain for failing this parameter</para><remarks>-</remarks></member><member name="F:Contracts.ContractParameter.ScienceCompletion"><para>The science gained for completing this parameter</para><remarks>-</remarks></member><member name="F:Contracts.ContractParameter.state"></member><member name="P:Contracts.ContractParameter.AllowPartialFailure"><para>Whether a parameter failure also fails the contract.</para></member><member name="P:Contracts.ContractParameter.AllParameters"></member><member name="P:Contracts.ContractParameter.DisableOnStateChange"></member><member name="P:Contracts.ContractParameter.Enabled"></member><member name="P:Contracts.ContractParameter.HashString"></member><member name="P:Contracts.ContractParameter.ID"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.Item"></member><member name="P:Contracts.ContractParameter.MessageComplete"></member><member name="P:Contracts.ContractParameter.MessageFailed"></member><member name="P:Contracts.ContractParameter.MessageIncomplete"></member><member name="P:Contracts.ContractParameter.Notes"></member><member name="P:Contracts.ContractParameter.Optional"></member><member name="P:Contracts.ContractParameter.ParameterCount"></member><member name="P:Contracts.ContractParameter.Parent"></member><member name="P:Contracts.ContractParameter.Root"></member><member name="P:Contracts.ContractParameter.State"></member><member name="P:Contracts.ContractParameter.Title"></member><member name="M:Contracts.ContractParameter.AddParameter(Contracts.ContractParameter,string)"></member><member name="M:Contracts.ContractParameter.AllChildParametersComplete"></member><member name="M:Contracts.ContractParameter.AnyChildParametersFailed"></member><member name="M:Contracts.ContractParameter.AwardCompletion"></member><member name="M:Contracts.ContractParameter.CreateID"></member><member name="M:Contracts.ContractParameter.Disable(System.Boolean)"></member><member name="M:Contracts.ContractParameter.Disable"></member><member name="M:Contracts.ContractParameter.Enable"></member><member name="M:Contracts.ContractParameter.Equals(object)"></member><member name="M:Contracts.ContractParameter.Finalize"></member><member name="M:Contracts.ContractParameter.GetHashCode"></member><member name="M:Contracts.ContractParameter.GetHashString"></member><member name="M:Contracts.ContractParameter.GetMessageComplete"></member><member name="M:Contracts.ContractParameter.GetMessageFailed"></member><member name="M:Contracts.ContractParameter.GetMessageIncomplete"></member><member name="M:Contracts.ContractParameter.GetNotes"></member><member name="M:Contracts.ContractParameter.GetParameter(System.Int32)"></member><member name="M:Contracts.ContractParameter.GetParameter(string)"></member><member name="M:Contracts.ContractParameter.GetParameter(System.Type)"></member><member name="M:Contracts.ContractParameter.GetParameter(string)"></member><member name="M:Contracts.ContractParameter.GetTitle"></member><member name="M:Contracts.ContractParameter.GetType"></member><member name="M:Contracts.ContractParameter.Load(ConfigNode)"></member><member name="M:Contracts.ContractParameter.MemberwiseClone"></member><member name="M:Contracts.ContractParameter.NestToParent(Contracts.IContractParameterHost)"></member><member name="M:Contracts.ContractParameter.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractParameter.OnParameterStateChange(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.OnRegister"></member><member name="M:Contracts.ContractParameter.OnReset"></member><member name="M:Contracts.ContractParameter.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractParameter.OnUnregister"></member><member name="M:Contracts.ContractParameter.OnUpdate"></member><member name="M:Contracts.ContractParameter.ParameterStateUpdate(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.PenalizeFailure"></member><member name="M:Contracts.ContractParameter.Register"></member><member name="M:Contracts.ContractParameter.RemoveParameter(System.Int32)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(string)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(System.Type)"></member><member name="M:Contracts.ContractParameter.RemoveParameter(Contracts.ContractParameter)"></member><member name="M:Contracts.ContractParameter.Reset"></member><member name="M:Contracts.ContractParameter.Save(ConfigNode)"></member><member name="M:Contracts.ContractParameter.SendStateMessage(string,string,KSP.UI.Screens.MessageSystemButton+MessageButtonColor,KSP.UI.Screens.MessageSystemButton+ButtonIcons)"><para>Sends user a text message via messaging system</para><remarks>-</remarks></member><member name="M:Contracts.ContractParameter.SetComplete"></member><member name="M:Contracts.ContractParameter.SetFailed"></member><member name="M:Contracts.ContractParameter.SetFunds(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetFunds(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetIncomplete"></member><member name="M:Contracts.ContractParameter.SetReputation(System.Single,System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetReputation(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.SetScience(System.Single,CelestialBody)"></member><member name="M:Contracts.ContractParameter.ToString"></member><member name="M:Contracts.ContractParameter.Unregister"></member><member name="M:Contracts.ContractParameter.Update"></member><member name="M:Contracts.ContractParameter.#ctor"></member><member name="T:Contracts.ContractPredicate"></member><member name="P:Contracts.ContractPredicate.AllowMultiple"></member><member name="P:Contracts.ContractPredicate.Description"></member><member name="P:Contracts.ContractPredicate.Parent"></member><member name="P:Contracts.ContractPredicate.Root"></member><member name="M:Contracts.ContractPredicate.Equals(object)"></member><member name="M:Contracts.ContractPredicate.Finalize"></member><member name="M:Contracts.ContractPredicate.GetAllowMultiple"></member><member name="M:Contracts.ContractPredicate.GetDescription"></member><member name="M:Contracts.ContractPredicate.GetHashCode"></member><member name="M:Contracts.ContractPredicate.GetType"></member><member name="M:Contracts.ContractPredicate.Load(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.MemberwiseClone"></member><member name="M:Contracts.ContractPredicate.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.OnUpdate"></member><member name="M:Contracts.ContractPredicate.Save(ConfigNode)"></member><member name="M:Contracts.ContractPredicate.Test(Vessel)"></member><member name="M:Contracts.ContractPredicate.Test(ProtoVessel)"></member><member name="M:Contracts.ContractPredicate.ToString"></member><member name="M:Contracts.ContractPredicate.Update"></member><member name="M:Contracts.ContractPredicate.#ctor(Contracts.IContractParameterHost)"></member><member name="T:Contracts.ContractSystem"></member><member name="F:Contracts.ContractSystem.runner"></member><member name="F:Contracts.ContractSystem.snapshot"></member><member name="F:Contracts.ContractSystem.targetScenes"></member><member name="F:Contracts.ContractSystem.ContractTypes"></member><member name="F:Contracts.ContractSystem.ContractWeights"></member><member name="F:Contracts.ContractSystem.generateContractIterations"></member><member name="F:Contracts.ContractSystem.loaded"><para>Is set to true once the contract system has completed loading its contracts.</para></member><member name="F:Contracts.ContractSystem.MandatoryTypes"></member><member name="F:Contracts.ContractSystem.ParameterTypes"></member><member name="F:Contracts.ContractSystem.PredicateTypes"></member><member name="P:Contracts.ContractSystem.ClassID"></member><member name="P:Contracts.ContractSystem.ClassName"></member><member name="P:Contracts.ContractSystem.Contracts"></member><member name="P:Contracts.ContractSystem.ContractsFinished"></member><member name="P:Contracts.ContractSystem.enabled"></member><member name="P:Contracts.ContractSystem.Events"></member><member name="P:Contracts.ContractSystem.Fields"></member><member name="P:Contracts.ContractSystem.gameObject"></member><member name="P:Contracts.ContractSystem.hideFlags"></member><member name="P:Contracts.ContractSystem.isActiveAndEnabled"></member><member name="P:Contracts.ContractSystem.name"></member><member name="P:Contracts.ContractSystem.tag"></member><member name="P:Contracts.ContractSystem.transform"></member><member name="P:Contracts.ContractSystem.useGUILayout"></member><member name="P:Contracts.ContractSystem.Instance"></member><member name="M:Contracts.ContractSystem.AnyCompletedContracts(Func)"></member><member name="M:Contracts.ContractSystem.AnyCurrentActiveContracts(Func)"></member><member name="M:Contracts.ContractSystem.AnyCurrentContracts(Func)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,object)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string)"></member><member name="M:Contracts.ContractSystem.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.CancelInvoke"></member><member name="M:Contracts.ContractSystem.CancelInvoke(string)"></member><member name="M:Contracts.ContractSystem.ClearContractsCurrent"></member><member name="M:Contracts.ContractSystem.ClearContractsFinished"></member><member name="M:Contracts.ContractSystem.CompareTag(string)"></member><member name="M:Contracts.ContractSystem.CountContracts(Contracts.Contract+ContractPrestige)"></member><member name="M:Contracts.ContractSystem.Equals(object)"></member><member name="M:Contracts.ContractSystem.Finalize"></member><member name="M:Contracts.ContractSystem.GenerateContract(int&amp;,Contracts.Contract+ContractPrestige)"></member><member name="M:Contracts.ContractSystem.GenerateContract(System.Int32,Contracts.Contract+ContractPrestige,System.Type)"><para>&amp;lt; pick a random contract type</para><para>&amp;lt; generate a contract</para><remarks>-</remarks></member><member name="M:Contracts.ContractSystem.GenerateContracts(int&amp;,Contracts.Contract+ContractPrestige,System.Int32)"></member><member name="M:Contracts.ContractSystem.GenerateMandatoryContracts"></member><member name="M:Contracts.ContractSystem.GetActiveContractCount"></member><member name="M:Contracts.ContractSystem.GetCompletedContracts(Func)"></member><member name="M:Contracts.ContractSystem.GetCompletedContracts"></member><member name="M:Contracts.ContractSystem.GetComponent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponent"></member><member name="M:Contracts.ContractSystem.GetComponent(string)"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren"></member><member name="M:Contracts.ContractSystem.GetComponentInChildren(System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentInParent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentInParent"></member><member name="M:Contracts.ContractSystem.GetComponents(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Contracts.ContractSystem.GetComponents(List)"></member><member name="M:Contracts.ContractSystem.GetComponents"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren"></member><member name="M:Contracts.ContractSystem.GetComponentsInChildren(List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Type)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Boolean)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Contracts.ContractSystem.GetComponentsInParent"></member><member name="M:Contracts.ContractSystem.GetCurrentActiveContracts(Func)"></member><member name="M:Contracts.ContractSystem.GetCurrentActiveContracts"></member><member name="M:Contracts.ContractSystem.GetCurrentContracts(Func)"></member><member name="M:Contracts.ContractSystem.GetCurrentContracts"></member><member name="M:Contracts.ContractSystem.GetHashCode"></member><member name="M:Contracts.ContractSystem.GetInstanceID"></member><member name="M:Contracts.ContractSystem.GetType"></member><member name="M:Contracts.ContractSystem.HasCompletedContract(System.Type)"></member><member name="M:Contracts.ContractSystem.Invoke(string,System.Single)"></member><member name="M:Contracts.ContractSystem.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Contracts.ContractSystem.IsInvoking(string)"></member><member name="M:Contracts.ContractSystem.IsInvoking"></member><member name="M:Contracts.ContractSystem.Load(ConfigNode)"></member><member name="M:Contracts.ContractSystem.MemberwiseClone"></member><member name="M:Contracts.ContractSystem.OnAwake"></member><member name="M:Contracts.ContractSystem.OnLoad(ConfigNode)"></member><member name="M:Contracts.ContractSystem.OnSave(ConfigNode)"></member><member name="M:Contracts.ContractSystem.RebuildContracts"></member><member name="M:Contracts.ContractSystem.Save(ConfigNode)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,object)"></member><member name="M:Contracts.ContractSystem.SendMessage(string)"></member><member name="M:Contracts.ContractSystem.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,object)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string)"></member><member name="M:Contracts.ContractSystem.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(string,object)"></member><member name="M:Contracts.ContractSystem.StartCoroutine(string)"></member><member name="M:Contracts.ContractSystem.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StopAllCoroutines"></member><member name="M:Contracts.ContractSystem.StopCoroutine(string)"></member><member name="M:Contracts.ContractSystem.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Contracts.ContractSystem.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Contracts.ContractSystem.ToString"></member><member name="M:Contracts.ContractSystem.WithdrawSurplusContracts(Contracts.Contract+ContractPrestige,System.Int32)"></member><member name="M:Contracts.ContractSystem.AdjustWeight(string,Contracts.Contract)"></member><member name="M:Contracts.ContractSystem.GetContractCounts(System.Single,System.Int32,int&amp;,int&amp;,int&amp;)"></member><member name="M:Contracts.ContractSystem.GetContractCounts(System.Single,System.Int32,System.Int32,System.Int32,System.Int32)"></member><member name="M:Contracts.ContractSystem.GetContractType(string)"></member><member name="M:Contracts.ContractSystem.GetParameterType(string)"></member><member name="M:Contracts.ContractSystem.GetPredicateType(string)"></member><member name="M:Contracts.ContractSystem.ResetWeights"></member><member name="M:Contracts.ContractSystem.WeightAdjustment(string,System.Int32,System.Boolean)"></member><member name="M:Contracts.ContractSystem.WeightAssignment(string,System.Int32,System.Boolean)"></member><member name="M:Contracts.ContractSystem.WeightedBodyChoice(System.Collections.Generic.IList,System.Random)"></member><member name="M:Contracts.ContractSystem.WeightedContractChoice"></member><member name="M:Contracts.ContractSystem.#ctor"></member><member name="T:Contracts.TextGen"></member><member name="F:Contracts.TextGen.Agencies"></member><member name="M:Contracts.TextGen.Equals(object)"></member><member name="M:Contracts.TextGen.Finalize"></member><member name="M:Contracts.TextGen.GetHashCode"></member><member name="M:Contracts.TextGen.GetType"></member><member name="M:Contracts.TextGen.MemberwiseClone"></member><member name="M:Contracts.TextGen.ToString"></member><member name="M:Contracts.TextGen.GenerateBackStories(string,string,string,string,System.Int32,System.Boolean,System.Boolean,System.Boolean)"><para>Puts together a randomized short story that may even make sense in attempting to explain an agency&amp;apos;s reasoning for a mission contract.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;contractType&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;agency&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of the agency offering the contract</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;topic&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A string for a &amp;apos;topic&amp;apos; that will be directly substituted in facts and other fields that mention it. Singular noun please.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;subject&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A string containing the subject matter at hand (usually a destination like a Celestial Body, &lt;ref refid='class_orbit' kindref='compound'&gt;Orbit&lt;/ref&gt;, Srf, see StoryDefs.cfg for examples)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;seed&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A seed number, for retrieving the exact same string again when needed (mind the string parameters must also be the same)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;allowGenericIntroduction&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;allowGenericProblem&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;allowGenericConclusion&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;A string telling the story, no guarantees on it making much sense.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Contracts.TextGen.GenerateBackStories(string,string,string,string,string,System.Int32)"></member><member name="M:Contracts.TextGen.GetMergedConfigNodes(string)"></member><member name="M:Contracts.TextGen.Setup"></member><member name="T:ControlTypes"><summary>The different controls that it is possible to lock the player out of using InputLockManager. You can OR them together to lock the player out of multiple controls at once.   TaranisElsu compiled this list of the binary values of the enum members as of KSP 0.24.2, which makes it clearer which controls are locked in each case:</summary><code>None                                                                                          0 PITCH                                                                                         1 ROLL                                                                                        100 YAW                                                                                        1000 THROTTLE                                                                                  10000 SAS                                                                                      100000 PAUSE                                                                                   1000000 STAGING                                                                                10000000 CAMERAMODES                                                                          1 00000000 MISC                                                                                10 00000000 CAMERACONTROLS                                                                     100 00000000 TIMEWARP                                                                          1000 00000000 MAP                                                                              10000 00000000 LINEAR                                                                          100000 00000000 QUICKSAVE                                                                      1000000 00000000 QUICKLOAD                                                                     10000000 00000000 VESSEL_SWITCHING                                                            1 00000000 00000000 CUSTOM_ACTION_GROUPS                                                       10 00000000 00000000 GROUP_ABORT                                                               100 00000000 00000000 GROUP_GEARS                                                              1000 00000000 00000000 GROUP_LIGHTS                                                            10000 00000000 00000000 GROUP_BRAKES                                                           100000 00000000 00000000 GROUP_STAGE                                                           1000000 00000000 00000000 GROUPS_ALL                                                            1111110 00000000 00000000 ACTIONS_SHIP                                                         10000000 00000000 00000000 ACTIONS_EXTERNAL                                                   1 00000000 00000000 00000000 ACTIONS_ALL                                                        1 10000000 00000000 00000000 RCS                                                               10 00000000 00000000 00000000 WHEEL_STEER                                                      100 00000000 00000000 00000000 WHEEL_THROTTLE                                                  1000 00000000 00000000 00000000 EVA_INPUT                                                      10000 00000000 00000000 00000000 EDITOR_ICON_HOVER                                             100000 00000000 00000000 00000000 EDITOR_ICON_PICK                                             1000000 00000000 00000000 00000000 EDITOR_TAB_SWITCH                                           10000000 00000000 00000000 00000000 EDITOR_SAVE                                               1 00000000 00000000 00000000 00000000 EDITOR_LOAD                                              10 00000000 00000000 00000000 00000000 EDITOR_EXIT                                             100 00000000 00000000 00000000 00000000 EDITOR_NEW                                             1000 00000000 00000000 00000000 00000000 EDITOR_LAUNCH                                         10000 00000000 00000000 00000000 00000000 EDITOR_UI_TOPRIGHT                                    11111 00000000 00000000 00000000 00000000 EDITOR_PAD_PICK_PLACE                                100000 00000000 00000000 00000000 00000000 EDITOR_PAD_PICK_COPY                                1000000 00000000 00000000 00000000 00000000 EDITOR_EDIT_STAGES                                 10000000 00000000 00000000 00000000 00000000 EDITOR_EDIT_NAME_FIELDS                          1 00000000 00000000 00000000 00000000 00000000 EDITOR_ROTATE_PARTS                             10 00000000 00000000 00000000 00000000 00000000 EDITOR_UNDO_REDO                               100 00000000 00000000 00000000 00000000 00000000 EDITOR_SYM_SNAP                               1000 00000000 00000000 00000000 00000000 00000000 EDITOR_OVERLAYS                              10000 00000000 00000000 00000000 00000000 00000000 EDITOR_MODE_SWITCH                          100000 00000000 00000000 00000000 00000000 00000000 EDITOR_UI_TOPBAR                            100001 00011111 00000000 00000000 00000000 00000000 EDITOR_UI                                   101101 10011111 00000000 00000000 00000000 00000000 EDITOR_SOFT_LOCK                            111110 01100000 11100000 00000000 00000000 00000000 EDITOR_LOCK                                 111110 01100000 11100000 00000000 00000100 00000000 TRACKINGSTATION_UI                         1000000 00000000 00000000 00000000 00000000 00000000 TRACKINGSTATION_ALL                        1000000 00000000 00000000 00000000 00001100 00000000 KSC_FACILITIES                            10000000 00000000 00000000 00000000 00000000 00000000 KSC_UI                                  1 00000000 00000000 00000000 00000000 00000000 00000000 KSC_ALL                                 1 10000000 00000000 00000000 00000000 00001100 00000000 APPLAUNCHER_BUTTONS                    10 00000000 00000000 00000000 00000000 00000000 00000000 ALL_SHIP_CONTROLS       11111111 11111111 11111111 11111111 11111111 11111110 00100010 10111111 All                     11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111</code></member><member name="T:CrewHatchController"></member><member name="F:CrewHatchController.anchorOffset"></member><member name="F:CrewHatchController.overrideTransfer"></member><member name="F:CrewHatchController.fetch"></member><member name="P:CrewHatchController.Active"></member><member name="P:CrewHatchController.CrewDialog"></member><member name="P:CrewHatchController.enabled"></member><member name="P:CrewHatchController.gameObject"></member><member name="P:CrewHatchController.hideFlags"></member><member name="P:CrewHatchController.isActiveAndEnabled"></member><member name="P:CrewHatchController.name"></member><member name="P:CrewHatchController.tag"></member><member name="P:CrewHatchController.transform"></member><member name="P:CrewHatchController.useGUILayout"></member><member name="M:CrewHatchController.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.BroadcastMessage(string,object)"></member><member name="M:CrewHatchController.BroadcastMessage(string)"></member><member name="M:CrewHatchController.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.CancelInvoke"></member><member name="M:CrewHatchController.CancelInvoke(string)"></member><member name="M:CrewHatchController.CompareTag(string)"></member><member name="M:CrewHatchController.DespawnUIs"></member><member name="M:CrewHatchController.DisableInterface"><summary>Will turn off the Hatch GUI window - so it will no longer be available on any part.</summary></member><member name="M:CrewHatchController.DismissDialog"></member><member name="M:CrewHatchController.EnableInterface"><summary>Will turn on the Hatch GUI window - so it will now be available on any part.</summary></member><member name="M:CrewHatchController.Equals(object)"></member><member name="M:CrewHatchController.Finalize"></member><member name="M:CrewHatchController.GetComponent(System.Type)"></member><member name="M:CrewHatchController.GetComponent"></member><member name="M:CrewHatchController.GetComponent(string)"></member><member name="M:CrewHatchController.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:CrewHatchController.GetComponentInChildren(System.Type)"></member><member name="M:CrewHatchController.GetComponentInChildren"></member><member name="M:CrewHatchController.GetComponentInChildren(System.Boolean)"></member><member name="M:CrewHatchController.GetComponentInParent(System.Type)"></member><member name="M:CrewHatchController.GetComponentInParent"></member><member name="M:CrewHatchController.GetComponents(System.Type)"></member><member name="M:CrewHatchController.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:CrewHatchController.GetComponents(List)"></member><member name="M:CrewHatchController.GetComponents"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Type)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:CrewHatchController.GetComponentsInChildren"></member><member name="M:CrewHatchController.GetComponentsInChildren(List)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Type)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Boolean)"></member><member name="M:CrewHatchController.GetComponentsInParent(System.Boolean,List)"></member><member name="M:CrewHatchController.GetComponentsInParent"></member><member name="M:CrewHatchController.GetHashCode"></member><member name="M:CrewHatchController.GetInstanceID"></member><member name="M:CrewHatchController.GetMouseUiPos"></member><member name="M:CrewHatchController.GetType"></member><member name="M:CrewHatchController.HideTooltip"></member><member name="M:CrewHatchController.Invoke(string,System.Single)"></member><member name="M:CrewHatchController.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:CrewHatchController.IsInvoking(string)"></member><member name="M:CrewHatchController.IsInvoking"></member><member name="M:CrewHatchController.MemberwiseClone"></member><member name="M:CrewHatchController.OnCrewDialogDismiss"></member><member name="M:CrewHatchController.OnCrewTransferDone(PartItemTransfer+DismissAction,Part)"></member><member name="M:CrewHatchController.OnEVABtn(ProtoCrewMember)"><para>&amp;lt; reassigning to the same bool here because the EVAIsPossible method requires it as a parameter. This is effectively the same as an || for both clauses above</para></member><member name="M:CrewHatchController.OnTransferBtn(ProtoCrewMember)"></member><member name="M:CrewHatchController.OnVesselSwitch(Vessel)"></member><member name="M:CrewHatchController.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessage(string,object)"></member><member name="M:CrewHatchController.SendMessage(string)"></member><member name="M:CrewHatchController.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,object)"></member><member name="M:CrewHatchController.SendMessageUpwards(string)"></member><member name="M:CrewHatchController.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:CrewHatchController.ShowTooltip"></member><member name="M:CrewHatchController.SpawnCrewDialog(Part,System.Boolean,System.Boolean)"><summary>Spawns the Hatch dialog GUI window for part. If showEVA is true will show EVA buttons, if showTransfer is true will show Transfer buttons.
It is called by left clicking the hatch on a part. Unfortunately it appears there is no way to intercept and change the value of the two bools if you wanted to.</summary></member><member name="M:CrewHatchController.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StartCoroutine(string,object)"></member><member name="M:CrewHatchController.StartCoroutine(string)"></member><member name="M:CrewHatchController.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StopAllCoroutines"></member><member name="M:CrewHatchController.StopCoroutine(string)"></member><member name="M:CrewHatchController.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:CrewHatchController.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:CrewHatchController.TooltipUpdate(Part)"></member><member name="M:CrewHatchController.ToString"></member><member name="M:CrewHatchController.#ctor"></member><member name="T:CurrencyModifierQuery"></member><member name="F:CurrencyModifierQuery.reason"></member><member name="M:CurrencyModifierQuery.AddDelta(Currency,System.Single)"></member><member name="M:CurrencyModifierQuery.CanAfford(System.Action)"></member><member name="M:CurrencyModifierQuery.CanAfford(Currency)"></member><member name="M:CurrencyModifierQuery.Equals(object)"></member><member name="M:CurrencyModifierQuery.Finalize"></member><member name="M:CurrencyModifierQuery.GetCostLine(System.Boolean,System.Boolean,System.Boolean,System.Boolean,string)"></member><member name="M:CurrencyModifierQuery.GetEffectDelta(Currency)"></member><member name="M:CurrencyModifierQuery.GetEffectDeltaText(Currency,string,CurrencyModifierQuery+TextStyling)"></member><member name="M:CurrencyModifierQuery.GetEffectPercentageText(Currency,string,CurrencyModifierQuery+TextStyling)"></member><member name="M:CurrencyModifierQuery.GetHashCode"></member><member name="M:CurrencyModifierQuery.GetInput(Currency)"></member><member name="M:CurrencyModifierQuery.GetTotal(Currency)"></member><member name="M:CurrencyModifierQuery.GetType"></member><member name="M:CurrencyModifierQuery.MemberwiseClone"></member><member name="M:CurrencyModifierQuery.ToString"></member><member name="M:CurrencyModifierQuery.RunQuery(TransactionReasons,System.Single,System.Single,System.Single)"></member><member name="M:CurrencyModifierQuery.#ctor(TransactionReasons,System.Single,System.Single,System.Single)"></member><member name="T:DiscoverableObjectsUtil"><summary>Static methods used by asteroids</summary></member><member name="M:DiscoverableObjectsUtil.Equals(object)"></member><member name="M:DiscoverableObjectsUtil.Finalize"></member><member name="M:DiscoverableObjectsUtil.GetHashCode"></member><member name="M:DiscoverableObjectsUtil.GetType"></member><member name="M:DiscoverableObjectsUtil.MemberwiseClone"></member><member name="M:DiscoverableObjectsUtil.ToString"></member><member name="M:DiscoverableObjectsUtil.GenerateAsteroidName"><summary>Generates an suitably science-y asteroid name</summary><returns>A random string of the form "Ast. XXX-###".</returns></member><member name="M:DiscoverableObjectsUtil.SpawnAsteroid(string,Orbit,System.UInt32,UntrackedObjectClass,System.Double,System.Double)"></member><member name="T:DiscoveryInfo"><summary>Represents the "remote sensing" information available for an IDiscoverable</summary><invariant>this.fadeUT = this.lastObservedTime + this.unobservedLifetime</invariant></member><member name="F:DiscoveryInfo.displayName"></member><member name="F:DiscoveryInfo.distance"><summary>Tracking station wrapper for IDiscoverable.RevealAltitude()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.mass"><summary>Tracking station wrapper for IDiscoverable.RevealMass()  Requires DiscoveryLevels.Appearance</summary></member><member name="F:DiscoveryInfo.name"><summary>Tracking station wrapper for IDiscoverable.RevealName()  Requires DiscoveryLevels.Name</summary></member><member name="F:DiscoveryInfo.signalStrengthLevel"><summary>Tracking station wrapper for GetSignalStrengthCaption()  Always visible</summary></member><member name="F:DiscoveryInfo.signalStrengthPercent"><summary>Tracking station wrapper for GetSignalStrength()  Rounded to the nearest 0.1%. Always visible</summary></member><member name="F:DiscoveryInfo.situation"><summary>Tracking station wrapper for IDiscoverable.RevealSituationString()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.size"><summary>Tracking station wrapper for this.objectSize  Always visible</summary></member><member name="F:DiscoveryInfo.speed"><summary>Tracking station wrapper for IDiscoverable.RevealSpeed()  Requires DiscoveryLevels.StateVectors</summary></member><member name="F:DiscoveryInfo.trackingStatus"><summary>Tracking station wrapper for Level?  Always visible</summary></member><member name="F:DiscoveryInfo.type"><summary>Tracking station wrapper for IDiscoverable.RevealType()  Requires DiscoveryLevels.Appearance</summary></member><member name="P:DiscoveryInfo.fadeUT"><para>Time at which the object will disappear unless observed again.</para><remarks>- The time at which the asteroid is scheduled to be deleted</remarks></member><member name="P:DiscoveryInfo.lastObservedTime"><para>When was the object last observed.</para><remarks>- The time at which the asteroid was last tracked Stored in persistence file</remarks></member><member name="P:DiscoveryInfo.Level"><para>The level of knowledge available about this object</para><remarks>- The asteroid's tracking state Stored in persistence file as state</remarks></member><member name="P:DiscoveryInfo.objectSize"><para>The tracking signature size of the object</para><remarks>- The size class (A-E) of the asteroid Stored in persistence file as size</remarks></member><member name="P:DiscoveryInfo.referenceLifetime"><para>The maximum lifetime for any untracked discoverable. Used to gauge signal strength.</para><remarks>- The time for which an asteroid can go untracked if it starts at full signal strength Alternate definition: the time needed for the signal strength to fall by 1 unit. Always equals 86400 × ScenarioDiscoverableObjects.maxUntrackedLifetime. For the default spawn settings, this is 1728000 seconds, or 20 Earth days.  Stored in persistence file as refTime</remarks></member><member name="P:DiscoveryInfo.unobservedLifetime"><para>The time the object can remain unobserved and still be detected again (infinite unless specified)</para><remarks>- The time for which the asteroid can go untracked before it is deleted  Stored in persistence file as lifetime</remarks></member><member name="M:DiscoveryInfo.Equals(object)"></member><member name="M:DiscoveryInfo.Finalize"></member><member name="M:DiscoveryInfo.GetHashCode"></member><member name="M:DiscoveryInfo.GetSignalLife(System.Double)"><para>Returns a 1-0 value representing how close the object is to being lost</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;UT&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Returns the fraction of the asteroid's unobservedLifetime that remains</remarks><param name="UT">The time at which the signal life is measured</param><remarks>GetSignalLife(t_discover) == 1.0 GetSignalLife(fadeUT) == 0.0</remarks></member><member name="M:DiscoveryInfo.GetSignalStrength(System.Double)"><para>Returns a 1-0 value representing how long this object will stick around, compared to others spawned in similar circumstances.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;UT&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Returns amount of time remaining until the asteroid is lost, in units of referenceLifetime</remarks><param name="UT">The time at which the signal strength is measured</param><remarks>GetSignalStrength(t_discover) == unobservedLifetime / referenceLifetime GetSignalStrength(fadeUT) == 0.0</remarks></member><member name="M:DiscoveryInfo.GetType"></member><member name="M:DiscoveryInfo.HaveKnowledgeAbout(DiscoveryLevels)"><summary>Function testing if an asteroid has a particular discovery level</summary><param name="lvl">The flag(s) whose presence must be tested.</param><returns>True if at least one of the flags in<paramref name="lvl"/>is in 	this object, false otherwise</returns></member><member name="M:DiscoveryInfo.Load(ConfigNode)"></member><member name="M:DiscoveryInfo.MemberwiseClone"></member><member name="M:DiscoveryInfo.Save(ConfigNode)"></member><member name="M:DiscoveryInfo.SetLastObservedTime(System.Double)"><summary>Logs an asteroid observation</summary><param name="UT">The new time of last observation</param></member><member name="M:DiscoveryInfo.SetLevel(DiscoveryLevels)"><summary>Sets the level of knowledge the player has for the asteroid</summary><param name="level">The flags representing the asteroid's exploration state</param></member><member name="M:DiscoveryInfo.SetReferenceLifetime(System.Double)"><summary>Updates the reference lifetime</summary><param name="time">Changes the scaling of signal strength.</param></member><member name="M:DiscoveryInfo.SetUnobservedLifetime(System.Double)"><summary>Updates the time for which the asteroid can go untracked, preserving class invariants</summary><param name="time">The maximum time to track the asteroid</param></member><member name="M:DiscoveryInfo.SetUntrackedObjectSize(UntrackedObjectClass)"><summary>Updates the asteroid size</summary><param name="size">The asteroid class (A-E)</param></member><member name="M:DiscoveryInfo.ToString"></member><member name="M:DiscoveryInfo.GetSignalStrengthCaption(System.Double)"><summary>Returns a text description of the signal strength</summary><returns>If<paramref name="signal"/>is in [0.0, 0.2), returns "Very Weak"</returns><returns>If<paramref name="signal"/>is in [0.2, 0.4), returns "Weak"</returns><returns>If<paramref name="signal"/>is in [0.4, 0.6), returns "Average"</returns><returns>If<paramref name="signal"/>is in [0.6, 0.8), returns "Good"</returns><returns>If<paramref name="signal"/>is in [0.8, 1.0], returns "Strong"</returns></member><member name="M:DiscoveryInfo.GetSizeClassDescription(UntrackedObjectClass)"><summary>Returns long description of asteroid type</summary><param name="sizeClass">The asteroid type to label</param><returns>The asteroid class explanation printed on the tracking station's info panel.<example>"Class C Objects are about average-sized..."</example>If not a valid value of UntrackedObjectClass, returns "This seems to be a non-standard size class. Who knows what it'll look like?"</returns></member><member name="M:DiscoveryInfo.GetSizeClassSizes(UntrackedObjectClass)"><summary>Returns asteroid size displayed in map view</summary><param name="sizeClass">The asteroid type to label</param><returns>The asteroid class printed beneath an untracked asteroid.<example>"C (Medium)"</example>If not a valid value of UntrackedObjectClass, returns "???"</returns></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable)"><summary>Initializes a Class C asteroid, and assumes all properties are already known.</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable,System.Double)"><summary>Initializes a Class C asteroid, and assumes all properties are already known.</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param><param name="untrackedLifetime">The amount of time the asteroid can remain untracked  	before disappearing</param></member><member name="M:DiscoveryInfo.#ctor(IDiscoverable,DiscoveryLevels,System.Double)"><summary>Initializes a Class C asteroid</summary><param name="host">The vessel or celestial body to which this DiscoveryInfo applies</param><param name="level">The amount of knowledge for the asteroid</param><param name="untrackedLifetime">The amount of time the asteroid can remain untracked  	before disappearing</param></member><member name="T:DiscoveryLevels"><summary>Describes an IDiscoverable object's state regarding tracking and exploration.</summary></member><member name="T:EditorLogic"><summary>This class has information about what is going on in the editor. In particular see SortedShipList.</summary></member><member name="F:EditorLogic.actionPanelBtn"></member><member name="F:EditorLogic.allowNodeAttachment"></member><member name="F:EditorLogic.allowSrfAttachment"></member><member name="F:EditorLogic.angleSnapButton"></member><member name="F:EditorLogic.angleSnapSprite"></member><member name="F:EditorLogic.attachClip"></member><member name="F:EditorLogic.attachNodePrefab"></member><member name="F:EditorLogic.cannotPlaceClip"></member><member name="F:EditorLogic.coordSpaceBtn"></member><member name="F:EditorLogic.coordSpaceText"></member><member name="F:EditorLogic.crewPanelBtn"></member><member name="F:EditorLogic.debugFlight"></member><member name="F:EditorLogic.deletePartClip"></member><member name="F:EditorLogic.disallowSave"></member><member name="F:EditorLogic.dragPlaneCenter"></member><member name="F:EditorLogic.dragSharpness"></member><member name="F:EditorLogic.editorCamera"></member><member name="F:EditorLogic.editorScreen"></member><member name="F:EditorLogic.editorType"></member><member name="F:EditorLogic.exitBtn"></member><member name="F:EditorLogic.flagBrowserButton"></member><member name="F:EditorLogic.initialPodPosition"></member><member name="F:EditorLogic.initialPodRotation"></member><member name="F:EditorLogic.launchBtn"></member><member name="F:EditorLogic.launchSiteName"></member><member name="F:EditorLogic.loadBtn"></member><member name="F:EditorLogic.maxHeight"></member><member name="F:EditorLogic.mirrorSprite"></member><member name="F:EditorLogic.modalAreas"></member><member name="F:EditorLogic.mouseGrab"></member><member name="F:EditorLogic.newBtn"></member><member name="F:EditorLogic.partGrabClip"></member><member name="F:EditorLogic.partPanelBtn"></member><member name="F:EditorLogic.partReleaseClip"></member><member name="F:EditorLogic.partRotation"></member><member name="F:EditorLogic.radialSymmetryBtn"></member><member name="F:EditorLogic.radialSymmetryText"></member><member name="F:EditorLogic.reRootClip"></member><member name="F:EditorLogic.saveBtn"></member><member name="F:EditorLogic.sceneToLoad"></member><member name="F:EditorLogic.selPartGrabOffset"></member><member name="F:EditorLogic.ship"><summary>EditorLogic.fetch.ship.parts is a list of the parts in the ship currently under construction, ordered by the order in which they were added to the ship.</summary></member><member name="F:EditorLogic.shipBrowserSkin"></member><member name="F:EditorLogic.shipDescriptionField"></member><member name="F:EditorLogic.shipFileImage"></member><member name="F:EditorLogic.shipNameField"></member><member name="F:EditorLogic.srfAttachAngleSnap"></member><member name="F:EditorLogic.srfAttachAngleSnapFine"></member><member name="F:EditorLogic.srfAttachCursorOffset"></member><member name="F:EditorLogic.startPodId"></member><member name="F:EditorLogic.state"></member><member name="F:EditorLogic.symmetryButton"></member><member name="F:EditorLogic.symmetryMethod"></member><member name="F:EditorLogic.symmetryMode"></member><member name="F:EditorLogic.symmetryModeTmp"></member><member name="F:EditorLogic.symmetrySprite"></member><member name="F:EditorLogic.toolsUI"></member><member name="F:EditorLogic.tweakGrabClip"></member><member name="F:EditorLogic.tweakReleaseClip"></member><member name="F:EditorLogic.vesselRotation"></member><member name="F:EditorLogic.autoShipName"></member><member name="F:EditorLogic.editorLocked"></member><member name="F:EditorLogic.fetch"></member><member name="F:EditorLogic.FlagURL"></member><member name="F:EditorLogic.Mode"></member><member name="F:EditorLogic.softLock"></member><member name="F:EditorLogic.startPod"></member><member name="P:EditorLogic.currentStateName"></member><member name="P:EditorLogic.editorBounds"></member><member name="P:EditorLogic.EditorConstructionMode"></member><member name="P:EditorLogic.enabled"></member><member name="P:EditorLogic.FSMStarted"></member><member name="P:EditorLogic.gameObject"></member><member name="P:EditorLogic.hideFlags"></member><member name="P:EditorLogic.initialPodPosition"></member><member name="P:EditorLogic.isActiveAndEnabled"></member><member name="P:EditorLogic.lastEventName"></member><member name="P:EditorLogic.mouseOverGUI"></member><member name="P:EditorLogic.name"></member><member name="P:EditorLogic.PartSelected"></member><member name="P:EditorLogic.State"></member><member name="P:EditorLogic.tag"></member><member name="P:EditorLogic.transform"></member><member name="P:EditorLogic.useGUILayout"></member><member name="P:EditorLogic.LayerMask"></member><member name="P:EditorLogic.PartRotation"></member><member name="P:EditorLogic.RootPart"></member><member name="P:EditorLogic.SelectedPart"></member><member name="P:EditorLogic.ShipFileImage"></member><member name="P:EditorLogic.SortedShipList"><para>A depth-first ordered list of ship parts (matches the SFS ordering)</para><remarks>- A list of all parts in the vessel that is being edited.</remarks></member><member name="P:EditorLogic.VesselRotation"></member><member name="M:EditorLogic.AreAllPartsConnected"></member><member name="M:EditorLogic.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.BroadcastMessage(string,object)"></member><member name="M:EditorLogic.BroadcastMessage(string)"></member><member name="M:EditorLogic.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.CancelInvoke"></member><member name="M:EditorLogic.CancelInvoke(string)"></member><member name="M:EditorLogic.CompareTag(string)"></member><member name="M:EditorLogic.CountAllSceneParts(System.Boolean)"></member><member name="M:EditorLogic.DestroySelectedPart"></member><member name="M:EditorLogic.editText"></member><member name="M:EditorLogic.Equals(object)"></member><member name="M:EditorLogic.Finalize"></member><member name="M:EditorLogic.GetComponent(System.Type)"></member><member name="M:EditorLogic.GetComponent"></member><member name="M:EditorLogic.GetComponent(string)"></member><member name="M:EditorLogic.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:EditorLogic.GetComponentInChildren(System.Type)"></member><member name="M:EditorLogic.GetComponentInChildren"></member><member name="M:EditorLogic.GetComponentInChildren(System.Boolean)"></member><member name="M:EditorLogic.GetComponentInParent(System.Type)"></member><member name="M:EditorLogic.GetComponentInParent"></member><member name="M:EditorLogic.GetComponents(System.Type)"></member><member name="M:EditorLogic.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:EditorLogic.GetComponents(List)"></member><member name="M:EditorLogic.GetComponents"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Type)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:EditorLogic.GetComponentsInChildren"></member><member name="M:EditorLogic.GetComponentsInChildren(List)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Type)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Boolean)"></member><member name="M:EditorLogic.GetComponentsInParent(System.Boolean,List)"></member><member name="M:EditorLogic.GetComponentsInParent"></member><member name="M:EditorLogic.GetHashCode"></member><member name="M:EditorLogic.GetInstanceID"></member><member name="M:EditorLogic.getSortedShipList"></member><member name="M:EditorLogic.GetType"></member><member name="M:EditorLogic.Invoke(string,System.Single)"></member><member name="M:EditorLogic.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:EditorLogic.IsInvoking(string)"></member><member name="M:EditorLogic.IsInvoking"></member><member name="M:EditorLogic.launchVessel"><para>&amp;lt; clear out any on-screen messages</para></member><member name="M:EditorLogic.Lock(System.Boolean,System.Boolean,System.Boolean,string)"></member><member name="M:EditorLogic.Lock(System.Boolean,System.Boolean,System.Boolean)"></member><member name="M:EditorLogic.MemberwiseClone"></member><member name="M:EditorLogic.NameOrDescriptionFocused"></member><member name="M:EditorLogic.OnPartListBackgroundTap"></member><member name="M:EditorLogic.OnPartListIconTap(AvailablePart)"></member><member name="M:EditorLogic.OnPartListIconTap(ShipTemplate)"></member><member name="M:EditorLogic.OnPodSelect(AvailablePart)"></member><member name="M:EditorLogic.OnPodSpawn(AvailablePart)"><para>&amp;lt; Added for Unity 4 support CJ 1-16-2012</para></member><member name="M:EditorLogic.OnSubassemblyDialogDismiss(Part)"></member><member name="M:EditorLogic.ResetBackup"><para>Replaces the last undo state</para></member><member name="M:EditorLogic.SelectPanelActions"></member><member name="M:EditorLogic.SelectPanelCrew"></member><member name="M:EditorLogic.SelectPanelParts"></member><member name="M:EditorLogic.SelectPanelParts(System.Boolean)"></member><member name="M:EditorLogic.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessage(string,object)"></member><member name="M:EditorLogic.SendMessage(string)"></member><member name="M:EditorLogic.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SendMessageUpwards(string,object)"></member><member name="M:EditorLogic.SendMessageUpwards(string)"></member><member name="M:EditorLogic.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:EditorLogic.SetBackup"><para>Creates a new undo state</para><remarks>-</remarks></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,List&lt;Part&gt;)"></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,Part)"></member><member name="M:EditorLogic.SetHighlightRecursive(System.Boolean,ShipConstruct)"></member><member name="M:EditorLogic.snapButton(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:EditorLogic.snapButton"></member><member name="M:EditorLogic.SpawnConstruct(ShipConstruct)"></member><member name="M:EditorLogic.SpawnPart(AvailablePart)"><para>&amp;lt; Added for Unity 4 support CJ 1-16-2012</para><para>&amp;lt; Don&amp;apos;t think it&amp;apos;s necessary - RelinkPrefab(selectedPart, partInfo);</para><remarks>-</remarks></member><member name="M:EditorLogic.SpawnTemplate(ShipTemplate)"></member><member name="M:EditorLogic.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StartCoroutine(string,object)"></member><member name="M:EditorLogic.StartCoroutine(string)"></member><member name="M:EditorLogic.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StopAllCoroutines"></member><member name="M:EditorLogic.StopCoroutine(string)"></member><member name="M:EditorLogic.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:EditorLogic.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:EditorLogic.symButton(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:EditorLogic.symButton"></member><member name="M:EditorLogic.ToString"></member><member name="M:EditorLogic.UndoRedo"></member><member name="M:EditorLogic.UndoRedoInputUpdate"></member><member name="M:EditorLogic.Unlock(string)"></member><member name="M:EditorLogic.Unlock"></member><member name="M:EditorLogic.UpdateUI"></member><member name="M:EditorLogic.DeletePart(Part)"></member><member name="M:EditorLogic.FindPartsInChildren(Part)"><para>Finds all parts in the child hierarchy of the given part, part included</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;part&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:EditorLogic.FindPartsInChildren(System.Collections.Generic.List`1[[Part, Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]&amp;,Part)"></member><member name="M:EditorLogic.FirstNonSymmetricalParentFrom(Part)"></member><member name="M:EditorLogic.GetComponentUpwards(GameObject)"></member><member name="M:EditorLogic.GetComponentUpwards(string,GameObject)"></member><member name="M:EditorLogic.LoadShipFromFile(string)"></member><member name="M:EditorLogic.SetLayerRecursive(GameObject,System.Int32,System.Int32)"></member><member name="M:EditorLogic.SetSoftLock(System.Boolean)"></member><member name="M:EditorLogic.#ctor"></member><member name="T:EventData"><summary>A type used to generate GameEvents  Use this type with one accompanying type; GameEvents.FromToAction, GameEvents.HostedFromToAction, GameEvents.HostTargetAction are commonly used  See EventVoid for events that require no parameters or EventReport for a different style</summary><typeparam name="T">The type to be passed through on EventData.Fire()</typeparam></member><member name="F:EventData.debugEvent"><summary>Generate debug logs if true</summary></member><member name="F:EventData.eventName"></member><member name="P:EventData.EventName"></member><member name="M:EventData.Add(OnEvent)"><summary>Add a method to be run when the EventData is fired.  This is generally done in an object's Start or Awake method, or a class' constructor.  Can be setup like:  GameEvents.someEventDataEvent.Add(yourMethod);  or  GameEvents.someEventDataEvent.Add(new EventVoid.OnEvent(yourMethod));</summary><param name="evt">The method you want to add; must contain a single parameter of the type matching that in the host EventData</param></member><member name="M:EventData.Equals(object)"></member><member name="M:EventData.Finalize"></member><member name="M:EventData.Fire(T)"><summary>Triggers the EventData  All of the methods added using Add are run after this.</summary><param name="data">Single parameter matching the type of the host EventData Use this to give information relevant to the event</param></member><member name="M:EventData.GetHashCode"></member><member name="M:EventData.GetType"></member><member name="M:EventData.MemberwiseClone"></member><member name="M:EventData.OnEvent(T)"><summary>Any methods added to the event must match the delegate's parameters; one parameter of the given type in this case.</summary><param name="data"/></member><member name="M:EventData.Remove(OnEvent)"><summary>Remove a method from the list of methods to be run when the EventData is fired.  This is generally done in an object's OnDestroy method.</summary><param name="evt">The method you want to remove; must contain a single parameter of a type matching that in the host EventData</param></member><member name="M:EventData.ToString"></member><member name="M:EventData.AddEventScene(string,EventData&lt;T&gt;.OnEvent,System.Boolean)"></member><member name="M:EventData.AddEventUpwards(Transform,string,EventData&lt;T&gt;.OnEvent,System.Boolean)"></member><member name="M:EventData.FindEventScene(string)"></member><member name="M:EventData.FindEventsScene(string)"></member><member name="M:EventData.FindEventsUpwards(Transform,string)"></member><member name="M:EventData.FindEventUpwards(Transform,string)"></member><member name="M:EventData.RemoveEventScene(string,EventData&lt;T&gt;.OnEvent,System.Boolean)"></member><member name="M:EventData.RemoveEventUpwards(Transform,string,EventData&lt;T&gt;.OnEvent,System.Boolean)"></member><member name="M:EventData.#ctor(string)"><summary>The constructor used to create a new EventData  EventData&amp;lt;Vessel&amp;gt; myNewEvent = new EventData&amp;lt;Vessel&amp;gt;("myNewEvent");</summary><param name="eventName">Give the event a string name, generally the same as the declared name</param></member><member name="T:EventReport"><summary>A type frequently used as a parameter in GameEvents</summary></member><member name="F:EventReport.eventType"><summary>An enum used to specify the type of EventReport; see FlightEvents for the available types</summary></member><member name="F:EventReport.msg"><summary>A string message that can accompany the EventReport</summary></member><member name="F:EventReport.origin"><summary>The Part responsible for generating the EventReport</summary></member><member name="F:EventReport.other"><summary>Usually the originating part name</summary></member><member name="F:EventReport.param"></member><member name="F:EventReport.sender"><summary>The target of the event; another part's name, the surface, blank, etc...</summary></member><member name="F:EventReport.stage"><summary>The active stage number when the EventReport is generated; can be set to any integer; 0 by default</summary></member><member name="M:EventReport.Equals(object)"></member><member name="M:EventReport.Finalize"></member><member name="M:EventReport.GetHashCode"></member><member name="M:EventReport.GetType"></member><member name="M:EventReport.MemberwiseClone"></member><member name="M:EventReport.ToString"></member><member name="M:EventReport.#ctor(FlightEvents,Part,string,string,System.Int32,string,System.Single)"></member><member name="M:EventReport.#ctor(FlightEvents,Part,string,string,System.Int32,string)"><summary>The EventReport constructor, generally used when firing an EventData event that calls for an EventReport parameter  someEvent.Fire(new EventReport(...));</summary><param name="type"/><param name="eventCreator"/><param name="name"/><param name="otherName"/><param name="stageNumber"/><param name="customMsg"/></member><member name="T:EventVoid"><para>Event wrapper with no data</para><remarks>- A type used to generate GameEvents  Use this type when there is no need to accompany the event with any parameters, ie relevant Part, Vessel, CelestialBody, etc...  See EventData for events that require such extra information</remarks></member><member name="F:EventVoid.debugEvent"><summary>Generate debug logs if true</summary></member><member name="F:EventVoid.eventName"></member><member name="P:EventVoid.EventName"></member><member name="M:EventVoid.Add(EventVoid+OnEvent)"><para>Adds a event to this event list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;evt&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;delegate void &lt;ref refid='class_event_void_1a6a1e75e4d1ece391734f748e96c26f22' kindref='member'&gt;OnEvent()&lt;/ref&gt;</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Add a method to be run when the EventVoid is fired.  This is generally done in an object's Start or Awake method, or a class' constructor.  Can be setup like:  GameEvents.someEventVoidEvent.Add(yourMethod);  or  GameEvents.someEventVoidEvent.Add(new EventVoid.OnEvent(yourMethod));</remarks><param name="evt">The method you want to add, should contain no parameters</param></member><member name="M:EventVoid.Equals(object)"></member><member name="M:EventVoid.Finalize"></member><member name="M:EventVoid.Fire"><para>Fires all events in this event list</para><remarks>- Triggers the EventVoid  All of the methods added using Add are run after this.</remarks></member><member name="M:EventVoid.GetHashCode"></member><member name="M:EventVoid.GetType"></member><member name="M:EventVoid.MemberwiseClone"></member><member name="M:EventVoid.OnEvent"><summary>Any methods added to the event must match the delegate's parameters; none in this case</summary></member><member name="M:EventVoid.Remove(EventVoid+OnEvent)"><para>Removes an event from this list</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;evt&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;delegate void &lt;ref refid='class_event_void_1a6a1e75e4d1ece391734f748e96c26f22' kindref='member'&gt;OnEvent()&lt;/ref&gt;</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Remove a method from the list of methods to be run when the EventVoid is fired.  This is generally done in an object's OnDestroy method.</remarks><param name="evt">The method you want to remove, should contain no parameters</param></member><member name="M:EventVoid.ToString"></member><member name="M:EventVoid.AddEventScene(string,EventVoid.OnEvent,System.Boolean)"></member><member name="M:EventVoid.AddEventUpwards(Transform,string,EventVoid.OnEvent,System.Boolean)"></member><member name="M:EventVoid.FindEventScene(string)"></member><member name="M:EventVoid.FindEventsScene(string)"></member><member name="M:EventVoid.FindEventsUpwards(Transform,string)"></member><member name="M:EventVoid.FindEventUpwards(Transform,string)"></member><member name="M:EventVoid.RemoveEventScene(string,EventVoid.OnEvent,System.Boolean)"></member><member name="M:EventVoid.RemoveEventUpwards(Transform,string,EventVoid.OnEvent,System.Boolean)"></member><member name="M:EventVoid.#ctor(string)"><summary>The constructor used to create a new EventVoid  EventVoid myNewEvent = new EventVoid("myNewEvent");</summary><param name="eventName">Give the event a string name, generally the same as the declared name</param></member><member name="T:ExperimentResultDialogPage"></member><member name="F:ExperimentResultDialogPage.baseTransmitValue"></member><member name="F:ExperimentResultDialogPage.CommBonus"></member><member name="F:ExperimentResultDialogPage.dataSize"></member><member name="F:ExperimentResultDialogPage.host"></member><member name="F:ExperimentResultDialogPage.labSearch"></member><member name="F:ExperimentResultDialogPage.OnDiscardData"></member><member name="F:ExperimentResultDialogPage.OnKeepData"></member><member name="F:ExperimentResultDialogPage.OnSendToLab"></member><member name="F:ExperimentResultDialogPage.OnTransmitData"></member><member name="F:ExperimentResultDialogPage.pageData"></member><member name="F:ExperimentResultDialogPage.refValue"></member><member name="F:ExperimentResultDialogPage.resultText"></member><member name="F:ExperimentResultDialogPage.scienceValue"></member><member name="F:ExperimentResultDialogPage.showReset"></member><member name="F:ExperimentResultDialogPage.showTransmitWarning"></member><member name="F:ExperimentResultDialogPage.title"></member><member name="F:ExperimentResultDialogPage.TransmitBonus"></member><member name="F:ExperimentResultDialogPage.transmitWarningMessage"></member><member name="F:ExperimentResultDialogPage.valueAfterRecovery"></member><member name="F:ExperimentResultDialogPage.valueAfterTransmit"></member><member name="F:ExperimentResultDialogPage.xmitDataScalar"></member><member name="F:ExperimentResultDialogPage.sandboxResults"><summary>= new string[] {Localizer.Format("#autoLOC_457681"),     
        Localizer.Format("#autoLOC_457682"),     
        Localizer.Format("#autoLOC_457683"),     
        Localizer.Format("#autoLOC_457684"),     
        Localizer.Format("#autoLOC_457685"),     
        Localizer.Format("#autoLOC_457686")     
    }</summary></member><member name="M:ExperimentResultDialogPage.Equals(object)"></member><member name="M:ExperimentResultDialogPage.Finalize"></member><member name="M:ExperimentResultDialogPage.GetHashCode"></member><member name="M:ExperimentResultDialogPage.GetType"></member><member name="M:ExperimentResultDialogPage.MemberwiseClone"></member><member name="M:ExperimentResultDialogPage.ToString"></member><member name="M:ExperimentResultDialogPage.UpdatePageLabValue"></member><member name="M:ExperimentResultDialogPage.#ctor(Part,ScienceData,System.Single,System.Single,System.Boolean,string,System.Boolean,ScienceLabSearch,Callback,Callback,Callback,Callback)"></member><member name="T:FXGroup"><para>An FX group is a wrapper for a collection of effects. It abstracts the effects themselves, so it&amp;apos;s possible to have any number of effects assigned to a group, or none. A group holds collections for particle emmiters, lights, and sound. All are executed when the effect is on. FX Groups are used by Parts, since the number or position of effect nodes is unknown. Instead of handling the effects themselves, the parts handle FXGroups</para></member><member name="F:FXGroup.activeLatch"></member><member name="F:FXGroup.audio"></member><member name="F:FXGroup.fxEmitters"><para>A collection of gameObjects with particle emmiters</para></member><member name="F:FXGroup.lights"><para>A collection of gameObjects with Light Components</para></member><member name="F:FXGroup.name"></member><member name="F:FXGroup.powerVariation"></member><member name="F:FXGroup.sfx"></member><member name="P:FXGroup.Active"></member><member name="P:FXGroup.isValid"></member><member name="P:FXGroup.Power"><para>controls the overall size of the effects.</para></member><member name="M:FXGroup.begin(UnityEngine.AudioSource)"></member><member name="M:FXGroup.Burst"><para>Will do a single burst of all particle emmiters in the group</para></member><member name="M:FXGroup.Equals(object)"></member><member name="M:FXGroup.Finalize"></member><member name="M:FXGroup.GetHashCode"></member><member name="M:FXGroup.GetType"></member><member name="M:FXGroup.MemberwiseClone"></member><member name="M:FXGroup.setActive(System.Boolean)"><para>controls whether the effect is continuously active or not.</para></member><member name="M:FXGroup.SetLatch(System.Boolean)"><para>Sets the active group active state to true, but not to false. Use when effects are assigned to multiple conflicting groups. Don&amp;apos;t forget to unlatch them.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;latch&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FXGroup.SetPower(System.Single)"><para>Sets the active group power to the given value.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pwr&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; Mathf.Clamp01(pwr);</para></member><member name="M:FXGroup.SetPowerLatch(System.Single)"><para>Sets the active group power to the given value, only if the given value is higher than the current one. Use to solve conflicts.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pwr&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FXGroup.ToString"></member><member name="M:FXGroup.Unlatch"><para>Deactivates the group, if it&amp;apos;s been activated with SetLatch. Also resets all power latches</para></member><member name="M:FXGroup.#ctor(string)"></member><member name="T:FlightCamera"><summary>This class is related to control of the main camera used in the flight scene. Its transform is the parent of the actual Camera objects.</summary></member><member name="F:FlightCamera.AbortExternalControl"></member><member name="F:FlightCamera.autoMode"></member><member name="F:FlightCamera.cameraAlt"></member><member name="F:FlightCamera.cameras"></member><member name="F:FlightCamera.cameraWobbleSensitivity"></member><member name="F:FlightCamera.camFXPos"></member><member name="F:FlightCamera.camFXRot"></member><member name="F:FlightCamera.camHdg"></member><member name="F:FlightCamera.camPitch"></member><member name="F:FlightCamera.chaseBaseMode"></member><member name="F:FlightCamera.chaseBaseRot"></member><member name="F:FlightCamera.chaseFUp"></member><member name="F:FlightCamera.chaseFwd"></member><member name="F:FlightCamera.chaseMode"></member><member name="F:FlightCamera.chaseModePrev"></member><member name="F:FlightCamera.chaseOrt"></member><member name="F:FlightCamera.endDirection"></member><member name="F:FlightCamera.endPitch"></member><member name="F:FlightCamera.FieldOfView"></member><member name="F:FlightCamera.FoRlerp"></member><member name="F:FlightCamera.FoRMode"></member><member name="F:FlightCamera.fovDefault"></member><member name="F:FlightCamera.fovMax"></member><member name="F:FlightCamera.fovMin"></member><member name="F:FlightCamera.lastLocalPitch"></member><member name="F:FlightCamera.localPitch"></member><member name="F:FlightCamera.mainCamera"></member><member name="F:FlightCamera.maxDistance"></member><member name="F:FlightCamera.maxDistOnDestroy"></member><member name="F:FlightCamera.maxPitch"></member><member name="F:FlightCamera.minDistance"></member><member name="F:FlightCamera.minDistOnDestroy"></member><member name="F:FlightCamera.minHeight"></member><member name="F:FlightCamera.minHeightAtMaxDist"></member><member name="F:FlightCamera.minHeightAtMinDist"></member><member name="F:FlightCamera.minPitch"></member><member name="F:FlightCamera.mode"></member><member name="F:FlightCamera.nextMove"></member><member name="F:FlightCamera.offsetHdg"></member><member name="F:FlightCamera.offsetPitch"></member><member name="F:FlightCamera.orbitSensitivity"></member><member name="F:FlightCamera.orientationSharpness"></member><member name="F:FlightCamera.partTarget"><para>normally null, but will be non-null if the camera has been targeted at a part instead of vessel CoM</para></member><member name="F:FlightCamera.pivotTranslateSharpness"></member><member name="F:FlightCamera.sharpness"></member><member name="F:FlightCamera.startDistance"></member><member name="F:FlightCamera.targetDirection"></member><member name="F:FlightCamera.targetMode"></member><member name="F:FlightCamera.tgtUpAxis"></member><member name="F:FlightCamera.tIRpitch"></member><member name="F:FlightCamera.tIRroll"></member><member name="F:FlightCamera.tIRyaw"></member><member name="F:FlightCamera.upAxis"></member><member name="F:FlightCamera.updateActive"></member><member name="F:FlightCamera.vesselTarget"></member><member name="F:FlightCamera.zoomScaleFactor"></member><member name="F:FlightCamera.fetch"><summary>Returns the singleton FlightCamera object.</summary></member><member name="P:FlightCamera.Distance"></member><member name="P:FlightCamera.enabled"></member><member name="P:FlightCamera.gameObject"></member><member name="P:FlightCamera.hideFlags"></member><member name="P:FlightCamera.isActiveAndEnabled"></member><member name="P:FlightCamera.name"></member><member name="P:FlightCamera.pivotRotation"></member><member name="P:FlightCamera.tag"></member><member name="P:FlightCamera.Target"></member><member name="P:FlightCamera.transform"></member><member name="P:FlightCamera.useGUILayout"></member><member name="P:FlightCamera.CamHdg"><summary>You can set this to change the look direction of the in-flight camera (value is in radians).</summary></member><member name="P:FlightCamera.CamMode"></member><member name="P:FlightCamera.CamPitch"><summary>You can set this to change the look direction of the in-flight camera (value is in radians).</summary></member><member name="P:FlightCamera.FrameOfReferenceMode"></member><member name="M:FlightCamera.ActivateUpdate"><summary>Enables mouse control of the camera.</summary></member><member name="M:FlightCamera.Awake"></member><member name="M:FlightCamera.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.BroadcastMessage(string,object)"></member><member name="M:FlightCamera.BroadcastMessage(string)"></member><member name="M:FlightCamera.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.CancelInvoke"></member><member name="M:FlightCamera.CancelInvoke(string)"></member><member name="M:FlightCamera.CompareTag(string)"></member><member name="M:FlightCamera.CycleCameraHighlighter"></member><member name="M:FlightCamera.DeactivateUpdate"><summary>Disables mouse control of the camera.</summary></member><member name="M:FlightCamera.DisableCamera"></member><member name="M:FlightCamera.EnableCamera"></member><member name="M:FlightCamera.Equals(object)"></member><member name="M:FlightCamera.Finalize"></member><member name="M:FlightCamera.GetCameraFoR(FoRModes)"></member><member name="M:FlightCamera.GetCameraTransform"></member><member name="M:FlightCamera.GetChaseFoR(Vessel)"></member><member name="M:FlightCamera.GetComponent(System.Type)"></member><member name="M:FlightCamera.GetComponent"></member><member name="M:FlightCamera.GetComponent(string)"></member><member name="M:FlightCamera.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:FlightCamera.GetComponentInChildren(System.Type)"></member><member name="M:FlightCamera.GetComponentInChildren"></member><member name="M:FlightCamera.GetComponentInChildren(System.Boolean)"></member><member name="M:FlightCamera.GetComponentInParent(System.Type)"></member><member name="M:FlightCamera.GetComponentInParent"></member><member name="M:FlightCamera.GetComponents(System.Type)"></member><member name="M:FlightCamera.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightCamera.GetComponents(List)"></member><member name="M:FlightCamera.GetComponents"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Type)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightCamera.GetComponentsInChildren"></member><member name="M:FlightCamera.GetComponentsInChildren(List)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Type)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightCamera.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightCamera.GetComponentsInParent"></member><member name="M:FlightCamera.GetHashCode"></member><member name="M:FlightCamera.GetInstanceID"></member><member name="M:FlightCamera.getPitch"></member><member name="M:FlightCamera.GetPivot"></member><member name="M:FlightCamera.getReferenceFrame"></member><member name="M:FlightCamera.getRotation(System.Single,System.Single)"></member><member name="M:FlightCamera.GetType"></member><member name="M:FlightCamera.getYaw"></member><member name="M:FlightCamera.IKSPCamera.get_enabled"></member><member name="M:FlightCamera.Invoke(string,System.Single)"></member><member name="M:FlightCamera.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightCamera.IsInvoking(string)"></member><member name="M:FlightCamera.IsInvoking"></member><member name="M:FlightCamera.LateUpdate"><para>&amp;lt; collect input</para><para>&amp;lt; MMB :: &lt;ref refid='class_orbit' kindref='compound'&gt;Orbit&lt;/ref&gt;</para><para>&amp;lt; &lt;ref refid='class_track_i_r' kindref='compound'&gt;TrackIR&lt;/ref&gt; look-around</para><para>&amp;lt; update camera frame of reference based on camera mode</para></member><member name="M:FlightCamera.MemberwiseClone"></member><member name="M:FlightCamera.OnDestroy"></member><member name="M:FlightCamera.OnLevelLoaded(System.Int32)"></member><member name="M:FlightCamera.OnNavigatorHandoff"></member><member name="M:FlightCamera.OnNavigatorRequestControl"><para>Called before the device takes control of camera input. Return true to allow the device to have control, or false to deny it.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:FlightCamera.OnNavigatorTakeOver(Callback)"><para>Called when the device is about to take control of camera input. Return a method to be used to check whether the camera should receive control again. Also if necessary to get control back immediately, you can call the provided callback parameter.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:FlightCamera.OnSceneLoaded(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)"></member><member name="M:FlightCamera.OnSceneSwitch(GameScenes)"></member><member name="M:FlightCamera.OnTargetDestroyed"></member><member name="M:FlightCamera.OnVesselChange(Vessel)"></member><member name="M:FlightCamera.ResetFoV"></member><member name="M:FlightCamera.ResumeFoV"></member><member name="M:FlightCamera.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessage(string,object)"></member><member name="M:FlightCamera.SendMessage(string)"></member><member name="M:FlightCamera.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SendMessageUpwards(string,object)"></member><member name="M:FlightCamera.SendMessageUpwards(string)"></member><member name="M:FlightCamera.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightCamera.SetCamCoordsFromPosition(UnityEngine.Vector3)"><para>Set the camera&amp;apos;s coordinates (camPitch, camHdg) from the given worldspace position &lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FlightCamera.SetDefaultFoV"></member><member name="M:FlightCamera.SetDistance(System.Single)"><para>sets the target distance for the camera, so it will lerp to the end position.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dist&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FlightCamera.SetDistanceImmediate(System.Single)"><para>sets the distance for the camera, and moves it immediately to the end position.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dist&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FlightCamera.SetFoV(System.Single)"></member><member name="M:FlightCamera.setMode(FlightCamera+Modes)"></member><member name="M:FlightCamera.setModeImmediate(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetNextMode"></member><member name="M:FlightCamera.SetTarget(UnityEngine.Transform,FlightCamera+TargetMode)"><para>&amp;lt; find the active target and focus it</para><para>&amp;lt; EVAs don&amp;apos;t like wobbly cameras, it gets jittery.</para></member><member name="M:FlightCamera.SetTargetNone"></member><member name="M:FlightCamera.SetTargetPart(Part)"></member><member name="M:FlightCamera.SetTargetTransform(UnityEngine.Transform)"></member><member name="M:FlightCamera.SetTargetVessel(Vessel)"></member><member name="M:FlightCamera.Start"></member><member name="M:FlightCamera.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.StartCoroutine(string,object)"></member><member name="M:FlightCamera.StartCoroutine(string)"></member><member name="M:FlightCamera.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.Startup"></member><member name="M:FlightCamera.StopAllCoroutines"></member><member name="M:FlightCamera.StopCoroutine(string)"></member><member name="M:FlightCamera.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightCamera.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightCamera.TargetActiveVessel"></member><member name="M:FlightCamera.ToString"></member><member name="M:FlightCamera.TrackIRisActive"></member><member name="M:FlightCamera.UpdateCameraTransform"><para>&amp;lt; allow the target&amp;apos;s rotation to influence the camera a little.</para><para>&amp;lt; clamp local pitch to 89°</para></member><member name="M:FlightCamera.updateFoR(UnityEngine.Quaternion,System.Single)"></member><member name="M:FlightCamera.ClearTarget"></member><member name="M:FlightCamera.GetAutoModeForVessel(Vessel)"></member><member name="M:FlightCamera.SetMode(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetModeImmediate(FlightCamera+Modes)"></member><member name="M:FlightCamera.SetTarget(Vessel)"></member><member name="M:FlightCamera.SetTarget(Part)"></member><member name="M:FlightCamera.SetTarget(UnityEngine.Transform)"></member><member name="M:FlightCamera.#ctor"></member><member name="T:FlightCtrlState"><summary>A FlightCtrlState is a snapshot of the state of all control inputs to a vessel at a given instant in time. See FlightInputHandler.state and Vessel.OnFlyByWire.</summary></member><member name="F:FlightCtrlState.fastThrottle"><summary>Unused?</summary></member><member name="F:FlightCtrlState.gearDown"><summary>Unused? Landing gear are lowered by sending an Event.</summary></member><member name="F:FlightCtrlState.gearUp"><summary>Unused? Landing gear are raised by sending an Event.</summary></member><member name="F:FlightCtrlState.headlight"><summary>Presumably, whether the EVA headlight is turned on.</summary></member><member name="F:FlightCtrlState.killRot"><summary>Whether SAS is turned on.</summary></member><member name="F:FlightCtrlState.mainThrottle"><summary>The throttle setting; this must be between 0 and 1.</summary></member><member name="F:FlightCtrlState.pitch"><summary>The pitch control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.pitchTrim"><summary>Presumably, the pitch trim setting, i.e., the pitch input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.roll"><summary>The roll control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.rollTrim"><summary>Presumably, the roll trim setting, i.e., the roll input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.wheelSteer"></member><member name="F:FlightCtrlState.wheelSteerTrim"></member><member name="F:FlightCtrlState.wheelThrottle"></member><member name="F:FlightCtrlState.wheelThrottleTrim"></member><member name="F:FlightCtrlState.X"><summary>The RCS x-axis control input.</summary></member><member name="F:FlightCtrlState.Y"><summary>The RCS y-axis control input.</summary></member><member name="F:FlightCtrlState.yaw"><summary>The yaw control input; this must be between -1 and 1.</summary></member><member name="F:FlightCtrlState.yawTrim"><summary>Presumably, the yaw trim input; i.e., the yaw input that will be given if no other input is given.</summary></member><member name="F:FlightCtrlState.Z"><summary>The RCS z-axis control input.</summary></member><member name="P:FlightCtrlState.isIdle"></member><member name="P:FlightCtrlState.isNeutral"><summary>Presumably, whether this flight control represents "neutral" controls, i.e., no input and zero throttle.</summary></member><member name="M:FlightCtrlState.CopyFrom(FlightCtrlState)"><summary>Presumably, copies the state of the FlightCtrlState st into this FlightCtrlState object.</summary><param name="st"/></member><member name="M:FlightCtrlState.Equals(object)"></member><member name="M:FlightCtrlState.Finalize"></member><member name="M:FlightCtrlState.GetHashCode"></member><member name="M:FlightCtrlState.GetPYR"></member><member name="M:FlightCtrlState.GetType"></member><member name="M:FlightCtrlState.GetWheels"></member><member name="M:FlightCtrlState.GetXYZ"></member><member name="M:FlightCtrlState.Load(ConfigNode)"></member><member name="M:FlightCtrlState.MemberwiseClone"></member><member name="M:FlightCtrlState.Neutralize"></member><member name="M:FlightCtrlState.NeutralizeAll"></member><member name="M:FlightCtrlState.NeutralizeStick"></member><member name="M:FlightCtrlState.ResetTrim"></member><member name="M:FlightCtrlState.Save(ConfigNode)"></member><member name="M:FlightCtrlState.ToString"></member><member name="M:FlightCtrlState.#ctor"></member><member name="T:FlightGlobals"><para>This class keeps all sorts of flight-related information that need to be accessed globally. Here are methods for sampling gravity, air pressure, temperature for any given flight state, as well as publicly available references to planet positions and other stuff.</para><remarks>- FlightGlobals contains lists of all CelestialBodies and Vessels in the game.  It also provides static utility functions for computing the atmospheric and gravitational properties of CelestialBodies.</remarks></member><member name="F:FlightGlobals.activeVessel"></member><member name="F:FlightGlobals.bodies"></member><member name="F:FlightGlobals.mainCameraRef"></member><member name="F:FlightGlobals.srfAttachStiffNess"></member><member name="F:FlightGlobals.stackAttachStiffNess"></member><member name="F:FlightGlobals.vessels"></member><member name="F:FlightGlobals.vesselsLoaded"></member><member name="F:FlightGlobals.vesselsUnloaded"></member><member name="F:FlightGlobals.vesselTargetDelta"></member><member name="F:FlightGlobals.vesselTargetDirection"></member><member name="F:FlightGlobals.vesselTargetTransform"></member><member name="F:FlightGlobals.camera_altitude"></member><member name="F:FlightGlobals.camera_position"></member><member name="F:FlightGlobals.currentMainBody"><summary>The mainBody of the active vessel.</summary></member><member name="F:FlightGlobals.FoRMode"></member><member name="F:FlightGlobals.overrideOrbit"></member><member name="F:FlightGlobals.physicalObjects"></member><member name="F:FlightGlobals.ready"></member><member name="F:FlightGlobals.ship_dns"><para>nav ball rotation</para></member><member name="F:FlightGlobals.ship_heading"></member><member name="F:FlightGlobals.ship_orientation"></member><member name="F:FlightGlobals.ship_orientation_offset"></member><member name="F:FlightGlobals.ship_temp"></member><member name="F:FlightGlobals.ship_tgtSpeed"></member><member name="F:FlightGlobals.ship_tgtVelocity"></member><member name="F:FlightGlobals.TargetSwitchSqrThresh"></member><member name="F:FlightGlobals.warpDriveActive"></member><member name="P:FlightGlobals.enabled"></member><member name="P:FlightGlobals.gameObject"></member><member name="P:FlightGlobals.hideFlags"></member><member name="P:FlightGlobals.isActiveAndEnabled"></member><member name="P:FlightGlobals.name"></member><member name="P:FlightGlobals.tag"></member><member name="P:FlightGlobals.transform"></member><member name="P:FlightGlobals.useGUILayout"></member><member name="P:FlightGlobals.VesselTarget"><summary>The currently selected target vessel, celestial body, or docking node. If no target is selected, this is null.</summary></member><member name="P:FlightGlobals.vesselTargetMode"></member><member name="P:FlightGlobals.activeTarget"><para>A reference to the ship part that is actively receiving control updates (and is the camera target)</para></member><member name="P:FlightGlobals.ActiveVessel"><para>A reference to the vessel that is actively receiving control updates (and is the camera target)</para><remarks>- The vessel the player is currently controlling.</remarks></member><member name="P:FlightGlobals.Bodies"><summary>A list of all CelestialBodies in the universe. Contents in 0.18.2:</summary><para>Bodies[0] = Sun</para><para>Bodies[1] = Kerbin</para><para>Bodies[2] = Mun</para><para>Bodies[3] = Minmus</para><para>Bodies[4] = Moho</para><para>Bodies[5] = Eve</para><para>Bodies[6] = Dun</para><para>Bodies[7] = Ike</para><para>Bodies[8] = Jool</para><para>Bodies[9] = Laythe</para><para>Bodies[10] = Vall</para><para>Bodies[11] = Bop</para><para>Bodies[12] = Tylo</para><para>Bodies[13] = Gilly</para><para>Bodies[14] = Pol</para><para>Bodies[15] = Dres</para><para>Bodies[16] = Eeloo</para></member><member name="P:FlightGlobals.DragMultiplier"><summary>The KSP formula for the drag force on a part is (1/2) * DragMultiplier * part.mass * part.mass_drag * airspeed^2</summary></member><member name="P:FlightGlobals.fetch"><summary>Use this FlightGlobals instance to access non-static members of FlightGlobals. For example, the current target is FlightGlobals.fetch.VesselTarget.</summary></member><member name="P:FlightGlobals.RefFrameIsRotating"><summary>Whether KSP is doing its computations in an inertial reference frame, or the reference frame that  rotates with the current dominant celestial body.</summary></member><member name="P:FlightGlobals.ship_acceleration"></member><member name="P:FlightGlobals.ship_altitude"></member><member name="P:FlightGlobals.ship_angularMomentum"></member><member name="P:FlightGlobals.ship_angularVelocity"></member><member name="P:FlightGlobals.ship_CoM"></member><member name="P:FlightGlobals.ship_geeForce"></member><member name="P:FlightGlobals.ship_latitude"></member><member name="P:FlightGlobals.ship_longitude"></member><member name="P:FlightGlobals.ship_MOI"></member><member name="P:FlightGlobals.ship_obtSpeed"></member><member name="P:FlightGlobals.ship_obtVelocity"></member><member name="P:FlightGlobals.ship_orbit"></member><member name="P:FlightGlobals.ship_position"></member><member name="P:FlightGlobals.ship_rotation"></member><member name="P:FlightGlobals.ship_srfSpeed"></member><member name="P:FlightGlobals.ship_srfVelocity"></member><member name="P:FlightGlobals.ship_stP"></member><member name="P:FlightGlobals.ship_upAxis"></member><member name="P:FlightGlobals.ship_velocity"></member><member name="P:FlightGlobals.ship_verticalSpeed"></member><member name="P:FlightGlobals.speedDisplayMode"></member><member name="P:FlightGlobals.SrfAttachStiffNess"></member><member name="P:FlightGlobals.StackAttachStiffNess"></member><member name="P:FlightGlobals.upAxis"><summary>The normalized vector from the active vessel mainBody center to the vessel position.</summary></member><member name="P:FlightGlobals.vacuumTemperature"></member><member name="P:FlightGlobals.Vessels"><summary>A list of all the Vessels that currently exist</summary></member><member name="P:FlightGlobals.VesselsLoaded"></member><member name="P:FlightGlobals.VesselsUnloaded"></member><member name="M:FlightGlobals.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.BroadcastMessage(string,object)"></member><member name="M:FlightGlobals.BroadcastMessage(string)"></member><member name="M:FlightGlobals.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.CancelInvoke"></member><member name="M:FlightGlobals.CancelInvoke(string)"></member><member name="M:FlightGlobals.CompareTag(string)"></member><member name="M:FlightGlobals.Equals(object)"></member><member name="M:FlightGlobals.Finalize"></member><member name="M:FlightGlobals.GetComponent(System.Type)"></member><member name="M:FlightGlobals.GetComponent"></member><member name="M:FlightGlobals.GetComponent(string)"></member><member name="M:FlightGlobals.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:FlightGlobals.GetComponentInChildren(System.Type)"></member><member name="M:FlightGlobals.GetComponentInChildren"></member><member name="M:FlightGlobals.GetComponentInChildren(System.Boolean)"></member><member name="M:FlightGlobals.GetComponentInParent(System.Type)"></member><member name="M:FlightGlobals.GetComponentInParent"></member><member name="M:FlightGlobals.GetComponents(System.Type)"></member><member name="M:FlightGlobals.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightGlobals.GetComponents(List)"></member><member name="M:FlightGlobals.GetComponents"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Type)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightGlobals.GetComponentsInChildren"></member><member name="M:FlightGlobals.GetComponentsInChildren(List)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Type)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightGlobals.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightGlobals.GetComponentsInParent"></member><member name="M:FlightGlobals.GetHashCode"></member><member name="M:FlightGlobals.GetInstanceID"></member><member name="M:FlightGlobals.GetType"></member><member name="M:FlightGlobals.Invoke(string,System.Single)"></member><member name="M:FlightGlobals.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightGlobals.IsInvoking(string)"></member><member name="M:FlightGlobals.IsInvoking"></member><member name="M:FlightGlobals.MemberwiseClone"></member><member name="M:FlightGlobals.PostOrbitSet(CelestialBody)"></member><member name="M:FlightGlobals.PrepForOrbitSet"></member><member name="M:FlightGlobals.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessage(string,object)"></member><member name="M:FlightGlobals.SendMessage(string)"></member><member name="M:FlightGlobals.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,object)"></member><member name="M:FlightGlobals.SendMessageUpwards(string)"></member><member name="M:FlightGlobals.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightGlobals.SetShipOrbit(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"></member><member name="M:FlightGlobals.SetShipOrbitRendezvous(Vessel,Vector3d,Vector3d)"></member><member name="M:FlightGlobals.SetVesselTarget(ITargetable,System.Boolean)"></member><member name="M:FlightGlobals.SetVesselTarget(ITargetable)"><summary>Sets the currently selected target vessel, celestial body, or docking node</summary><param name="tgt">The Vessel, CelestialBody, or ModuleDockingNode to target</param></member><member name="M:FlightGlobals.Start"></member><member name="M:FlightGlobals.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StartCoroutine(string,object)"></member><member name="M:FlightGlobals.StartCoroutine(string)"></member><member name="M:FlightGlobals.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StopAllCoroutines"></member><member name="M:FlightGlobals.StopCoroutine(string)"></member><member name="M:FlightGlobals.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightGlobals.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightGlobals.ToString"></member><member name="M:FlightGlobals.UpdateInformation(System.Boolean)"><para>&amp;lt; orientation calculation for navballs</para><para>&amp;lt; heading calculation for compasses</para></member><member name="M:FlightGlobals.addPhysicalObject(physicalObject)"></member><member name="M:FlightGlobals.AddVessel(Vessel)"></member><member name="M:FlightGlobals.ClearInverseRotation"></member><member name="M:FlightGlobals.ClearToSave"></member><member name="M:FlightGlobals.CycleSpeedModes"></member><member name="M:FlightGlobals.FindNearestControllableVessel(Vessel)"><para>Finds the nearest controllable vessel. Used for switching focus after the current vessel has died.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;currentVessel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:FlightGlobals.FindNearestVesselWhere(Vector3d,System.Func)"></member><member name="M:FlightGlobals.FindPartByID(System.UInt32)"></member><member name="M:FlightGlobals.FindProtoPartByID(System.UInt32)"></member><member name="M:FlightGlobals.FindVessel(System.Guid)"></member><member name="M:FlightGlobals.ForceSetActiveVessel(Vessel)"><para>Switch focus to another vessel, ignoring vessel-transition restrictions (use with caution). Will return false if sent to the same vessel, true on most other cases.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FlightGlobals.getAltitudeAtPos(Vector3d)"><para>returns the altitude in relation to the main body at the specified position</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;position&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the position in global space</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>altitude in meters (units)</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - The altitude above the sea level of the current main body of the given world space position.</remarks><param name="position">World space position</param><returns>Altitude above sea level</returns></member><member name="M:FlightGlobals.getAltitudeAtPos(UnityEngine.Vector3)"><summary>The altitude above the sea level of the current main body of the given world space position.</summary><param name="position">World space position</param><returns>Altitude above sea level</returns></member><member name="M:FlightGlobals.getAltitudeAtPos(UnityEngine.Vector3,CelestialBody)"><summary>An error occured transforming this comment to XML - The altitude above the sea level of the given body of the given world space position.
&lt;para name="position"&gt;World space position&lt;/param&gt;
&lt;para name="body"&gt;The body in question&lt;/param&gt;
&lt;returns&gt; Altitude above sea level in m in float format &lt;/returns&gt;</summary></member><member name="M:FlightGlobals.getAltitudeAtPos(Vector3d,CelestialBody)"><summary>An error occured transforming this comment to XML - The altitude above the sea level of the given body of the given world space position.
&lt;para name="position"&gt;World space position&lt;/param&gt;
&lt;para name="body"&gt;The body in question&lt;/param&gt;
&lt;returns&gt; Altitude above sea level in m in double format &lt;/returns&gt;</summary></member><member name="M:FlightGlobals.getAtmDensity(System.Double,System.Double,CelestialBody)"><para>returns the atmospheric density from the given pressure level,</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pressure&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The pressure in kPA</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>The density in kg/cm^3</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:FlightGlobals.getAtmDensity(System.Double)"><summary>Converts an atmospheric pressure into an atmospheric density. Atmospheric density is what appears in the KSP drag equation. This function seems to just multiply the input by 1.2230948554874</summary><param name="pressure">Use the output of getStaticPressure</param><returns>An atmospheric density, suitable for use in calculating drag.</returns></member><member name="M:FlightGlobals.GetBodyByName(string)"></member><member name="M:FlightGlobals.GetBodyIndex(CelestialBody)"><summary>Return the index of the specified body in the Bodies array.</summary></member><member name="M:FlightGlobals.getCentrifugalAcc(Vector3d,CelestialBody)"><para>Returns the centrifugal acceleration for the given position and reference body. (If the planet is not in reverse-rotation, there is no centrifugal force)</para><para>&amp;lt; FIXME replace with appropriate dot product version</para></member><member name="M:FlightGlobals.getCoriolisAcc(Vector3d,CelestialBody)"><para>Return the coriolis acceleration for the given velocity and reference body. (If the planet is not in reverse-rotation, there is no coriolis force)</para></member><member name="M:FlightGlobals.GetDisplaySpeed"></member><member name="M:FlightGlobals.GetDisplayVelocity"></member><member name="M:FlightGlobals.getExternalTemperature"><para>returns the outside temperature for the specified position and celestial body</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:FlightGlobals.getExternalTemperature(System.Double,CelestialBody)"><para>returns the outside temperature for the specified position and celestial body</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:FlightGlobals.getExternalTemperature(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.getExternalTemperature(Vector3d)"><summary>Finds the temperature at a given world space position.</summary><param name="pos">World space position</param><returns>Temperature</returns></member><member name="M:FlightGlobals.getExternalTemperature(System.Single,CelestialBody)"><summary>Finds the temperature at a given altitude above a given body.</summary><param name="altitude">An altitude (in meters?)</param><param name="body">The body of interest</param><returns>Temperture</returns></member><member name="M:FlightGlobals.GetFoR(FoRModes)"></member><member name="M:FlightGlobals.GetFoR(FoRModes,UnityEngine.Transform)"></member><member name="M:FlightGlobals.GetFoR(FoRModes,UnityEngine.Transform,Orbit)"></member><member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d)"><para>Returns a force vector for the gravity at the specified world position. use with rigidbody.addForce() (use acceleration force mode for gravity) note: returns the force for the dominant body only (gravitational pertubations not taken into account)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Returns the gravitational *acceleration* vector at a given position. Contrary to its name, it does *not* return force.</remarks><param name="pos">World space position</param><returns>Gravitational acceleration vector</returns></member><member name="M:FlightGlobals.getGeeForceAtPosition(Vector3d,CelestialBody)"><para>Returns a force vector for the gravity at the specified world position. use with rigidbody.addForce() (use acceleration force mode for gravity) note: returns the force for the dominant body only (gravitational pertubations not taken into account)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mainBody&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the body</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks><para>&amp;lt; this is the magnitude^1.5</para><para>&amp;lt; original code: get normal vector and multiply by gMag / sqrDistance</para></member><member name="M:FlightGlobals.GetHomeBody"><summary>Return a reference to the celestial body where the space center is.</summary></member><member name="M:FlightGlobals.GetHomeBodyDisplayName"></member><member name="M:FlightGlobals.GetHomeBodyIndex"><summary>Unsurprisingly, this return the index of the home body into the Bodies array.</summary></member><member name="M:FlightGlobals.GetHomeBodyName"><summary>The name of the home body, without any prefixes of sort.</summary></member><member name="M:FlightGlobals.getMainBody(Vector3d)"><para>Returns a reference to the celestial with the highest gravitational influence at the specified position.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;refPos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Returns the body whose sphere of influence contains a given position?</remarks><param name="refPos">World space position?</param><returns/></member><member name="M:FlightGlobals.getMainBody"><para>Returns a reference to the celestial with the highest gravitational influence on the active ship</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns the current dominant body?</remarks><returns/></member><member name="M:FlightGlobals.GetNotClearToSaveStatusReason(ClearToSaveStatus,string)"></member><member name="M:FlightGlobals.GetSqrAltitude(Vector3d,CelestialBody)"></member><member name="M:FlightGlobals.getStaticPressure(System.Double,CelestialBody)"><para>returns the static atmospheric pressure (in kPa) at the specified altitude and celestial body</para><remarks>- Returns the atmospheric pressure at a given altitude above a given body</remarks><param name="altitude">Altitude in meters</param><param name="body">The body in question</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure(Vector3d)"><para>returns the static atmospheric pressure in kPa at the specified position</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;position&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Returns the atmospheric pressure at a given position. Feed the output of this function into getAtmDensity to get the atmopsheric density.</remarks><param name="position">World space position</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure(Vector3d,CelestialBody)"><summary>Returns the atmospheric pressure of a given body's atmopshere at a given position</summary><param name="position">World space position</param><param name="body">The body in question</param><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getStaticPressure"><para>returns the static atmospheric pressure in kPa at the ship&amp;apos;s position</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns the current atmospheric pressure?</remarks><returns>Atmospheric pressure, in units of Kerbin's atmospheric pressure at sea level</returns></member><member name="M:FlightGlobals.getUpAxis"><summary>Return the normalized vector from the active vessel mainBody center to the active vessel position.</summary></member><member name="M:FlightGlobals.getUpAxis(Vector3d)"><summary>Return the normalized vector from the active vessel mainBody center to the specified position.</summary></member><member name="M:FlightGlobals.getUpAxis(CelestialBody,Vector3d)"><summary>Return the normalized vector from the specified body center to the specified position.</summary></member><member name="M:FlightGlobals.removePhysicalObject(physicalObject)"></member><member name="M:FlightGlobals.RemoveVessel(Vessel)"></member><member name="M:FlightGlobals.SetActiveVessel(Vessel)"><para>Switch focus to another vessel. Returns true if successful, false if not.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:FlightGlobals.SetSpeedMode(FlightGlobals+SpeedDisplayModes)"></member><member name="M:FlightGlobals.SortVessel(Vessel,System.Boolean)"></member><member name="M:FlightGlobals.#ctor"></member><member name="T:FlightInputHandler"><summary>FlightInputHandler stores some global information about the control of the current active vessel.</summary></member><member name="F:FlightInputHandler.hasFocus"></member><member name="F:FlightInputHandler.inputGaugeRenderers"><summary>Pointers to the pitch/yaw/roll gauges that slide on the bottom left of the flight UI. Possibly broken in 1.1</summary></member><member name="F:FlightInputHandler.precisionMode"><summary>Whether precision mode is engaged. Can be toggled by setting TRUE/FALSE (does not change the colors on the inputGaugeRenders above automatically!)</summary></member><member name="F:FlightInputHandler.rcsDeadZone"></member><member name="F:FlightInputHandler.rcslock"><summary>Whether RCS is enabled.</summary></member><member name="F:FlightInputHandler.stageLock"><summary>Presumably, whether staging has been locked via Alt-L.</summary></member><member name="F:FlightInputHandler.throttleResponsiveness"></member><member name="F:FlightInputHandler.currentTarget"></member><member name="F:FlightInputHandler.fetch"><summary>Use this FlightInputHandler instance to access non-static members of the class.</summary></member><member name="F:FlightInputHandler.OnFlyByWire"></member><member name="F:FlightInputHandler.SPACENAV_USE_AS_FLIGHT_CONTROL"></member><member name="F:FlightInputHandler.state"><para>A handle to the input state. WARNING: Don&amp;apos;t use this to read input state for part modules and such. Use vessel.ctrlState instead.</para><para>this script handles all keyboard input for the flight mode it dispatches a flight control update message for all parts that can respond this message contains a flightcontrolstate object, that holds the state of the input much like a snapshot of the cockpit controls</para><remarks>- The FlightCtrlState that represents player input. You can change the on-screen throttle by setting FlightCtrlState.state.mainThrottle.</remarks></member><member name="P:FlightInputHandler.enabled"></member><member name="P:FlightInputHandler.gameObject"></member><member name="P:FlightInputHandler.hideFlags"></member><member name="P:FlightInputHandler.isActiveAndEnabled"></member><member name="P:FlightInputHandler.name"></member><member name="P:FlightInputHandler.tag"></member><member name="P:FlightInputHandler.transform"></member><member name="P:FlightInputHandler.useGUILayout"></member><member name="P:FlightInputHandler.RCSLock"><summary>Whether RCS is enabled.</summary></member><member name="M:FlightInputHandler.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.BroadcastMessage(string,object)"></member><member name="M:FlightInputHandler.BroadcastMessage(string)"></member><member name="M:FlightInputHandler.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.CancelInvoke"></member><member name="M:FlightInputHandler.CancelInvoke(string)"></member><member name="M:FlightInputHandler.CompareTag(string)"></member><member name="M:FlightInputHandler.Equals(object)"></member><member name="M:FlightInputHandler.Finalize"></member><member name="M:FlightInputHandler.GetComponent(System.Type)"></member><member name="M:FlightInputHandler.GetComponent"></member><member name="M:FlightInputHandler.GetComponent(string)"></member><member name="M:FlightInputHandler.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentInChildren(System.Type)"></member><member name="M:FlightInputHandler.GetComponentInChildren"></member><member name="M:FlightInputHandler.GetComponentInChildren(System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentInParent(System.Type)"></member><member name="M:FlightInputHandler.GetComponentInParent"></member><member name="M:FlightInputHandler.GetComponents(System.Type)"></member><member name="M:FlightInputHandler.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:FlightInputHandler.GetComponents(List)"></member><member name="M:FlightInputHandler.GetComponents"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Type)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:FlightInputHandler.GetComponentsInChildren"></member><member name="M:FlightInputHandler.GetComponentsInChildren(List)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Type)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Boolean)"></member><member name="M:FlightInputHandler.GetComponentsInParent(System.Boolean,List)"></member><member name="M:FlightInputHandler.GetComponentsInParent"></member><member name="M:FlightInputHandler.GetHashCode"></member><member name="M:FlightInputHandler.GetInstanceID"></member><member name="M:FlightInputHandler.GetType"></member><member name="M:FlightInputHandler.Invoke(string,System.Single)"></member><member name="M:FlightInputHandler.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:FlightInputHandler.IsInvoking(string)"></member><member name="M:FlightInputHandler.IsInvoking"></member><member name="M:FlightInputHandler.MemberwiseClone"></member><member name="M:FlightInputHandler.OnDestroy"></member><member name="M:FlightInputHandler.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessage(string,object)"></member><member name="M:FlightInputHandler.SendMessage(string)"></member><member name="M:FlightInputHandler.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,object)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string)"></member><member name="M:FlightInputHandler.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:FlightInputHandler.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StartCoroutine(string,object)"></member><member name="M:FlightInputHandler.StartCoroutine(string)"></member><member name="M:FlightInputHandler.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StopAllCoroutines"></member><member name="M:FlightInputHandler.StopCoroutine(string)"></member><member name="M:FlightInputHandler.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:FlightInputHandler.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:FlightInputHandler.ToString"></member><member name="M:FlightInputHandler.ResumeVesselCtrlState(Vessel)"></member><member name="M:FlightInputHandler.SetLaunchCtrlState"></member><member name="M:FlightInputHandler.SetNeutralControls"><summary>Call this to set neutral controls; in particular this wil turn off the throttle.</summary></member><member name="M:FlightInputHandler.#ctor"></member><member name="T:FloatCurve"><summary>Represents a function of one variable. The function is interpolated from a given set of points, and optionally the tangents at those points can be specified.</summary></member><member name="P:FloatCurve.Curve"></member><member name="P:FloatCurve.maxTime"></member><member name="P:FloatCurve.minTime"></member><member name="M:FloatCurve.Add(System.Single,System.Single)"></member><member name="M:FloatCurve.Add(System.Single,System.Single,System.Single,System.Single)"></member><member name="M:FloatCurve.Equals(object)"></member><member name="M:FloatCurve.Evaluate(System.Single)"><summary>Evaluate the function at a given value of the input parameter.</summary><param name="time">The input parameter (not necessarily a time).</param><returns>The value of the function.</returns></member><member name="M:FloatCurve.Finalize"></member><member name="M:FloatCurve.FindMinMaxValue(float&amp;,float&amp;)"></member><member name="M:FloatCurve.FindMinMaxValue(float&amp;,float&amp;,float&amp;,float&amp;)"></member><member name="M:FloatCurve.GetHashCode"></member><member name="M:FloatCurve.GetType"></member><member name="M:FloatCurve.Load(ConfigNode)"></member><member name="M:FloatCurve.MemberwiseClone"></member><member name="M:FloatCurve.Save(ConfigNode)"></member><member name="M:FloatCurve.ToString"></member><member name="M:FloatCurve.#ctor"></member><member name="M:FloatCurve.#ctor(UnityEngine.Keyframe[])"></member><member name="T:Funding"></member><member name="F:Funding.runner"></member><member name="F:Funding.snapshot"></member><member name="F:Funding.targetScenes"></member><member name="F:Funding.Instance"><summary>Presumably the current instance of the game.  Unsure but it is used in Civilian Population code to add funds from "taxes".</summary></member><member name="P:Funding.ClassID"></member><member name="P:Funding.ClassName"></member><member name="P:Funding.enabled"></member><member name="P:Funding.Events"></member><member name="P:Funding.Fields"></member><member name="P:Funding.Funds"></member><member name="P:Funding.gameObject"></member><member name="P:Funding.hideFlags"></member><member name="P:Funding.isActiveAndEnabled"></member><member name="P:Funding.name"></member><member name="P:Funding.tag"></member><member name="P:Funding.transform"></member><member name="P:Funding.useGUILayout"></member><member name="M:Funding.AddFunds(System.Double,TransactionReasons)"><para>&amp;lt; query strategies for modifications to incoming funds</para><remarks>- Adds funds to the player's bank account equal to value.</remarks></member><member name="M:Funding.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.BroadcastMessage(string,object)"></member><member name="M:Funding.BroadcastMessage(string)"></member><member name="M:Funding.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.CancelInvoke"></member><member name="M:Funding.CancelInvoke(string)"></member><member name="M:Funding.CompareTag(string)"></member><member name="M:Funding.Equals(object)"></member><member name="M:Funding.Finalize"></member><member name="M:Funding.GetComponent(System.Type)"></member><member name="M:Funding.GetComponent"></member><member name="M:Funding.GetComponent(string)"></member><member name="M:Funding.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Funding.GetComponentInChildren(System.Type)"></member><member name="M:Funding.GetComponentInChildren"></member><member name="M:Funding.GetComponentInChildren(System.Boolean)"></member><member name="M:Funding.GetComponentInParent(System.Type)"></member><member name="M:Funding.GetComponentInParent"></member><member name="M:Funding.GetComponents(System.Type)"></member><member name="M:Funding.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Funding.GetComponents(List)"></member><member name="M:Funding.GetComponents"></member><member name="M:Funding.GetComponentsInChildren(System.Type)"></member><member name="M:Funding.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Funding.GetComponentsInChildren(System.Boolean)"></member><member name="M:Funding.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Funding.GetComponentsInChildren"></member><member name="M:Funding.GetComponentsInChildren(List)"></member><member name="M:Funding.GetComponentsInParent(System.Type)"></member><member name="M:Funding.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Funding.GetComponentsInParent(System.Boolean)"></member><member name="M:Funding.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Funding.GetComponentsInParent"></member><member name="M:Funding.GetHashCode"></member><member name="M:Funding.GetInstanceID"></member><member name="M:Funding.GetType"></member><member name="M:Funding.Invoke(string,System.Single)"></member><member name="M:Funding.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Funding.IsInvoking(string)"></member><member name="M:Funding.IsInvoking"></member><member name="M:Funding.Load(ConfigNode)"></member><member name="M:Funding.MemberwiseClone"></member><member name="M:Funding.OnAwake"><para>&amp;lt; this will be overwritten by loaded data if any exists. If not, we can assume this is a newly started game.</para></member><member name="M:Funding.OnDestroy"></member><member name="M:Funding.OnLoad(ConfigNode)"></member><member name="M:Funding.OnSave(ConfigNode)"></member><member name="M:Funding.Save(ConfigNode)"></member><member name="M:Funding.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessage(string,object)"></member><member name="M:Funding.SendMessage(string)"></member><member name="M:Funding.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SendMessageUpwards(string,object)"></member><member name="M:Funding.SendMessageUpwards(string)"></member><member name="M:Funding.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Funding.SetFunds(System.Double,TransactionReasons)"></member><member name="M:Funding.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Funding.StartCoroutine(string,object)"></member><member name="M:Funding.StartCoroutine(string)"></member><member name="M:Funding.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Funding.StopAllCoroutines"></member><member name="M:Funding.StopCoroutine(string)"></member><member name="M:Funding.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Funding.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Funding.ToString"></member><member name="M:Funding.CanAfford(System.Single)"></member><member name="M:Funding.#ctor"><para>&amp;lt; this will be overwritten by loaded data if any exists. If not, we can assume this is a newly started game.</para></member><member name="T:Game"><para>Defines a complete game save.</para><remarks>-</remarks></member><member name="F:Game.additionalSystems"></member><member name="F:Game.compatible"></member><member name="F:Game.config"></member><member name="F:Game.CrewRoster"></member><member name="F:Game.Description"></member><member name="F:Game.editorFacility"><para>later, add other modules in here to have tutorials and other stuff defined</para><remarks>-</remarks></member><member name="F:Game.file_version_major"></member><member name="F:Game.file_version_minor"></member><member name="F:Game.file_version_revision"></member><member name="F:Game.flagURL"></member><member name="F:Game.flightState"></member><member name="F:Game.launchID"></member><member name="F:Game.linkCaption"></member><member name="F:Game.linkURL"></member><member name="F:Game.loaderInfo"></member><member name="F:Game.modded"></member><member name="F:Game.Mode"></member><member name="F:Game.Parameters"></member><member name="F:Game.scenarios"><summary>A list of all scenario templates in the currently loaded game.   Since most ProtoScenarioModules contain a reference to the Scenario that represents  them, this member is the easiest way to locate a specific Scenario in most cases. It is  recommended that ProtoScenarioModules be searched by</summary><c>ProtoScenarioModule.moduleName</c><remarks>,  not by</remarks><c>ProtoScenarioModule.moduleRef</c><remarks>, as the latter may be null.</remarks></member><member name="F:Game.Seed"></member><member name="F:Game.startScene"></member><member name="F:Game.Status"></member><member name="F:Game.Title"></member><member name="F:Game.versionCreated"></member><member name="F:Game.versionFull"></member><member name="F:Game.lastCompatibleMajor"></member><member name="F:Game.lastCompatibleMinor"></member><member name="F:Game.lastCompatibleRev"></member><member name="P:Game.CurrenciesAvailable"></member><member name="P:Game.UniversalTime"></member><member name="M:Game.AddProtoScenarioModule(System.Type,GameScenes[])"><summary>Creates a new scenario of the specified type. Once created, the scenario will persist  automatically.</summary><returns>A ProtoScenarioModule corresponding to the newly installed scenario.</returns><param name="typeOfScnModule">The scenario module to create. The object represented by  this type must be a subclass of ScenarioModule.</param><param name="scenes">The scenes in which the scenario should automatically load itself.</param></member><member name="M:Game.AddVessel(ConfigNode)"></member><member name="M:Game.DestroyVessel(Vessel)"></member><member name="M:Game.Equals(object)"></member><member name="M:Game.Finalize"></member><member name="M:Game.GetHashCode"></member><member name="M:Game.GetType"></member><member name="M:Game.IsResumable"></member><member name="M:Game.Load"><para>Applies the state to the scene (does not wipe the scene beforehand)</para><remarks>-</remarks></member><member name="M:Game.MemberwiseClone"></member><member name="M:Game.MergeLoaderInfo(ConfigNode)"></member><member name="M:Game.RemoveProtoScenarioModule(System.Type)"><summary>Unregisters a ProtoScenarioModule from the game. It will not persist until the scenario  is re-added. IMPORTANT: calling this method DOES NOT remove the Scenario object itself, which will  continue to run until the next scene change.</summary><returns><c>true</c>, if the ProtoScenarioModule was removed,</returns><param name="typeOfScnModule">The scenario module to de-persist. The object represented by  this type must be a subclass of ScenarioModule.</param></member><member name="M:Game.Save(ConfigNode)"></member><member name="M:Game.Start"></member><member name="M:Game.ToString"></member><member name="M:Game.Updated"><para>Updates the state based on game conditions, then returns it</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><para>&amp;lt; if it&amp;apos;s been generated by this version, it&amp;apos;s compatible with this version :)</para><remarks>-</remarks></member><member name="M:Game.GetCloneOf(Game)"><para>Creates a deep copy of the given state</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;g&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:Game.#ctor"><para>Create a new (blank) &lt;ref refid='class_game' kindref='compound'&gt;Game&lt;/ref&gt; State</para><para>&amp;lt; get parameters off the current loaded game, when available.</para><para>&amp;lt; if it&amp;apos;s been generated by this version, it&amp;apos;s compatible with this version :)</para><remarks>-</remarks></member><member name="M:Game.#ctor(ConfigNode)"></member><member name="T:GameDatabase"><para>A singleton class which parses the game directory for config files and files of various types. It creates a simple url access for these files and configs so they can be used in the game scripts. Contains the main instance of &lt;ref refid='class_game_settings' kindref='compound'&gt;GameSettings&lt;/ref&gt;.</para></member><member name="F:GameDatabase.databaseAudio"></member><member name="F:GameDatabase.databaseAudioFiles"></member><member name="F:GameDatabase.databaseModel"></member><member name="F:GameDatabase.databaseModelFiles"></member><member name="F:GameDatabase.databaseShaders"><para>the url root node</para></member><member name="F:GameDatabase.databaseTexture"></member><member name="P:GameDatabase.enabled"></member><member name="P:GameDatabase.ExperienceConfigs"></member><member name="P:GameDatabase.gameObject"></member><member name="P:GameDatabase.hideFlags"></member><member name="P:GameDatabase.isActiveAndEnabled"></member><member name="P:GameDatabase.name"></member><member name="P:GameDatabase.PluginDataFolder"></member><member name="P:GameDatabase.Recompile"></member><member name="P:GameDatabase.RecompileModels"></member><member name="P:GameDatabase.root"></member><member name="P:GameDatabase.settingsFileName"><para>The filename for the settings file</para></member><member name="P:GameDatabase.tag"></member><member name="P:GameDatabase.transform"></member><member name="P:GameDatabase.useGUILayout"></member><member name="P:GameDatabase.EnvironmentInfo"></member><member name="P:GameDatabase.Instance"><para>&lt;ref refid='class_game_database' kindref='compound'&gt;GameDatabase&lt;/ref&gt; singleton instance</para><remarks>- The active GameDatabase instance.  To reference the GameDatabase from any script, use GameDatabase.Instance</remarks></member><member name="P:GameDatabase.Modded"></member><member name="M:GameDatabase.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.BroadcastMessage(string,object)"></member><member name="M:GameDatabase.BroadcastMessage(string)"></member><member name="M:GameDatabase.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.CancelInvoke"></member><member name="M:GameDatabase.CancelInvoke(string)"></member><member name="M:GameDatabase.CompareTag(string)"></member><member name="M:GameDatabase.Equals(object)"></member><member name="M:GameDatabase.ExistsAudioClip(string)"><para>Tests for existance AudioClip of given url</para></member><member name="M:GameDatabase.ExistsConfigNode(string)"><para>Tests existance of &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; of given url</para></member><member name="M:GameDatabase.ExistsModel(string)"><para>Tests existance of model (GameObject) of given url</para></member><member name="M:GameDatabase.ExistsShader(string)"><para>Tests for existance Shader of given url</para></member><member name="M:GameDatabase.ExistsTexture(string)"><para>Tests for existance of Texture2D of given url</para></member><member name="M:GameDatabase.Finalize"></member><member name="M:GameDatabase.GetAllTexturesInFolder(string)"><para>Retrieves a list of &lt;ref refid='class_game_database_1_1_texture_info' kindref='compound'&gt;TextureInfo&lt;/ref&gt; that are contained within this folder (with trailing /)</para></member><member name="M:GameDatabase.GetAllTexturesInFolderType(string,System.Boolean)"><para>Retrieves a list of &lt;ref refid='class_game_database_1_1_texture_info' kindref='compound'&gt;TextureInfo&lt;/ref&gt; that are contained within folders of given name</para></member><member name="M:GameDatabase.GetAudioClip(string)"><para>Retrieves AudioClip of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetAudioFile(string)"><para>Retrieves AudioClip of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetComponent(System.Type)"></member><member name="M:GameDatabase.GetComponent"></member><member name="M:GameDatabase.GetComponent(string)"></member><member name="M:GameDatabase.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:GameDatabase.GetComponentInChildren(System.Type)"></member><member name="M:GameDatabase.GetComponentInChildren"></member><member name="M:GameDatabase.GetComponentInChildren(System.Boolean)"></member><member name="M:GameDatabase.GetComponentInParent(System.Type)"></member><member name="M:GameDatabase.GetComponentInParent"></member><member name="M:GameDatabase.GetComponents(System.Type)"></member><member name="M:GameDatabase.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:GameDatabase.GetComponents(List)"></member><member name="M:GameDatabase.GetComponents"></member><member name="M:GameDatabase.GetComponentsInChildren(System.Type)"></member><member name="M:GameDatabase.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:GameDatabase.GetComponentsInChildren(System.Boolean)"></member><member name="M:GameDatabase.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:GameDatabase.GetComponentsInChildren"></member><member name="M:GameDatabase.GetComponentsInChildren(List)"></member><member name="M:GameDatabase.GetComponentsInParent(System.Type)"></member><member name="M:GameDatabase.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:GameDatabase.GetComponentsInParent(System.Boolean)"></member><member name="M:GameDatabase.GetComponentsInParent(System.Boolean,List)"></member><member name="M:GameDatabase.GetComponentsInParent"></member><member name="M:GameDatabase.GetConfigNode(string)"><para>Retrieves &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetConfigNodes(string)"><para>Retrieves all ConfigNodes of the given type name. Returns empty array if none found.</para></member><member name="M:GameDatabase.GetConfigNodes(string,string)"><para>Returns all ConfigNodes in a given url heirarchy of given type name. Returns empty array if none found.</para></member><member name="M:GameDatabase.GetConfigs(string)"><para>Returns all UrlConfig objects of given type name. Returns empty array if none found.</para></member><member name="M:GameDatabase.GetHashCode"></member><member name="M:GameDatabase.GetInstanceID"></member><member name="M:GameDatabase.GetMergedConfigNodes(string,System.Boolean)"><para>Merge all the root config nodes with the given name into a single one.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;nodeName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Name of the config node(s) to merge.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mergeChildren&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Whether child nodes should also be merged.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:GameDatabase.GetModel(string)"><para>Retrieves model (GameObject) of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetModelFile(string)"><para>Retrieves model (GameObject) of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetModelFile(UnityEngine.GameObject)"><para>Retrieves model (GameObject) of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetModelIn(string)"><para>Retrieves first model (GameObject) in a given url directory. Returns null if not found.</para></member><member name="M:GameDatabase.GetModelPrefab(string)"><para>Retrieves model (GameObject) of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetModelPrefabIn(string)"><para>Retrieves first model (GameObject) in a given url directory. Returns null if not found.</para></member><member name="M:GameDatabase.GetShader(string)"><para>Retrieves Shader of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetTexture(string,System.Boolean)"><para>Retrieves Texture2D of given url. Returns null if not found.</para><remarks>- Loads a texture for universal use in GUI and parts.  url is the relative path from GameData directory.  asNormalMap should generally be false, unless you are specifically loading a normal map for a part.  Textures should be cached by Unity, so in theory, calling this function twice should return the originally loaded instance.  Making a duplicate would require use of the GameObject.Instantiate() function.</remarks></member><member name="M:GameDatabase.GetTextureFile(string)"><para>Retrieves file of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetTextureIn(string,string,System.Boolean)"><para>Retrieves Texture in a given url directory with given name. Returns null if not found.</para></member><member name="M:GameDatabase.GetTextureInfo(string)"><para>Retrieves Texture2D of given url. Returns null if not found.</para></member><member name="M:GameDatabase.GetTextureInfoIn(string,string)"><para>Retrieves Texture in a given url directory with given name. Returns null if not found.</para></member><member name="M:GameDatabase.GetType"></member><member name="M:GameDatabase.Invoke(string,System.Single)"></member><member name="M:GameDatabase.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:GameDatabase.IsInvoking(string)"></member><member name="M:GameDatabase.IsInvoking"></member><member name="M:GameDatabase.IsReady"></member><member name="M:GameDatabase.LoadEmpty"><para>Initialized the Database in an empty state, so it is active but doesn&amp;apos;t start off the loading process.</para><para>&amp;lt; create the directory structure</para></member><member name="M:GameDatabase.LoadWeight"></member><member name="M:GameDatabase.MemberwiseClone"></member><member name="M:GameDatabase.ProgressFraction"></member><member name="M:GameDatabase.ProgressTitle"></member><member name="M:GameDatabase.RemoveAudioClip(string)"><para>Removes audio of given url. returns true if successful, false if not found</para></member><member name="M:GameDatabase.RemoveModel(string)"><para>Removes Model of given url. returns true if successful, false if not found</para></member><member name="M:GameDatabase.RemoveShader(string)"><para>Removes audio of given url. returns true if successful, false if not found</para></member><member name="M:GameDatabase.RemoveTexture(string)"><para>Removes Texture of given url. returns true if successful, false if not found</para></member><member name="M:GameDatabase.ReplaceTexture(string,GameDatabase+TextureInfo)"><para>Removes Texture of given url. returns true if successful, false if not found</para></member><member name="M:GameDatabase.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.SendMessage(string,object)"></member><member name="M:GameDatabase.SendMessage(string)"></member><member name="M:GameDatabase.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.SendMessageUpwards(string,object)"></member><member name="M:GameDatabase.SendMessageUpwards(string)"></member><member name="M:GameDatabase.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:GameDatabase.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:GameDatabase.StartCoroutine(string,object)"></member><member name="M:GameDatabase.StartCoroutine(string)"></member><member name="M:GameDatabase.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:GameDatabase.StartLoad"></member><member name="M:GameDatabase.StopAllCoroutines"></member><member name="M:GameDatabase.StopCoroutine(string)"></member><member name="M:GameDatabase.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:GameDatabase.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:GameDatabase.ToString"></member><member name="M:GameDatabase.BitmapToUnityNormalMap(UnityEngine.Texture2D)"></member><member name="M:GameDatabase.CompileConfig(ConfigNode)"></member><member name="M:GameDatabase.LoadLoaderInfo(ConfigNode,System.Collections.Generic.Dictionary)"></member><member name="M:GameDatabase.SaveLoaderInfo(ConfigNode,System.Collections.Generic.Dictionary)"></member><member name="M:GameDatabase.UpdateLoaderInfo(System.Collections.Generic.Dictionary)"></member><member name="M:GameDatabase.#ctor"></member><member name="T:GameEvents"><para>Static manager class which contains the global event system</para><remarks>- GameEvents are EventData or EventVoid methods called when certain conditions are met.  Many include some relevant data on the objects affected when they are triggered.  Use:</remarks><c>GameEvents.desiredEvent.Add(yourMethod);</c><remarks>and</remarks><c>GameEvents.desiredEvent.Remove(yourMethod);</c><remarks>to add and remove methods from a list of methods to be called when the event is triggered.  Methods are generally added in your object's Start or Awake method and generally removed in your object's OnDestroy method.  Be sure not add methods multiple times withoud destroying them between additions.</remarks></member><member name="F:GameEvents.Modifiers"></member><member name="F:GameEvents.onActiveJointNeedUpdate"><para>Fired by components such as grapples and docking modules, before setting parts on the vessel to their pristine positions, so active joints can update their coords before operations involving orgPos and orgRot happen.</para><remarks>- Triggered when a vessel docks or attaches with the grappling device; fires twice, once for each vessel</remarks></member><member name="F:GameEvents.OnAnimationGroupStateChanged"><para>Called when &lt;ref refid='class_module_animation_group' kindref='compound'&gt;ModuleAnimationGroup&lt;/ref&gt; changes states. Bool reflects the deploy state.</para></member><member name="F:GameEvents.OnAppFocus"><para>Even fired whenever the application gains or loses window focus</para></member><member name="F:GameEvents.onAsteroidSpawned"><para>Event called when an asteroid is spawned.</para></member><member name="F:GameEvents.onAttemptEva"><para>Fired when attempting an EVA. Transform is the airlock transform. Event handler should set FlightEVA.fetch.overrideEVA = true to cancel the EVA.</para></member><member name="F:GameEvents.onAttemptTransfer"><para>Fired when attempting a crew transfer. Event handler should set the hatch controller.overrideTransfer as needed.</para></member><member name="F:GameEvents.OnCameraChange"><para>Called after switching to a different camera (external, internal, map...)</para></member><member name="F:GameEvents.onCollision"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when two parts collide</remarks></member><member name="F:GameEvents.OnCollisionEnhancerHit"><para>Event called when a part has a collision enhancer hit.</para></member><member name="F:GameEvents.OnCollisionIgnoreUpdate"></member><member name="F:GameEvents.onCommandSeatInteraction"><para>Event fired when an EVA kerbal enters, exits, or loads into a command seat</para></member><member name="F:GameEvents.onCommandSeatInteractionEnter"><para>Event fired just before a EVA kerbal enters, exits, or loads into a command seat</para></member><member name="F:GameEvents.onCrash"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when a part or vessel crashes into the terrain</remarks></member><member name="F:GameEvents.onCrashSplashdown"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when a part crashes into the ocean</remarks></member><member name="F:GameEvents.onCrewBoardVessel"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when an EVA Kerbal boards a vessel</remarks></member><member name="F:GameEvents.onCrewKilled"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered whenever a Kerbal dies; either on EVA or in a crashing vessel</remarks></member><member name="F:GameEvents.OnCrewmemberHired"><para>Event called whenever an applicant is hired at the Astronaut Complex. (second parameter is the new active crew count)</para><remarks>- Triggered when a Kerbal is hired</remarks></member><member name="F:GameEvents.OnCrewmemberLeftForDead"><para>Event called whenever a MIA applicant is left for dead at the Astronaut Complex. (second parameter is the new active crew count)</para></member><member name="F:GameEvents.OnCrewmemberSacked"><para>Event called whenever an applicant is sacked at the Astronaut Complex. (second parameter is the new active crew count)</para><remarks>- Triggered when  Kerbal is sacked</remarks></member><member name="F:GameEvents.onCrewOnEva"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when a Kerbal goes on EVA</remarks></member><member name="F:GameEvents.onCrewTransferPartListCreated"><para>Event fired after set of valid and invalid parts for crew transfer is created but before they are used. First is valid, second is full parts.</para></member><member name="F:GameEvents.onCrewTransferred"><para>Event fired right after a crewmember is moved from one part to another.</para><remarks>- Triggers when a Kerbal transfers from one part to another (occurs AFTER the transfer)</remarks></member><member name="F:GameEvents.onCrewTransferSelected"><para>Hook for any other things to intercept a crew transfer and do something themselves and/or cancel it (by setting canTransfer to false).</para></member><member name="F:GameEvents.onCustomWaypointLoad"><para>Fired when loading a custom Waypoint, before looking at the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;. Pass the Waypoint and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;.</para></member><member name="F:GameEvents.onCustomWaypointSave"><para>Fired when saving a custom Waypoint, right before finishing. Pass the Waypoint and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;.</para></member><member name="F:GameEvents.onDominantBodyChange"><para>Event called before the dominant body (Sphere of influence) will change &amp;apos;from&amp;apos; the old &amp;apos;to&amp;apos; the new dominant body, for the active vessel.</para><remarks>- Triggered when changing SOI; both objects return the new dominant CelestialBody  See also onVesselSOIChanged</remarks></member><member name="F:GameEvents.onEditorConstructionModeChange"></member><member name="F:GameEvents.onEditorLoad"></member><member name="F:GameEvents.onEditorNewShipDialogDismiss"></member><member name="F:GameEvents.onEditorPartDeleted"></member><member name="F:GameEvents.onEditorPartEvent"></member><member name="F:GameEvents.onEditorPartPicked"></member><member name="F:GameEvents.onEditorPartPlaced"></member><member name="F:GameEvents.onEditorPodDeleted"></member><member name="F:GameEvents.onEditorPodPicked"><para>When picking the first rootpart after pressing new in the editor</para></member><member name="F:GameEvents.onEditorPodSelected"><para>When the rootpart is selected in editor</para></member><member name="F:GameEvents.onEditorRedo"></member><member name="F:GameEvents.onEditorRestart"></member><member name="F:GameEvents.onEditorRestoreState"></member><member name="F:GameEvents.onEditorScreenChange"></member><member name="F:GameEvents.onEditorSetBackup"></member><member name="F:GameEvents.onEditorShipModified"><para>Event called whenever the ship in the Editor is modified in any way</para><remarks>- Triggered when any part is added or removed from a vessel in the editor; also triggered when any tweakable settings are changed; also when undo is called</remarks></member><member name="F:GameEvents.onEditorShowPartList"></member><member name="F:GameEvents.onEditorSnapModeChange"></member><member name="F:GameEvents.onEditorStarted"></member><member name="F:GameEvents.onEditorSymmetryCoordsChange"></member><member name="F:GameEvents.onEditorSymmetryMethodChange"></member><member name="F:GameEvents.onEditorSymmetryModeChange"></member><member name="F:GameEvents.onEditorUndo"></member><member name="F:GameEvents.OnEfficiencyChange"><para>Called when something changes the efficiency of anything deriving from &lt;ref refid='class_base_converter' kindref='compound'&gt;BaseConverter&lt;/ref&gt;</para></member><member name="F:GameEvents.OnExperimentDeployed"><para>Event called after experiment is deployed, but before submission.</para></member><member name="F:GameEvents.onFacilityContextMenuDespawn"></member><member name="F:GameEvents.onFacilityContextMenuSpawn"></member><member name="F:GameEvents.onFairingsDeployed"><para>Event called when Procedural Fairings are deployed on the active vessel.</para></member><member name="F:GameEvents.onFlagPlant"><para>Event fired after a flag is planted with the flag vessel as the data</para><remarks>- When a flag is planted by an EVA Kerbal</remarks></member><member name="F:GameEvents.onFlagSelect"><para>Event called after a flag is selected for the space program.</para><remarks>- Triggered when a flag is selected from the space center's flag pole</remarks></member><member name="F:GameEvents.OnFlightCameraAngleChange"><para>Called when the flight camera changes angles</para></member><member name="F:GameEvents.OnFlightCameraModeChange"><summary>Triggers whenever the CameraMode in the CameraManager class changes</summary></member><member name="F:GameEvents.OnFlightGlobalsReady"><para>Fired when FG sets its ready flag</para></member><member name="F:GameEvents.OnFlightLogRecorded"><para>Event called after a vessel records a new flight log entry.</para></member><member name="F:GameEvents.onFlightReady"><para>Event called after game is loaded, all vessels initialized etc. &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; ready to fly.</para><remarks>- Triggered when a vessel is fully loaded</remarks></member><member name="F:GameEvents.OnFlightUIModeChanged"></member><member name="F:GameEvents.onFloatingOriginShift"><para>Event called whenever &lt;ref refid='class_floating_origin' kindref='compound'&gt;FloatingOrigin&lt;/ref&gt; shifts (parameter contains the last offset and the last additional out-of-Krakensbane-frame offset)</para><remarks>- Deprecated?</remarks></member><member name="F:GameEvents.OnFundsChanged"><para>Event called whenever the space program&amp;apos;s Funds changes</para><remarks>- When Funds level changes, returns total Funds amount</remarks></member><member name="F:GameEvents.OnGameDatabaseLoaded"><para>Event called after &lt;ref refid='class_game_database' kindref='compound'&gt;GameDatabase&lt;/ref&gt; finishes loading (or reloading).</para></member><member name="F:GameEvents.onGamePause"><para>Event called before the game is paused</para><remarks>- When the game is paused</remarks></member><member name="F:GameEvents.onGameSceneLoadRequested"><para>Event called after a scene change is requested. But before the scene actually changes.</para><remarks>- Triggered upon scene change requests; returns the target GameScene</remarks></member><member name="F:GameEvents.onGameSceneSwitchRequested"><para>Event called after a scene change is requested. But before the scene actually changes.</para><remarks>- Is triggered just prior to a game scene change</remarks></member><member name="F:GameEvents.OnGameSettingsApplied"><para>Event fired whenever new settings are applied from the settings screen or mini settings screen (in flight)</para><remarks>- When Game Settings are applied in the main settings menu, or the in-game settings menu</remarks></member><member name="F:GameEvents.onGameStateCreated"><para>Event called after the game state is created.</para><remarks>- When a game is first created or loaded; returns the Game object</remarks></member><member name="F:GameEvents.onGameStateLoad"><para>Event whilst game is loading with confignode of game</para><remarks>- Triggered on loading a game, returns the game's full ConfigNode from the persistent file</remarks></member><member name="F:GameEvents.onGameStatePostLoad"><para>Event called after game is loaded</para></member><member name="F:GameEvents.onGameStateSave"><para>Event whilst game is saving with confignode of game</para><remarks>- Triggered on saving a game, returns the game's full ConfigNode from the persistent file</remarks></member><member name="F:GameEvents.onGameStateSaved"><para>Event called after the game is saved.</para><remarks>- Triggered when a game is saved, returns the Game object;</remarks></member><member name="F:GameEvents.onGameUnpause"><para>Event called before the game is un-paused</para><remarks>- When the game is unpaused</remarks></member><member name="F:GameEvents.onGUIAdministrationFacilityDespawn"></member><member name="F:GameEvents.onGUIAdministrationFacilitySpawn"></member><member name="F:GameEvents.onGUIApplicationLauncherDestroyed"><summary>When the application launcher (toolbar) is closed</summary></member><member name="F:GameEvents.onGUIApplicationLauncherReady"><summary>Called when the ApplicationLauncher toolbar is ready to have buttons added to it.</summary></member><member name="F:GameEvents.onGUIApplicationLauncherUnreadifying"></member><member name="F:GameEvents.onGUIAstronautComplexDespawn"><summary>When the astronaut complex window closes</summary></member><member name="F:GameEvents.onGUIAstronautComplexSpawn"><summary>When the astronaut complex window opens; from the space center or editor</summary></member><member name="F:GameEvents.onGUIEditorToolbarReady"></member><member name="F:GameEvents.onGUIEngineersReportDestroy"></member><member name="F:GameEvents.onGUIEngineersReportReady"></member><member name="F:GameEvents.onGUIKSPediaDespawn"><summary>Triggers when the KSPedia window is closed</summary></member><member name="F:GameEvents.onGUIKSPediaSpawn"><summary>Triggers when the KSPedia window is opened</summary></member><member name="F:GameEvents.onGUILaunchScreenDespawn"><summary>When the vessel selection screen is closed or a vessel is selected and launched</summary></member><member name="F:GameEvents.onGUILaunchScreenSpawn"><para>Event called when the vessel launch dialog spawns</para><remarks>- When the launch screen (that allows you to view and select available vessels) is opened; after selecting the launchpad/runway from the space center.  See VesselSpawnInfo for more on what is returned by this callback.</remarks></member><member name="F:GameEvents.onGUILaunchScreenVesselSelected"><para>Event fired when a vessel is selected in the launch dialog&amp;apos;s craft list</para><remarks>- When a vessel is selected from the vessel selection screen at the space center</remarks></member><member name="F:GameEvents.onGUILock"></member><member name="F:GameEvents.onGUIMessageSystemReady"><summary>When the application launcher's message button is ready</summary></member><member name="F:GameEvents.onGUIMissionControlDespawn"><summary>When the mission control center window closes</summary></member><member name="F:GameEvents.onGUIMissionControlSpawn"><summary>When the mission control center window opens</summary></member><member name="F:GameEvents.onGUIPrefabLauncherReady"><summary>When the application launcher (toolbar) loads; triggers before onGUIApplicationLauncherReady and onGUIMessageSystemReady</summary></member><member name="F:GameEvents.onGUIRecoveryDialogDespawn"><summary>When the recovery dialog window closes</summary></member><member name="F:GameEvents.onGUIRecoveryDialogSpawn"><summary>When the recovery dialog window opens</summary></member><member name="F:GameEvents.onGUIRnDComplexDespawn"><summary>When the R&amp;amp;D center window closes</summary></member><member name="F:GameEvents.onGUIRnDComplexSpawn"><summary>When the R&amp;amp;D center window opens</summary></member><member name="F:GameEvents.onGUIUnlock"></member><member name="F:GameEvents.onHideUI"><summary>Called when the player hides the UI by pressing F2. Register for this callback (and for onShowUI) so that you can hide your UI too.</summary></member><member name="F:GameEvents.onInputLocksModified"><para>Event fired when the input lock mask was modified. Use to update components that react to being locked off, like disabling buttons and such.</para><remarks>- Triggered when input locks are activated or deactivated; when putting the mouse over one window/button locks the controls of another window/button</remarks></member><member name="F:GameEvents.onItemTransferStarted"><para>Hook so things can change the just-started item transfer UI thingie</para></member><member name="F:GameEvents.OnIVACameraKerbalChange"><para>Called when the IVA camera changes kerbals</para><para>Does not get called when switching to a fixed internal viewpoint (&lt;ref refid='class_internal_camera' kindref='compound'&gt;InternalCamera&lt;/ref&gt; mode) or swithcing out of IVA. Use OnCameraChange for that</para><remarks>- This event is triggered every time the camera switches to another Kerbal in IVA mode</remarks></member><member name="F:GameEvents.onJointBreak"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Deprecated? Use onPartJointBreak</remarks></member><member name="F:GameEvents.onKerbalAdded"><para>Fired when a kerbal is added to the roster</para><remarks>- Triggered when a new Kerbal is added in the astronaut complex scene; also triggered when a rescue Kerbal contract is generated</remarks></member><member name="F:GameEvents.onKerbalInactiveChange"><para>Fired when a kerbal&amp;apos;s &amp;apos;active&amp;apos; flag changes</para></member><member name="F:GameEvents.onKerbalLevelUp"><para>Fired when a kerbal levels up</para></member><member name="F:GameEvents.onKerbalNameChange"><para>Fired when a kerbal changes from one name to another</para></member><member name="F:GameEvents.onKerbalPassedOutFromGeeForce"><para>Fired when a kerbal becomes inactive due to gee forces</para></member><member name="F:GameEvents.onKerbalRemoved"><para>Fired when a kerbal is removed from the roster</para><remarks>- Triggered when a Kerbal is removed from the roster in the astronaut complex; also triggered when a rescue Kerbal contract is failed, expires, or declined</remarks></member><member name="F:GameEvents.onKerbalStatusChange"><para>Fired when a kerbal changes from one status</para><remarks>- Triggered when the ProtoCrewMember.RosterStatus changes; usually upon vessel recovery, new crew addition, or death; returns the ProtoCrewMember and its old and new status</remarks></member><member name="F:GameEvents.onKerbalTypeChange"><para>Fired when a kerbal changes from one kerbal type to another</para><remarks>- Triggered when the ProtoCrewMember.KerbalType changes; KerbalTypes are possibly not fully implemented; occurs upon hiring crew or rescuing Kerbal</remarks></member><member name="F:GameEvents.onKnowledgeChanged"><para>Event called after an object has changed it&amp;apos;s knowledge situation. (I.e. &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; tracking starts and changes knowledge of state vectors to true)</para><remarks>- Triggered upon starting or stopping asteroid tracking, or when approaching an asteroid</remarks></member><member name="F:GameEvents.onKrakensbaneDisengage"><para>Event called when &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; turns off and returns velocities to the rigidbodies (parameter contains the velocity change)</para><remarks>- Triggered when a vessel's velocity falls below ~750m/s</remarks></member><member name="F:GameEvents.onKrakensbaneEngage"><para>Event called when &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; kicks in from a non-speeding reference frame (parameter contains the velocity change)</para><remarks>- Triggered when a vessel's velocity reaches ~750m/s</remarks></member><member name="F:GameEvents.OnKSCFacilityUpgraded"></member><member name="F:GameEvents.OnKSCFacilityUpgrading"></member><member name="F:GameEvents.OnKSCStructureCollapsed"></member><member name="F:GameEvents.OnKSCStructureCollapsing"></member><member name="F:GameEvents.OnKSCStructureRepaired"></member><member name="F:GameEvents.OnKSCStructureRepairing"></member><member name="F:GameEvents.onLanguageSwitched"><para>Fired when language is switched</para></member><member name="F:GameEvents.onLaunch"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when launching by activating the first stage</remarks></member><member name="F:GameEvents.onLevelWasLoaded"><para>Event called after a scene is loaded.</para><remarks>- Triggered when a new scene is loaded; returns that GameScene; occurs after onGameSceneLoadRequested</remarks></member><member name="F:GameEvents.onLevelWasLoadedGUIReady"><para>Event called after a scene is loaded and UIManager is instantiated (where applicable). Use this when you absolutely want to make sure everything stock is loaded.</para></member><member name="F:GameEvents.OnMapEntered"><summary>Triggers when Map mode is entered in flight scene</summary></member><member name="F:GameEvents.OnMapExited"><summary>Triggers when Map mode is exited in flight scene</summary></member><member name="F:GameEvents.OnMapFocusChange"></member><member name="F:GameEvents.OnMapViewFiltersModified"></member><member name="F:GameEvents.onMissionFlagSelect"><para>Event called after a flag is selected for the mission.</para><remarks>- Triggered when selecting a new flag from in the editor; returns the flag texture's GameDatabse URL</remarks></member><member name="F:GameEvents.onNewVesselCreated"><para>Event called when new vessels are spawned into the game after the scene is loaded. (e.g., an asteroid being &amp;quot;detected&amp;quot; or a contract creating a vessel).</para><remarks>- Triggered when spawning a new asteroid or a new Kerbal for a rescue Kerbal contract</remarks></member><member name="F:GameEvents.OnOrbitalSurveyCompleted"><para>Called when &lt;ref refid='class_module_orbital_surveyor' kindref='compound'&gt;ModuleOrbitalSurveyor&lt;/ref&gt; finishes a survey of a body.</para></member><member name="F:GameEvents.onOverG"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event.</para></member><member name="F:GameEvents.onOverheat"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when a part overheats; returns an EventReport with the part name</remarks></member><member name="F:GameEvents.onOverPressure"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event.</para></member><member name="F:GameEvents.onPartActionUICreate"><para>Event called when a part has its action UI opened.</para><remarks>- Triggered when right-clicking a part; returns that part; triggered every time a part event is selected</remarks></member><member name="F:GameEvents.onPartActionUIDismiss"><para>Event called when a part has its action UI closed.</para><remarks>- Triggered when closing the right-click menu of a part</remarks></member><member name="F:GameEvents.onPartAttach"><para>Event called before a &amp;apos;host&amp;apos; part is attached to a &amp;apos;target&amp;apos; part (in editor and flight).</para><remarks>- Triggered when adding a part in the editor, when docking, and when another vessel comes into range and is loaded; returns the part and its new parent part</remarks></member><member name="F:GameEvents.onPartCouple"><para>Event called before a part coupling is occuring &amp;apos;from&amp;apos; one part &amp;apos;to&amp;apos; another part.</para><remarks>- Triggered when a docking port or asteroid grappling device attaches; returns the host part and the target part</remarks></member><member name="F:GameEvents.onPartCrossfeedStateChange"><para>Fired when the crossfeed state of a &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; changes</para></member><member name="F:GameEvents.onPartDestroyed"><para>Event called when a part is destroyed, regardless of whether it died or not (as might happen when leaving a scene).</para><remarks>- Triggered when a part object's OnDestroy method is called; occurs any time a part or vessel is unloaded, ie scene changes or vessel moving out of loading distance</remarks></member><member name="F:GameEvents.onPartDie"><para>Event called before a part is destroyed, after it&amp;apos;s been marked dead. Just after &lt;ref refid='class_part_1ab61e36a6bbdeaedca0360cfe8066aef2' kindref='member'&gt;Part.OnJustAboutToBeDestroyed()&lt;/ref&gt;.</para><remarks>- Triggered when a part is destroyed, usually by exploding/crashing</remarks></member><member name="F:GameEvents.onPartExplode"><para>Event called when a part is destroyed violently, such as when crashing or overheating. Event happens before &lt;ref refid='class_part_1a908d070b8770abfbebf7f488ce9ef000' kindref='member'&gt;Part.Die&lt;/ref&gt; is called.</para><remarks>- Triggered when a part explodes, usually due to crashing into the ground or into another part; also triggered by a part overheating and exploding</remarks></member><member name="F:GameEvents.onPartFuelLookupStateChange"><para>Fired when the crossfeed state of a fuel line (or other thing that changes fuel lookup targets) changes &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; are part drawn from (the target) and part drawn to (the list host), bool is whether it&amp;apos;s bidirectional</para></member><member name="F:GameEvents.onPartJointBreak"><para>Event Called whenever a part joint breaks or is destroyed for any reason.</para><remarks>- Triggered when a part decouples, undocks, a grappling device undocks, a strut breaks, a part is destroyed, or when a part is removed in the editor</remarks></member><member name="F:GameEvents.onPartJointSet"><para>Event Called whenever a part joint configuration is reset.</para></member><member name="F:GameEvents.onPartLadderEnter"><para>Fired when a kerbal grabs a ladder attached to a part</para></member><member name="F:GameEvents.onPartLadderExit"><para>Fired when a kerbal leaves a ladder attached to a part</para></member><member name="F:GameEvents.OnPartLoaderLoaded"><para>Event called after &lt;ref refid='class_part_loader' kindref='compound'&gt;PartLoader&lt;/ref&gt; finishes loading (or reloading).</para></member><member name="F:GameEvents.onPartPack"><para>Event called when a part is being packed for rails (use onVesselGoOnRails if you only need one call for the whole vessel packing up)</para><remarks>- Triggered when a part goes on rails (enters timewarp) or exits loading distance</remarks></member><member name="F:GameEvents.onPartPriorityChanged"><para>Fired when a part&amp;apos;s staging index or priority offset changes.</para></member><member name="F:GameEvents.OnPartPurchased"><para>Fired when a part is purchased so funding can listen for it</para><remarks>- Triggered when purchasing a part in the R&amp;amp;D center; currently (KSP 0.24.2) called for all parts in a tech node when researching that node</remarks></member><member name="F:GameEvents.onPartRemove"><para>Event called before a &amp;apos;host&amp;apos; part is removed from a &amp;apos;target&amp;apos; part (in editor and flight).</para><remarks>- Triggered when removing a part in the editor</remarks></member><member name="F:GameEvents.onPartResourceEmptyFull"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from 0 to full</para><remarks>- This event fires if you are transferring resources between parts and the amount to transfer in is more than the capacity of the part receiving the resource and it was empty before the transfer begun (resulting in the receiving part being full).</remarks></member><member name="F:GameEvents.onPartResourceEmptyNonempty"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from 0 to &amp;gt;0 (but not full)</para><remarks>- This event fires if you are transferring resources between parts and the amount to transfer in is less than the capacity of the part receiving the resource and it was empty before the transfer begun.</remarks></member><member name="F:GameEvents.onPartResourceFlowModeChange"><para>Fired when the flow mode of a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt; changes (does not appear to ever happen)</para></member><member name="F:GameEvents.onPartResourceFlowStateChange"><para>Fired when the flow state of a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt; changes</para></member><member name="F:GameEvents.onPartResourceFullEmpty"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from full to 0</para><remarks>- This event fires if you are transferring resources between parts and the amount transfered results in the from part going from full capacity to empty capacity.</remarks></member><member name="F:GameEvents.onPartResourceFullNonempty"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from Full to &amp;gt;0</para><remarks>- This event fires if you are transferring resources between parts and the amount transfered results in the from part going from full capacity and it still has some resource left in it at the end of the transfer.</remarks></member><member name="F:GameEvents.onPartResourceListChange"><para>Called when a partresource is added or removed from a part&amp;apos;s resoruce list</para></member><member name="F:GameEvents.onPartResourceNonemptyEmpty"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from &amp;gt;0 to empty</para><remarks>- This event fires if you are transferring resources between parts and the amount transferredis less than the capacity of the part receiving the resource and it was not  empty before the transfer begun.</remarks></member><member name="F:GameEvents.onPartResourceNonemptyFull"><para>Fired when a &lt;ref refid='class_part_resource' kindref='compound'&gt;PartResource&lt;/ref&gt;&amp;apos;s amount goes from &amp;gt;0 (but not full) to full</para><remarks>- This event fires if you are transferring resources between parts and the receiving part had some resource to begin with and it still has some resource left in it at the end of the trasfer (the receiving part is now full).</remarks></member><member name="F:GameEvents.onPartUndock"><para>Event called before a &amp;apos;part&amp;apos; is undocked.</para><remarks>- Triggered upon undock event/action; not triggered by a docking node's decouple event; also triggered by asteroid grappling device's release event</remarks></member><member name="F:GameEvents.onPartUnpack"><para>Event called when a part is being unpacked from rails (use onVesselGoOffRails if you only need one call for the whole vessel unpacking)</para><remarks>- Triggered when a part goes off rails (exits timewarp) or comes into loading distance</remarks></member><member name="F:GameEvents.OnPartUpgradePurchased"><para>Fired when a part upgrade is purchased so funding can listen for it</para></member><member name="F:GameEvents.onPhysicsEaseStart"><para>Called when the &lt;ref refid='class_vessel_precalculate' kindref='compound'&gt;VesselPrecalculate&lt;/ref&gt; component engages physics easing.</para></member><member name="F:GameEvents.onPhysicsEaseStop"><para>Called when the &lt;ref refid='class_vessel_precalculate' kindref='compound'&gt;VesselPrecalculate&lt;/ref&gt; component ends physics easing.</para></member><member name="F:GameEvents.onPlanetariumTargetChanged"><para>Event called after the &lt;ref refid='class_map_view' kindref='compound'&gt;MapView&lt;/ref&gt; target changes. &lt;ref refid='class_map_object' kindref='compound'&gt;MapObject&lt;/ref&gt; will be null when no target is selected (can only happen in tracking station). Possible issue: Fires twice when entering &lt;ref refid='class_map_view' kindref='compound'&gt;MapView&lt;/ref&gt; for the first time (if you exit mapview and then enter again, it fires once)</para><remarks>- Triggered when the map view or tracking station camera focuses on a new object; this can be a Celestial Body or vessel; also triggered when switching to or loading a new vessel</remarks></member><member name="F:GameEvents.OnPQSCityLoaded"><para>Simple event called when a &lt;ref refid='class_p_q_s_city' kindref='compound'&gt;PQSCity&lt;/ref&gt; comes within vessel loading range of the active vessel.</para></member><member name="F:GameEvents.OnPQSCityStarting"><para>Simple event called when a &lt;ref refid='class_p_q_s_city' kindref='compound'&gt;PQSCity&lt;/ref&gt; is starting up.</para></member><member name="F:GameEvents.OnPQSCityUnloaded"><para>Simple event called when a &lt;ref refid='class_p_q_s_city' kindref='compound'&gt;PQSCity&lt;/ref&gt; leaves vessel loading range of the active vessel.</para></member><member name="F:GameEvents.OnPQSStarting"><para>Fired just before a &lt;ref refid='class_p_q_s' kindref='compound'&gt;PQS&lt;/ref&gt; sphere starts up.</para></member><member name="F:GameEvents.OnProgressAchieved"><para>Event called every time the progress node hits its completion criteria, even if it&amp;apos;s been completed before. Won&amp;apos;t modify saved &amp;apos;firsts&amp;apos;.</para><remarks>- Triggered when a ProgressNode and all of its subNodes are completed.  See also OnProgressReached and OnProgressComplete</remarks></member><member name="F:GameEvents.OnProgressComplete"><para>Event called when a progress node hits &amp;quot;Completed&amp;quot; status. After this is called, the node won&amp;apos;t modify its save data anymore, and will only fire &amp;apos;achieved&amp;apos; events for repeat ocurrences.</para><remarks>- Triggered when all sub ProgressNodes within a given ProgressNode are completed; records the UT of node completion and returns the ProgressNode  See the ProgressTracking module in the persistent.sfs file for more on how ProgressNodes are setup and saved.  If the ProgressNode is completed upon first achievement this will also trigger OnProgressReached.  See also OnProgressReached and OnProgressAchieved</remarks></member><member name="F:GameEvents.onProgressNodeLoad"><para>Fired when loading a Progress Node, before looking at the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;. Pass the &lt;ref refid='class_progress_node' kindref='compound'&gt;ProgressNode&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;</para></member><member name="F:GameEvents.onProgressNodeSave"><para>Fired when saving a Progress Node, right before finishing. Pass the &lt;ref refid='class_progress_node' kindref='compound'&gt;ProgressNode&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;</para></member><member name="F:GameEvents.OnProgressReached"><para>Event called when a progress node hits &amp;quot;Reached&amp;quot; status. At this point it will start getting saved.</para><remarks>- Triggered when a ProgressNode is first reached but not completed; records the UT of node achievement and returns the ProgressNode.  For instance, when a vessels first enters the SOI of a new Celestial Body the event will trigger and a "reached" entry will be added to the persistent.sfs file.  If a ProgressNode is completed at the same time it is reached (ie has no ProgressNode subNodes) OnProgressCompelete will be triggered at the same time  See the ProgressTracking module in the persistent.sfs file for more on how ProgressNodes are setup and saved.  See also OnProgressComplete and OnProgressAchieved</remarks></member><member name="F:GameEvents.onProtoCrewMemberLoad"><para>Fired when loading a &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt;, before looking at the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;. Pass the &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;, or null if copying from another PCM.</para></member><member name="F:GameEvents.onProtoCrewMemberSave"><para>Fired when saving a &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt;, right before finishing. Pass the &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt;.</para></member><member name="F:GameEvents.onProtoPartModuleSnapshotLoad"><para>Fired when loading a &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt;, before the node is read. Pass &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if creating the &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt;).</para></member><member name="F:GameEvents.onProtoPartModuleSnapshotSave"><para>Fired when saving a &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt;, right before finishing. Pass &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if going from &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt; to this).</para></member><member name="F:GameEvents.onProtoPartSnapshotLoad"><para>Fired when loading a &lt;ref refid='class_proto_part_snapshot' kindref='compound'&gt;ProtoPartSnapshot&lt;/ref&gt;, before the node is read. Pass &lt;ref refid='class_proto_part_snapshot' kindref='compound'&gt;ProtoPartSnapshot&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if creating the &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt;).</para></member><member name="F:GameEvents.onProtoPartSnapshotSave"><para>Fired when saving a &lt;ref refid='class_proto_part_snapshot' kindref='compound'&gt;ProtoPartSnapshot&lt;/ref&gt;, right before finishing. Pass &lt;ref refid='class_proto_part_snapshot' kindref='compound'&gt;ProtoPartSnapshot&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if creating from &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt;).</para></member><member name="F:GameEvents.onProtoVesselLoad"><para>Fired when loading a &lt;ref refid='class_proto_vessel' kindref='compound'&gt;ProtoVessel&lt;/ref&gt;, before the node is read. Pass &lt;ref refid='class_proto_vessel' kindref='compound'&gt;ProtoVessel&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if pushing to vessel from a loaded &lt;ref refid='class_proto_vessel' kindref='compound'&gt;ProtoVessel&lt;/ref&gt;).</para></member><member name="F:GameEvents.onProtoVesselSave"><para>Fired when saving a &lt;ref refid='class_proto_vessel' kindref='compound'&gt;ProtoVessel&lt;/ref&gt;, right before finishing. Pass &lt;ref refid='class_proto_vessel' kindref='compound'&gt;ProtoVessel&lt;/ref&gt; and the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; (or null if creating from &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt;).</para></member><member name="F:GameEvents.OnReputationChanged"><para>Event called whenever the space program&amp;apos;s reputation changes</para><remarks>- When reputation level changes; returns total rep amount</remarks></member><member name="F:GameEvents.OnResourceConverterOutput"><para>Event called when a resource is produced by a &lt;ref refid='class_resource_converter' kindref='compound'&gt;ResourceConverter&lt;/ref&gt;.</para></member><member name="F:GameEvents.OnResourceMapLoaded"><para>Called when the resource map is initialized - can take a few frames</para></member><member name="F:GameEvents.onRotatingFrameTransition"><para>Event called whenever a rotating reference frame is enabled or disabled (parameter contains the dominant body, and whether a rotating frame is currently in effect or not). Use host.GetRFrameVel(wPos) to find out the velocity of the rotating frame at the given position, subtract frame vel if the Target bool is true, add if false.</para><remarks>- Triggered when reference frame changes (ie from inertial to rotating); this is generally accompanied by a shift in the camera position and a debug log message ("Reference Frame: Rotating/Inertial")</remarks></member><member name="F:GameEvents.onSameVesselDock"><para>Event called after a docking connection is established on the same vessel. (The vessel of the &amp;apos;from node&amp;apos; is the same as the vessel of the &amp;apos;to node&amp;apos;, before and after docking)</para><remarks>- Triggered when two docking ports on the same vessel dock together</remarks></member><member name="F:GameEvents.onSameVesselUndock"><para>Event called after a docking connection is released on the same vessel. (The vessel of the &amp;apos;from node&amp;apos; is the same as the vessel of the &amp;apos;to node&amp;apos;, before and after undocking)</para><remarks>- Triggered when two docking ports on the same vessel undock</remarks></member><member name="F:GameEvents.OnScienceChanged"><para>Event called whenever the space program&amp;apos;s science changes</para><remarks>- When science level changes; returns total science amount</remarks></member><member name="F:GameEvents.OnScienceRecieved"><para>Event called when science is submitted to R&amp;amp;D</para><remarks>- Triggered science data is transmitted or recovered; returns the amount of science and the ScienceSubject</remarks></member><member name="F:GameEvents.onScreenResolutionModified"><para>Event called once per frame if the screen resolution changes.</para></member><member name="F:GameEvents.onSetSpeedMode"></member><member name="F:GameEvents.onShowUI"><summary>Called when the player un-hides the UI by pressing F2. Register for this callback (and onHideUI) so that you can un-hide your UI too.</summary></member><member name="F:GameEvents.onSplashDamage"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered when engine exhaust damages another part</remarks></member><member name="F:GameEvents.onStageActivate"><para>Event called before the given stage &amp;apos;int&amp;apos; is activated on the active vessel.</para><remarks>- Triggered upon staging, returns the stage number</remarks></member><member name="F:GameEvents.onStageSeparation"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Triggered by decoupler staging; also triggered by separation through a decoupler's right-click menu event</remarks></member><member name="F:GameEvents.OnTechnologyResearched"><summary>Triggered when researching a tech node in the R&amp;amp;D center; triggers whether or not you have enough science to unlock the node</summary></member><member name="F:GameEvents.onTimeWarpRateChanged"><para>Event called after the warprate has changed.</para><remarks>- Triggered whenever timewarp rate changes; applies to physics and non-physics timewarp; triggered by the key press also (called even if you are at max/min timewarp already)</remarks></member><member name="F:GameEvents.onTooltipAboutToDespawn"></member><member name="F:GameEvents.onTooltipAboutToSpawn"></member><member name="F:GameEvents.onTooltipDespawned"></member><member name="F:GameEvents.onTooltipDestroyRequested"></member><member name="F:GameEvents.onTooltipSpawned"></member><member name="F:GameEvents.onTooltipUpdate"></member><member name="F:GameEvents.OnTriggeredDataTransmission"><para>Event called when a triggered data transmission fully completes. Used in special transmissions such as those from the science lab.</para></member><member name="F:GameEvents.onUndock"><para>&lt;ref refid='class_flight_logger' kindref='compound'&gt;FlightLogger&lt;/ref&gt; event. Internal and due for an overhaul.</para><remarks>- Deprecated? Use onPartUndock</remarks></member><member name="F:GameEvents.OnUpgradeableObjLevelChange"></member><member name="F:GameEvents.OnUpgradesFilled"><para>Fired after FillUpgrades() runs</para></member><member name="F:GameEvents.OnUpgradesLinked"><para>Fired after LinkUpgrades() runs</para></member><member name="F:GameEvents.onVesselChange"><para>Event called when the active vessel changes.</para><remarks>- Triggered when switching to a different vessel, loading a vessel, or launching</remarks></member><member name="F:GameEvents.onVesselClearStaging"></member><member name="F:GameEvents.onVesselControlStateChange"><para>Event called after a vessel has changed it&amp;apos;s situation. (I.e. &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; situation changes from prelaunch to flying)</para></member><member name="F:GameEvents.onVesselCreate"><para>Event called when a vessel is spawned into the scene, usually during loading.</para><remarks>- Triggered when a vessel is launched, or created by undocking, decoupling, planting a flag, or EVA; also triggered by new asteroid creation and rescue Kerbal contracts</remarks></member><member name="F:GameEvents.onVesselCrewWasModified"><para>Event called after a vessel had its crew modified in some way (added, removed, or killed).</para></member><member name="F:GameEvents.onVesselDestroy"><para>Event called before a vessel will be destroyed.</para><remarks>- Triggered when a vessel instance is destroyed; any time a vessel is unloaded, ie scene changes, exiting loading distance</remarks></member><member name="F:GameEvents.onVesselGoOffRails"><para>Event called after a vessel has gone off rails.</para><remarks>- Triggered when a vessel is loaded on the launchpad, when a vessel enters within loading distance, or when a vessel goes off of time warp</remarks></member><member name="F:GameEvents.onVesselGoOnRails"><para>Event called before a vessel goes on rails.</para><remarks>- Triggered when a vessel exits loading distance or enters time warp</remarks></member><member name="F:GameEvents.onVesselLoaded"><para>Event called after a vessel has been loaded.</para><remarks>- Triggered whenever a vessel's load method is called</remarks></member><member name="F:GameEvents.onVesselOrbitClosed"><para>Event called when a vessel&amp;apos;s orbit changes from hyperbolic to closed.</para><remarks>- Triggered when a closed orbit is reached</remarks></member><member name="F:GameEvents.onVesselOrbitEscaped"><para>Event called when a vessel&amp;apos;s orbit changes from closed to hyperbolic.</para><remarks>- Triggered when orbit eccentricity becomes &gt; 1</remarks></member><member name="F:GameEvents.onVesselPartCountChanged"><para>Event called in FixedUpdate if a vessel&amp;apos;s part count changes, useful if onVesselWasModified misses something.</para></member><member name="F:GameEvents.onVesselPrecalcAssign"><para>Event called right before a vessel&amp;apos;s &lt;ref refid='class_vessel_precalculate' kindref='compound'&gt;VesselPrecalculate&lt;/ref&gt; component is added so something else can add a different one.</para></member><member name="F:GameEvents.onVesselRecovered"><para>Event called when a vessel is recovered off the game (as opposed to being terminated). Parameter is protovessel as vessel may not be loaded.</para><remarks>- Triggered after a vessel has been recovered and the science data and part values have been accounted for; occurs in the space center or tracking station.  Triggered after onVesselRecoveryProcessing</remarks></member><member name="F:GameEvents.onVesselRecoveryProcessing"><para>Event called when a vessel is recovered off the game (as opposed to being terminated). Parameter is protovessel as vessel may not be loaded.</para><remarks>- Triggered in the space center or tracking station when a vessel is recovered; occurs before onVesselRecovered</remarks></member><member name="F:GameEvents.OnVesselRecoveryRequested"><para>Event called when the player requests that the current vessel be recovered after returning to space center. Most likely will be followed by a scene change</para><remarks>- Triggered a vessel is recovered (the big green button at the top) from the flight scene</remarks></member><member name="F:GameEvents.onVesselReferenceTransformSwitch"><para>Fired when the vessel&amp;apos;s reference transform is set</para></member><member name="F:GameEvents.onVesselRename"><para>Event called after a vessel name will change &amp;apos;from&amp;apos; a name &amp;apos;to&amp;apos; another name.</para><remarks>- Returns old 'from' vessel name and new 'to' vessel name</remarks></member><member name="F:GameEvents.onVesselResumeStaging"></member><member name="F:GameEvents.OnVesselRollout"><para>Event called when a new vessel is rolled out to the launchpad prior to launch</para><remarks>- Triggered when vessel is loaded onto the launchpad from the editor/launch selection window; called after the transition to flight scene</remarks></member><member name="F:GameEvents.onVesselSituationChange"><para>Event called after a vessel has changed it&amp;apos;s situation. (I.e. &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; situation changes from prelaunch to flying)</para><remarks>- Returns old and new vessel situations</remarks></member><member name="F:GameEvents.onVesselSOIChanged"><para>Event called when a vessel switches to a different SOI.</para><remarks>- Returns old and new Celestial Body</remarks></member><member name="F:GameEvents.onVesselStandardModification"><para>Event called by &lt;ref refid='class_flight_globals' kindref='compound'&gt;FlightGlobals&lt;/ref&gt; when a vessel is modified in ANY conceivable way (docking, explosions, part count changing, whatever).</para></member><member name="F:GameEvents.onVesselSwitching"><para>Fired when vessel focus is switching to a loaded vessel (just before &lt;ref refid='class_flight_globals_1a5f4999c6efd1b060ea887c3f091745eb' kindref='member'&gt;FlightGlobals.ActiveVessel&lt;/ref&gt; is actually set). Similar to OnVesselChange, but parameters contain both &amp;apos;from&amp;apos; and &amp;apos;to&amp;apos; vessels.</para><remarks>- This even triggers whenever a switch occurs from one vessel to another</remarks></member><member name="F:GameEvents.onVesselSwitchingToUnloaded"><para>Fired when vessel focus is switching to an unloaded vessel.</para></member><member name="F:GameEvents.onVesselTerminated"><para>Event called when a vessel is terminated off the game (as opposed to being recovered). Parameter is protovessel as vessel may not be loaded.</para><remarks>- Triggered when a vessel is deleted from the tracking station</remarks></member><member name="F:GameEvents.onVesselWasModified"><para>Event called after a vessel had its parts modified in some way (added or removed). &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; parameter refers to the modified vessel, not new ones that may have spawned as a result.</para><remarks>- Triggered when any aspect of a vessel changes; docking, undocking, decoupling, parts breaking, crash, etc...</remarks></member><member name="F:GameEvents.onVesselWillDestroy"><para>Event called just before a vessel is about to be destroyed. (it is non null at this point).</para><remarks>- Triggered when a vessel crashes, or passes into the atmosphere; when an EVA Kerbal boards, or when an asteroid is despawned</remarks></member><member name="F:GameEvents.onWheelRepaired"><para>Event called when a wheel is repaired</para></member><member name="M:GameEvents.Equals(object)"></member><member name="M:GameEvents.Finalize"></member><member name="M:GameEvents.GetHashCode"></member><member name="M:GameEvents.GetType"></member><member name="M:GameEvents.MemberwiseClone"></member><member name="M:GameEvents.ToString"></member><member name="M:GameEvents.FindEvent(string)"><para>Searches for an event with the given name and type. Note that name uniqueness is not checked, so this should only be used for global events (not one that is stored as a non-singleton class member).</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The type of the event to search for.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;eventName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of the event to search for.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The event, if found.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Allows mods to register their own events see &lt;a&gt;http://forum.kerbalspaceprogram.com/index.php?/topic/153112-ksp-122-gameevents-extension/&lt;/a&gt;</remarks></member><member name="M:GameEvents.#ctor"></member><member name="T:GameParameters"></member><member name="F:GameParameters.Career"></member><member name="F:GameParameters.Difficulty"></member><member name="F:GameParameters.Editor"></member><member name="F:GameParameters.Flight"></member><member name="F:GameParameters.preset"></member><member name="F:GameParameters.SpaceCenter"></member><member name="F:GameParameters.TrackingStation"></member><member name="F:GameParameters.DifficultyPresets"></member><member name="F:GameParameters.ParameterTypes"></member><member name="M:GameParameters.CustomParams"></member><member name="M:GameParameters.CustomParams(System.Type)"><summary>Implement this abstract class to add custom settings to the Game Difficulty Options.</summary></member><member name="M:GameParameters.Equals(object)"></member><member name="M:GameParameters.Finalize"></member><member name="M:GameParameters.GetHashCode"></member><member name="M:GameParameters.GetType"></member><member name="M:GameParameters.Load(ConfigNode)"></member><member name="M:GameParameters.MemberwiseClone"></member><member name="M:GameParameters.Save(ConfigNode)"></member><member name="M:GameParameters.ToString"></member><member name="M:GameParameters.GetDefaultParameters(Game+Modes,GameParameters+Preset)"></member><member name="M:GameParameters.GetPresetColor(GameParameters+Preset)"></member><member name="M:GameParameters.GetPresetColorHex(GameParameters+Preset)"></member><member name="M:GameParameters.SetDifficultyPresets"><para>&amp;lt; Easy</para><para>&amp;lt; Normal</para><para>&amp;lt; Moderate</para><para>&amp;lt; Hard</para><para>&amp;lt; Custom</para></member><member name="M:GameParameters.#ctor"></member><member name="M:GameParameters.#ctor(ConfigNode)"></member><member name="T:GamePersistence"><para>Handles saving and loading of SFS files and &lt;ref refid='class_flight_state' kindref='compound'&gt;FlightState&lt;/ref&gt; objects. Use this as an entry point for all saving/loading-related things.</para><remarks>- Contains some functions you can call to save the game state to a persistence file, or load the game state from a persistence file.</remarks></member><member name="M:GamePersistence.Equals(object)"></member><member name="M:GamePersistence.Finalize"></member><member name="M:GamePersistence.GetHashCode"></member><member name="M:GamePersistence.GetType"></member><member name="M:GamePersistence.MemberwiseClone"></member><member name="M:GamePersistence.ToString"></member><member name="M:GamePersistence.LoadGame(string,string,System.Boolean,System.Boolean)"><para>Loads a game state from the given file. Does not actually apply the loaded game state to the scene. Use &lt;ref refid='class_game_1a82a7f7d1923d383f52c056cc60eae5d2' kindref='member'&gt;Game.Start()&lt;/ref&gt; or &lt;ref refid='class_game_1a551bc102faffd4f690dbf587005f1307' kindref='member'&gt;Game.Load()&lt;/ref&gt; for that.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;saveFolder&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;nullIfIncompatible&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;return null if the game turns out to be incompatible (NOTE: most members will be null for incompatible games)</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;suppressIncompatibleMessage&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;skip displaying a popup dialog if the game is incompatible&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - filename without extension</remarks></member><member name="M:GamePersistence.LoadGameCfg(ConfigNode,string,System.Boolean,System.Boolean)"></member><member name="M:GamePersistence.LoadSFSFile(string,string)"></member><member name="M:GamePersistence.SaveGame(string,string,SaveMode)"><para>Updates and saves the game state to the given file name on the given save folder.</para><remarks>- Creates a persistence file containing the current game state.

SaveGame(string, string, SaveMode) calls SaveGame(HighLogic.CurrentGame.Updated(), string, string, SaveMode) (or creates CurrentGame if it doesn't exist).</remarks><param name="saveFileName">The name of the persistence file to create (".sfs" will be appended automatically to the file name).</param><param name="saveFolder">The folder in which to create the save file. Use HighLogic.SaveFolder to acquire the default one for the current game.</param><param name="saveMode">Whether to overwrite, append, or abort if the given file already exists.</param><returns>Returns the filename on success. Returns an empty string when the file already exists and SaveMode.ABORT is used.</returns></member><member name="M:GamePersistence.SaveGame(Game,string,string,SaveMode)"><para>Saves an SFS file from the given &lt;ref refid='class_game' kindref='compound'&gt;Game&lt;/ref&gt; object with the supplied filename</para><remarks>- For creating a savegame at the space center, simply use &lt;a href="#/classes/GamePersistence?scrollTo=SaveGameM"&gt;SaveGame(​string, string, SaveMode)&lt;/a&gt; instead. For quicksaves call &lt;a href="#/classes/Game?scrollTo=UpdatedM"&gt;Updated()&lt;/a&gt; on &lt;a href="#/classes/HighLogic?scrollTo=CurrentGameF"&gt;CurrentGame&lt;/a&gt; to get a Game, then reset that Game's startScene to FLIGHT, and then call SaveGame(Game, string, string, SaveMode).</remarks><param name="game">The game for which you want to create a save file.</param><param name="saveFileName">The name of the persistence file to create (".sfs" will be appended to the file name).</param><param name="saveFolder">The folder in which to create the save file. Use HighLogic.SaveFolder to acquire the default one for the current game.</param><param name="saveMode">Whether to overwrite, append, or abort if the given file already exists.</param><returns>Returns the filename on success. Returns an empty string when the file already exists and SaveMode.ABORT is used.</returns></member><member name="M:GamePersistence.SaveGame(GameBackup,string,string,SaveMode)"><para>Saves an SFS file from the given &lt;ref refid='class_game' kindref='compound'&gt;Game&lt;/ref&gt; object with the supplied filename</para></member><member name="M:GamePersistence.UpdateScenarioModules(Game)"></member><member name="M:GamePersistence.#ctor"></member><member name="T:GameScenes"><summary>An enum corresponding to the different Unity scenes in KSP</summary></member><member name="T:HighLogic"><summary>This class stores some very high-level information about the current game state.</summary></member><member name="F:HighLogic.currentGame"><summary>Current loaded game</summary></member><member name="F:HighLogic.GameSaveFolder"></member><member name="F:HighLogic.sceneBufferTransitionMatrix"></member><member name="F:HighLogic.showConsole"></member><member name="F:HighLogic.showConsoleOnError"></member><member name="F:HighLogic.skin"></member><member name="F:HighLogic.skinName"></member><member name="F:HighLogic.uiSkinDefAsset"></member><member name="F:HighLogic.FastEditorLoading"></member><member name="F:HighLogic.fetch"><summary>Use this instance to access non-static members of this class.</summary></member><member name="F:HighLogic.LoadedScene"><summary>Current loaded scene</summary></member><member name="F:HighLogic.LoadedSceneHasPlanetarium"></member><member name="F:HighLogic.LoadedSceneIsEditor"><summary>Whether the game is currently in the VAB or SPH scenes.</summary></member><member name="F:HighLogic.LoadedSceneIsFlight"><summary>Whether the game is currently in the flight scene.</summary></member><member name="F:HighLogic.LoadedSceneIsGame"></member><member name="P:HighLogic.enabled"></member><member name="P:HighLogic.gameObject"></member><member name="P:HighLogic.hideFlags"></member><member name="P:HighLogic.isActiveAndEnabled"></member><member name="P:HighLogic.name"></member><member name="P:HighLogic.tag"></member><member name="P:HighLogic.transform"></member><member name="P:HighLogic.useGUILayout"></member><member name="P:HighLogic.CurrentGame"><summary>Current loaded game</summary></member><member name="P:HighLogic.SaveFolder"></member><member name="P:HighLogic.Skin"><summary>The GUISkin used by the game. Set GUI.skin = HighLogic.Skin at the start of your GUI function to use it yourself.</summary></member><member name="P:HighLogic.UISkin"></member><member name="M:HighLogic.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.BroadcastMessage(string,object)"></member><member name="M:HighLogic.BroadcastMessage(string)"></member><member name="M:HighLogic.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.CancelInvoke"></member><member name="M:HighLogic.CancelInvoke(string)"></member><member name="M:HighLogic.CompareTag(string)"></member><member name="M:HighLogic.Equals(object)"></member><member name="M:HighLogic.Finalize"></member><member name="M:HighLogic.GetComponent(System.Type)"></member><member name="M:HighLogic.GetComponent"></member><member name="M:HighLogic.GetComponent(string)"></member><member name="M:HighLogic.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:HighLogic.GetComponentInChildren(System.Type)"></member><member name="M:HighLogic.GetComponentInChildren"></member><member name="M:HighLogic.GetComponentInChildren(System.Boolean)"></member><member name="M:HighLogic.GetComponentInParent(System.Type)"></member><member name="M:HighLogic.GetComponentInParent"></member><member name="M:HighLogic.GetComponents(System.Type)"></member><member name="M:HighLogic.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:HighLogic.GetComponents(List)"></member><member name="M:HighLogic.GetComponents"></member><member name="M:HighLogic.GetComponentsInChildren(System.Type)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Boolean)"></member><member name="M:HighLogic.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:HighLogic.GetComponentsInChildren"></member><member name="M:HighLogic.GetComponentsInChildren(List)"></member><member name="M:HighLogic.GetComponentsInParent(System.Type)"></member><member name="M:HighLogic.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:HighLogic.GetComponentsInParent(System.Boolean)"></member><member name="M:HighLogic.GetComponentsInParent(System.Boolean,List)"></member><member name="M:HighLogic.GetComponentsInParent"></member><member name="M:HighLogic.GetHashCode"></member><member name="M:HighLogic.GetInstanceID"></member><member name="M:HighLogic.GetType"></member><member name="M:HighLogic.Invoke(string,System.Single)"></member><member name="M:HighLogic.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:HighLogic.IsInvoking(string)"></member><member name="M:HighLogic.IsInvoking"></member><member name="M:HighLogic.MemberwiseClone"></member><member name="M:HighLogic.OnApplicationFocus(System.Boolean)"></member><member name="M:HighLogic.printCurrentGame"></member><member name="M:HighLogic.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessage(string,object)"></member><member name="M:HighLogic.SendMessage(string)"></member><member name="M:HighLogic.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.SendMessageUpwards(string,object)"></member><member name="M:HighLogic.SendMessageUpwards(string)"></member><member name="M:HighLogic.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:HighLogic.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StartCoroutine(string,object)"></member><member name="M:HighLogic.StartCoroutine(string)"></member><member name="M:HighLogic.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StopAllCoroutines"></member><member name="M:HighLogic.StopCoroutine(string)"></member><member name="M:HighLogic.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:HighLogic.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:HighLogic.ToString"></member><member name="M:HighLogic.bufferedLoad(System.Int32,System.Boolean)"></member><member name="M:HighLogic.LoadScene(GameScenes)"><para>&amp;lt; Use standard predictive loading. Will keep some objects in memory for speed.</para></member><member name="M:HighLogic.#ctor"></member><member name="T:IDiscoverable"><summary>Methods allowing information for celestial bodies or ships to be hidden at game start  These methods appear to be used in the tracking station. Implemented by CelestialBody Implemented by Vessel</summary></member><member name="P:IDiscoverable.DiscoveryInfo"><summary>Describes to what extent this object has been explored</summary></member><member name="M:IDiscoverable.RevealAltitude"><summary>Returns the object's altitude</summary><returns>The height above the reference sphere of the Celestial Body in 	whose sphere of influence the object lies, in meters.</returns></member><member name="M:IDiscoverable.RevealDisplayName"></member><member name="M:IDiscoverable.RevealMass"><summary>Returns the object's mass Units are implementation-dependent.</summary></member><member name="M:IDiscoverable.RevealName"><summary>Returns the object's tracking station name</summary><returns>The string to display in the tracking station</returns></member><member name="M:IDiscoverable.RevealSituationString"><summary>Describes the state of the object</summary><returns>A string containing the sphere of influence and trajectory of the object<example>"Orbiting the Sun"</example></returns></member><member name="M:IDiscoverable.RevealSpeed"><summary>Returns the speed of the object</summary><returns>The inertial speed relative to the Celestial Body in whose sphere of influence 	the object lies, in meters per second.</returns></member><member name="M:IDiscoverable.RevealType"><summary>Gives the type of object used  Meaning is implementation-dependent.</summary></member><member name="T:IScienceDataContainer"><para>implement this if your module is able to hold scientific data and you want it to be transferable and all</para><remarks>- Interface used by ModuleScienceExperiment and ModuleScienceContainer. Used for storing, transfering and transmitting Science Data.</remarks></member><member name="M:IScienceDataContainer.DumpData(ScienceData)"><para>Caleld to discard stored data on the module. Will be called right after GetData if the data was moved.</para><remarks>- Removes science data from the part, called after transmission or EVA data collection.</remarks><param name="data"/></member><member name="M:IScienceDataContainer.GetData"><para>Called when about to transmit data using comms equipment or when transferring data to another container. Return any gathered data or null if none, do not discard data.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns an array of all Science Data stored in the module.</remarks><returns/></member><member name="M:IScienceDataContainer.GetScienceCount"><para>Called to get the total count of ScienceDatas stored on this unit.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns a count of Science Data reports stored in the module.</remarks><returns/></member><member name="M:IScienceDataContainer.IsRerunnable"><summary>Can the experiment be run more than once?</summary><returns/></member><member name="M:IScienceDataContainer.ReturnData(ScienceData)"><para>Called when a transmission (for whatever reason) fails. Attempts to return the data back to the container that it came from.</para></member><member name="M:IScienceDataContainer.ReviewData"><summary>Opens the experimental results dialog page, displays stored Science Data.</summary></member><member name="M:IScienceDataContainer.ReviewDataItem(ScienceData)"><summary>Opens the experimental results dialog page, displays stored Science Data.</summary><param name="data"/></member><member name="T:ITargetable"><summary>Represents something that can be set as target while controlling a vessel. This is implemented by</summary><see cref="Vessel"/><remarks>,</remarks><see cref="CelestialBody"/><remarks>, and</remarks><see cref="ModuleDockingNode"/><remarks>.</remarks></member><member name="M:ITargetable.GetActiveTargetable"></member><member name="M:ITargetable.GetDisplayName"></member><member name="M:ITargetable.GetFwdVector"></member><member name="M:ITargetable.GetName"><summary>The name of this target.</summary></member><member name="M:ITargetable.GetObtVelocity"></member><member name="M:ITargetable.GetOrbit"></member><member name="M:ITargetable.GetOrbitDriver"></member><member name="M:ITargetable.GetSrfVelocity"></member><member name="M:ITargetable.GetTargetingMode"></member><member name="M:ITargetable.GetTransform"></member><member name="M:ITargetable.GetVessel"></member><member name="T:InputLockManager"><summary>This class lets you lock the player out of certain controls. It's probably what KSP uses internally to lock controls during time warp, or when out of electric charge.    You can view the current set of locks in-game with the Alt-F12 debug menu.</summary></member><member name="F:InputLockManager.lockMask"></member><member name="F:InputLockManager.lockStack"><summary>The set of locks currently in place?</summary></member><member name="P:InputLockManager.LockMask"><para>Get the state of the input lock mask (read-only).</para><remarks>- If</remarks><code>ControlTypes.X &amp;amp; LockMask != 0</code><remarks>then ControlTypes.X is locked?</remarks></member><member name="M:InputLockManager.Equals(object)"></member><member name="M:InputLockManager.Finalize"></member><member name="M:InputLockManager.GetHashCode"></member><member name="M:InputLockManager.GetType"></member><member name="M:InputLockManager.MemberwiseClone"></member><member name="M:InputLockManager.ToString"></member><member name="M:InputLockManager.ClearControlLocks"><para>Removes all control locks</para><remarks>-</remarks></member><member name="M:InputLockManager.ControlLocks(System.Int32,System.Int32)"><para>&amp;lt; 7 - 3 + 1 = 5</para><para>&amp;lt; #00100000 - 1 = #000011111</para><para>&amp;lt; #00011111 &amp;lt;&amp;lt; 3 = #011111000</para></member><member name="M:InputLockManager.DebugLockStack"></member><member name="M:InputLockManager.GetControlLock(string)"><para>Get a control lock by it&amp;apos;s ID string</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;lockID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The lock to find</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>The lock value, if one is found, or 0 if none found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:InputLockManager.IsAllLocked(ControlTypes)"><para>Check whether all controls in a mask are locked</para></member><member name="M:InputLockManager.IsAnyUnlocked(ControlTypes)"><para>Check whether any controls in a mask are unlocked</para></member><member name="M:InputLockManager.IsLocked(ControlTypes)"><para>Check whether a given control type is locked or not, based on the current lock state.</para><remarks>-</remarks></member><member name="M:InputLockManager.IsLocked(ControlTypes,ControlTypes)"><para>Check whether a given control type is locked or not, based on the current lock state compared to a reference lock mask.</para><remarks>-</remarks></member><member name="M:InputLockManager.IsLocking(ControlTypes,GameEvents+FromToAction)"></member><member name="M:InputLockManager.IsUnlocked(ControlTypes)"><para>Check whether a given control type is unlocked or not, based on the current lock state.</para><remarks>-</remarks></member><member name="M:InputLockManager.IsUnlocked(ControlTypes,ControlTypes)"><para>Check whether a given control type is unlocked or not, based on the current lock state compared to a reference lock mask.</para><remarks>-</remarks></member><member name="M:InputLockManager.IsUnlocking(ControlTypes,GameEvents+FromToAction)"></member><member name="M:InputLockManager.PrintLockStack"></member><member name="M:InputLockManager.RemoveControlLock(string)"><para>Remove a control lock added earlier.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;lockID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A reference to the script that added the lock (again, &amp;apos;this&amp;apos;)</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Unlock a set of controls that were earlier locked with SetControlLock.</remarks><param name="lockID">The string ID passed to SetControlLock.</param></member><member name="M:InputLockManager.SetControlLock(ControlTypes,string)"><para>Set a lock on flight controls. The lock will be added if this is the first call by this caller, or edited if there was a previous lock</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;locks&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The locks to apply</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;lockID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A reference to the caller script (just pass &amp;apos;this&amp;apos;)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Locks a set of controls.  &lt;param name="locks"&gt;Which controls to lock. You can OR several ControlTypes together to lock several types of controls at once.&lt;/param&gt; &lt;param name="lockID"&gt;A unique string ID that you will pass to RemoveControlLock to unlock these controls.&lt;/param&gt;</remarks><returns>?</returns></member><member name="M:InputLockManager.SetControlLock(string)"><para>Set a lock on all controls.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;lockID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>-</remarks></member><member name="T:KFSMEvent"><summary>A KFSMEvent represents a possible transition between two KFSMStates in a KerbalFSM finite state machine.</summary></member><member name="F:KFSMEvent.GoToStateOnEvent"><summary>Which state to transition to when this event is triggered.</summary></member><member name="F:KFSMEvent.name"><summary>The name of the event.</summary></member><member name="F:KFSMEvent.OnCheckCondition"><summary>You can assign to this field a delegate that takes a KFSMState (the current state) and returns a bool. The function will be called each frame and if it returns true, the event is triggered.</summary></member><member name="F:KFSMEvent.OnEvent"><summary>You can assign a delegate to this field, and the delegate will be run when the event is triggered.</summary></member><member name="F:KFSMEvent.updateMode"><summary>Specifies when OnCheckCondition should be checked?</summary></member><member name="M:KFSMEvent.Equals(object)"></member><member name="M:KFSMEvent.Finalize"></member><member name="M:KFSMEvent.GetHashCode"></member><member name="M:KFSMEvent.GetType"></member><member name="M:KFSMEvent.IsValid(KFSMState)"><summary>Whether this event can be triggered when the state machine is in the given state. Events must be added to states through KerbalFSM.AddEvent before they can be triggered, and they can only be triggered when the machine is in one of the states to which they have been added.</summary><param name="state">The state to check.</param><returns>Whether the event can be triggered from the given state.</returns></member><member name="M:KFSMEvent.MemberwiseClone"></member><member name="M:KFSMEvent.ToString"></member><member name="M:KFSMEvent.#ctor(string)"><summary>Creates a new KFSMEvent</summary><param name="name">The name of the event.</param></member><member name="T:KFSMState"><summary>Represents a state in a KerbalFSM finite state machine.</summary></member><member name="F:KFSMState.FrameCountAtStateEnter"></member><member name="F:KFSMState.name"><summary>The name of this state.</summary></member><member name="F:KFSMState.OnEnter"><summary>You can assign to this field a delegate that takes a KFSMState (which will be this state). The delegate will be called when the state machine enters this state.</summary></member><member name="F:KFSMState.OnFixedUpdate"><summary>You can assign a delegate to this field, and the delegate will be called during each FixedUpdate while the state machine is in this state.</summary></member><member name="F:KFSMState.OnLateUpdate"><summary>You can assign a delegate to this field, and the delegate will be called during each LateUpdate while the state machine is in this state.</summary></member><member name="F:KFSMState.OnLeave"><summary>You can assign to this field a delegate that takes a KFSMState. The delegate will be called when the state machine leaves this state, and the argument passed to the delegate will be the new state that the machine is transitioning to.</summary></member><member name="F:KFSMState.OnUpdate"><summary>You can assign a delegate to this field, and the delegate will be call during each Update while the state machine is in this state.</summary></member><member name="F:KFSMState.stateEvents"></member><member name="F:KFSMState.TimeAtStateEnter"></member><member name="F:KFSMState.updateMode"></member><member name="P:KFSMState.StateEvents"><summary>The set of events that are valid for this state (i.e., the possible transitions from this state).</summary></member><member name="M:KFSMState.AddEvent(KFSMEvent)"><summary>Add an event (possible transition) to this state.</summary><param name="ev">The event to add.</param></member><member name="M:KFSMState.Equals(object)"></member><member name="M:KFSMState.Finalize"></member><member name="M:KFSMState.GetHashCode"></member><member name="M:KFSMState.GetType"></member><member name="M:KFSMState.IsValid(KFSMEvent)"><summary>Whether the given event can be triggered from this state. An event must be added to a state before it can be triggered from that state.</summary><param name="ev">The event to check.</param><returns>Whether the event can be triggered from this state.</returns></member><member name="M:KFSMState.MemberwiseClone"></member><member name="M:KFSMState.ToString"></member><member name="M:KFSMState.#ctor(string)"><summary>Create a new KFSMState with a given name.</summary><param name="name">The name of the new state.</param></member><member name="T:KSP.IO.BinaryReader"><para>Identical to System.IO.BinaryReader, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.</para><remarks>- Identical to System.IO.BinaryReader, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.</remarks></member><member name="P:KSP.IO.BinaryReader.BaseStream"></member><member name="M:KSP.IO.BinaryReader.Close"></member><member name="M:KSP.IO.BinaryReader.Dispose"><summary>Close the stream and any resources (e.g. files) it has open.</summary></member><member name="M:KSP.IO.BinaryReader.Equals(object)"></member><member name="M:KSP.IO.BinaryReader.Finalize"></member><member name="M:KSP.IO.BinaryReader.GetHashCode"></member><member name="M:KSP.IO.BinaryReader.GetType"></member><member name="M:KSP.IO.BinaryReader.MemberwiseClone"></member><member name="M:KSP.IO.BinaryReader.PeekChar"></member><member name="M:KSP.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryReader.Read"></member><member name="M:KSP.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryReader.Read(byte[],System.Int32,System.Int32)"><summary>Read a block of bytes from the stream.</summary><param name="buffer"/><param name="index"/><param name="count"/><returns/></member><member name="M:KSP.IO.BinaryReader.Read(char[],System.Int32,System.Int32)"><summary>Read a block of chars from the stream.</summary><param name="buffer"/><param name="index"/><param name="count"/><returns/></member><member name="M:KSP.IO.BinaryReader.ReadBoolean"></member><member name="M:KSP.IO.BinaryReader.ReadByte"></member><member name="M:KSP.IO.BinaryReader.ReadBytes(System.Int32)"></member><member name="M:KSP.IO.BinaryReader.ReadChar"></member><member name="M:KSP.IO.BinaryReader.ReadChars(System.Int32)"></member><member name="M:KSP.IO.BinaryReader.ReadDecimal"></member><member name="M:KSP.IO.BinaryReader.ReadDouble"></member><member name="M:KSP.IO.BinaryReader.ReadInt16"></member><member name="M:KSP.IO.BinaryReader.ReadInt32"></member><member name="M:KSP.IO.BinaryReader.ReadInt64"></member><member name="M:KSP.IO.BinaryReader.ReadSByte"></member><member name="M:KSP.IO.BinaryReader.ReadSingle"></member><member name="M:KSP.IO.BinaryReader.ReadString"></member><member name="M:KSP.IO.BinaryReader.ReadUInt16"></member><member name="M:KSP.IO.BinaryReader.ReadUInt32"></member><member name="M:KSP.IO.BinaryReader.ReadUInt64"></member><member name="M:KSP.IO.BinaryReader.ToString"></member><member name="M:KSP.IO.BinaryReader.CreateForType(string,Vessel)"><para>Create a binary reader with the desired filename.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Create a binary reader with the desired filename.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.BinaryWriter"><summary>Identical to System.IO.BinaryWriter, but with added IDisposable methods (for use in using structures), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.BinaryWriter.BaseStream"></member><member name="M:KSP.IO.BinaryWriter.Close"></member><member name="M:KSP.IO.BinaryWriter.Dispose"></member><member name="M:KSP.IO.BinaryWriter.Equals(object)"></member><member name="M:KSP.IO.BinaryWriter.Finalize"></member><member name="M:KSP.IO.BinaryWriter.Flush"></member><member name="M:KSP.IO.BinaryWriter.GetHashCode"></member><member name="M:KSP.IO.BinaryWriter.GetType"></member><member name="M:KSP.IO.BinaryWriter.MemberwiseClone"></member><member name="M:KSP.IO.BinaryWriter.Seek(System.Int32,KSP.IO.SeekOrigin)"></member><member name="M:KSP.IO.BinaryWriter.ToString"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Double)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Single)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.BinaryWriter.Write(string)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.SByte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Boolean)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Byte)"></member><member name="M:KSP.IO.BinaryWriter.Write(byte[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Char)"></member><member name="M:KSP.IO.BinaryWriter.Write(char[])"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.BinaryWriter.Write(sbyte)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.Int16)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.BinaryWriter.Write(System.UInt16)"></member><member name="M:KSP.IO.BinaryWriter.Write(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.Write(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.BinaryWriter.CreateForType(string,Vessel)"><para>Create a binary file writer.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Create a binary file writer.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.File"></member><member name="M:KSP.IO.File.Equals(object)"></member><member name="M:KSP.IO.File.Finalize"></member><member name="M:KSP.IO.File.GetHashCode"></member><member name="M:KSP.IO.File.GetType"></member><member name="M:KSP.IO.File.MemberwiseClone"></member><member name="M:KSP.IO.File.ToString"></member><member name="M:KSP.IO.File.AppendAllText(string,string,Vessel)"><para>Append a string to a file, or creates it if it doesn&amp;apos;t exist.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;data&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The string to store as a text file.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Append a string to a file, or creates it if it doesn't exist.</remarks><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.AppendText(string,Vessel)"><para>Open a stream that appends to a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to append to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that appends to a file.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Create(string,Vessel)"><para>Open a stream that creates a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to write to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that creates a file.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.CreateText(string,Vessel)"><para>Open a stream that creates a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to write to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that creates a file.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Delete(string,Vessel)"><para>Delete a file in your &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; sandbox.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Delete a file in your IO sandbox.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.Exists(string,Vessel)"><para>Find out if a file in your &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; sandbox exists.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;True if file exists.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Find out if a file in your IO sandbox exists.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.Open(string,KSP.IO.FileMode,Vessel)"><para>Open a stream that operates on a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to write to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that operates on a file.</remarks><typeparam name="T"/><param name="filename"/><param name="mode"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.OpenText(string,Vessel)"><para>Open a stream that operates on a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to write to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that operates on a file.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.OpenWrite(string,Vessel)"><para>Open a stream that writes to a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Calling class</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The file to write to.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A vessel that relates to the data about to be written.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Open a stream that writes to a file.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.ReadAllBytes(string,Vessel)"><para>Read all the bytes from a file in your &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; sandbox.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;Content of the file requested&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Read all the bytes from a file in your IO sandbox.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.ReadAllLines(string,Vessel)"><para>Read all lines from a file in your &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; sandbox.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;array of lines in the file&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Read all lines from a file in your IO sandbox.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.ReadAllText(string,Vessel)"><para>Read all the text from a file in your &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; sandbox.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;All the text in that file&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Read all the text from a file in your IO sandbox.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="M:KSP.IO.File.WriteAllBytes(System.Byte[],string,Vessel)"></member><member name="M:KSP.IO.File.WriteAllBytes(byte[],string,Vessel)"><summary>Write a bunch of bytes to a file on disk</summary><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.WriteAllLines(string[],string,Vessel)"><para>Write an array of strings to a file, with each string becoming a line.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;data&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;strings to write as lines&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Write an array of strings to a file, with each string becoming a line.</remarks><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.WriteAllText(string,string,Vessel)"><para>Write a string to a file.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Class that is calling</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;filename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Filename to look for&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight to track&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;data&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The string to store as a text file.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Write a string to a file.</remarks><typeparam name="T"/><param name="data"/><param name="filename"/><param name="flight"/></member><member name="M:KSP.IO.File.#ctor"></member><member name="T:KSP.IO.FileInfo"><para>&lt;ref refid='class_k_s_p_1_1_i_o_1_1_file' kindref='compound'&gt;File&lt;/ref&gt; &lt;ref refid='namespace_k_s_p_1_1_i_o' kindref='compound'&gt;IO&lt;/ref&gt; methods</para><remarks>- A surrogate for System.IO.FileInfo.</remarks></member><member name="P:KSP.IO.FileInfo.DirectoryName"><para>Gets a string representing the directory&amp;apos;s full path.</para><remarks>- Gets a string representing the directory's full path.</remarks></member><member name="P:KSP.IO.FileInfo.Exists"><para>Gets a value indicating whether a file exists.</para><remarks>- Gets a value indicating whether a file exists.</remarks></member><member name="P:KSP.IO.FileInfo.IsReadOnly"><para>Gets or sets a value that determines if the current file is read only.</para><remarks>- Gets or sets a value that determines if the current file is read only.</remarks></member><member name="P:KSP.IO.FileInfo.Length"><para>Gets the size, in bytes, of the current file.</para><remarks>- Gets the size, in bytes, of the current file.</remarks></member><member name="P:KSP.IO.FileInfo.Name"><para>Gets the name of the file.</para><remarks>- Gets the name of the file.</remarks></member><member name="M:KSP.IO.FileInfo.AppendText"><para>Creates a System.IO.StreamWriter that appends text to the file represented by this instance of the System.IO.FileInfo.</para><remarks>- Creates a System.IO.StreamWriter that appends text to the file represented by this instance of the System.IO.FileInfo.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.CopyTo(string,System.Boolean)"><para>Copies an existing file to a new file, allowing the overwriting of an existing file.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;overwrite&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;true to allow an existing file to be overwritten; otherwise, false.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of the new file to copy to. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Copies an existing file to a new file, allowing the overwriting of an existing file.  &lt;param name="destFileName"&gt;&lt;/param&gt; &lt;param name="overwrite"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.FileInfo.CopyTo(string)"><para>Copies an existing file to a new file, disallowing the overwriting of an existing file.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of the new file to copy to.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Copies an existing file to a new file, disallowing the overwriting of an existing file.</remarks><param name="destFileName"/><returns/></member><member name="M:KSP.IO.FileInfo.Create"><para>Creates a file.</para><remarks>- Creates a file.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.CreateText"><para>Creates a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_text_writer' kindref='compound'&gt;KSP.IO.TextWriter&lt;/ref&gt; that writes a new text file.</para><remarks>- Creates a KSP.IO.TextWriter that writes a new text file.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.Decrypt"><para>Decrypts a file that was encrypted by the current account using the System.IO.FileInfo.Encrypt() method.</para><remarks>- Decrypts a file that was encrypted by the current account using the System.IO.FileInfo.Encrypt() method.</remarks></member><member name="M:KSP.IO.FileInfo.Delete"><para>Permanently deletes a file.</para><remarks>- Permanently deletes a file.</remarks></member><member name="M:KSP.IO.FileInfo.Encrypt"><para>Encrypts a file so that only the account used to encrypt the file can decrypt it.</para><remarks>- Encrypts a file so that only the account used to encrypt the file can decrypt it.</remarks></member><member name="M:KSP.IO.FileInfo.Equals(object)"></member><member name="M:KSP.IO.FileInfo.Finalize"></member><member name="M:KSP.IO.FileInfo.GetHashCode"></member><member name="M:KSP.IO.FileInfo.GetType"></member><member name="M:KSP.IO.FileInfo.MemberwiseClone"></member><member name="M:KSP.IO.FileInfo.MoveTo(string)"><para>Moves a specified file to a new location, providing the option to specify a new file name.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The path to move the file to, which can specify a different file name.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Moves a specified file to a new location, providing the option to specify a new file name.</remarks><param name="destFileName"/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess)"><para>Opens a file in the specified mode with read, write, or read/write access.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;access&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A System.IO.FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mode&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A System.IO.FileMode constant specifying the mode (for example, Open or Append) in which to open the file. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Opens a file in the specified mode with read, write, or read/write access.  &lt;param name="mode"&gt;&lt;/param&gt; &lt;param name="access"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode)"><para>Opens a file in the specified mode.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mode&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A &lt;ref refid='namespace_k_s_p_1_1_i_o_1afe487827e52ac4a7b27b44b2ebf08751' kindref='member'&gt;KSP.IO.FileMode&lt;/ref&gt; constant specifying the mode (for example, Open or Append) in which to open the file.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Opens a file in the specified mode.</remarks><param name="mode"/><returns/></member><member name="M:KSP.IO.FileInfo.Open(KSP.IO.FileMode,KSP.IO.FileAccess,KSP.IO.FileShare)"><para>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;access&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A System.IO.FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;share&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A System.IO.FileShare constant specifying the type of access other &lt;ref refid='class_k_s_p_1_1_i_o_1_1_file_stream' kindref='compound'&gt;FileStream&lt;/ref&gt; objects have to this file. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mode&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A System.IO.FileMode constant specifying the mode (for example, Open or Append) in which to open the file. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.  &lt;param name="mode"&gt;&lt;/param&gt; &lt;param name="access"&gt;&lt;/param&gt; &lt;param name="share"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.FileInfo.OpenRead"><para>Creates a read-only System.IO.FileStream.</para><remarks>- Creates a read-only System.IO.FileStream.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.OpenText"><para>Creates a System.IO.StreamReader with UTF8 encoding that reads from an existing text file.</para><remarks>- Creates a System.IO.StreamReader with UTF8 encoding that reads from an existing text file.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.OpenWrite"><para>Creates a write-only System.IO.FileStream.</para><remarks>- Creates a write-only System.IO.FileStream.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.Replace(string,string,System.Boolean)"><para>Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destinationBackupFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of a file with which to create a backup of the file described by the destFileName parameter.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;ignoreMetadataErrors&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destinationFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of a file to replace with the current file. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.  &lt;param name="destinationFileName"&gt;&lt;/param&gt; &lt;param name="destinationBackupFileName"&gt;&lt;/param&gt; &lt;param name="ignoreMetadataErrors"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.FileInfo.Replace(string,string)"><para>Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destinationBackupFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of a file with which to create a backup of the file described by the destFileName parameter.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;destinationFileName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of a file to replace with the current file. &lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Replaces the contents of a specified file with the file described by the current System.IO.FileInfo object, deleting the original file, and creating a backup of the replaced file.  &lt;param name="destinationFileName"&gt;&lt;/param&gt; &lt;param name="destinationBackupFileName"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.FileInfo.ToString"><para>Returns the path as a string.</para><remarks>- Returns the path as a string.</remarks><returns/></member><member name="M:KSP.IO.FileInfo.CreateForType(string,Vessel)"><para>Create a text reader stream.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Create a text reader stream.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.IOException"><summary>A surrogate for System.IO.IOException.</summary></member><member name="F:KSP.IO.IOException.message"></member><member name="F:KSP.IO.IOException.source"></member><member name="F:KSP.IO.IOException.stack"></member><member name="P:KSP.IO.IOException.Data"></member><member name="P:KSP.IO.IOException.HelpLink"></member><member name="P:KSP.IO.IOException.HResult"></member><member name="P:KSP.IO.IOException.InnerException"></member><member name="P:KSP.IO.IOException.IPForWatsonBuckets"></member><member name="P:KSP.IO.IOException.IsTransient"></member><member name="P:KSP.IO.IOException.Message"></member><member name="P:KSP.IO.IOException.RemoteStackTrace"></member><member name="P:KSP.IO.IOException.Source"></member><member name="P:KSP.IO.IOException.StackTrace"></member><member name="P:KSP.IO.IOException.TargetSite"></member><member name="P:KSP.IO.IOException.WatsonBuckets"></member><member name="M:KSP.IO.IOException.Equals(object)"></member><member name="M:KSP.IO.IOException.Finalize"></member><member name="M:KSP.IO.IOException.GetBaseException"></member><member name="M:KSP.IO.IOException.GetHashCode"></member><member name="M:KSP.IO.IOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member><member name="M:KSP.IO.IOException.GetType"></member><member name="M:KSP.IO.IOException.GetType"></member><member name="M:KSP.IO.IOException.MemberwiseClone"></member><member name="M:KSP.IO.IOException.ToString"></member><member name="M:KSP.IO.IOException.#ctor(string,string,string)"></member><member name="T:KSP.IO.IOUtils"><para>Create streams in sandboxed environment</para><remarks>- Has some useful little tools and utilities.</remarks></member><member name="P:KSP.IO.IOUtils.PluginRootPath"></member><member name="M:KSP.IO.IOUtils.Equals(object)"></member><member name="M:KSP.IO.IOUtils.Finalize"></member><member name="M:KSP.IO.IOUtils.GetHashCode"></member><member name="M:KSP.IO.IOUtils.GetType"></member><member name="M:KSP.IO.IOUtils.MemberwiseClone"></member><member name="M:KSP.IO.IOUtils.ToString"></member><member name="M:KSP.IO.IOUtils.DeserializeFromBinary(System.Byte[])"></member><member name="M:KSP.IO.IOUtils.DeserializeFromBinary(byte[])"><summary>Deserialize a binary serialized object</summary><param name="input"/><returns/></member><member name="M:KSP.IO.IOUtils.GetFilePathFor(System.Type,string,Vessel)"><para>Return the full path for a given filename, provided a class from the plugin.</para><para>PluginData/[.flights/FLIGHT_UUID/]assemblyname/file</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A type from the calling plugin</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;file&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The desired filename (path information will be stripped)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The flight associated with this file&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; Add filename &lt;/para&gt; - Return the full path for a given filename, provided a class from the plugin.  &lt;para&gt;PluginData/[.flights/FLIGHT_UUID/]assemblyname/file&lt;/para&gt;  &lt;param name="T"&gt;&lt;/param&gt; &lt;param name="file"&gt;&lt;/param&gt; &lt;param name="flight"&gt;&lt;/param&gt;</remarks><returns/></member><member name="M:KSP.IO.IOUtils.SerializeToBinary(object)"><para>Serialize an object (same as using a BinaryFormatter).</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;something&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; - Serialize an object (same as using a BinaryFormatter).</remarks><param name="something"/><returns/></member><member name="M:KSP.IO.IOUtils.#ctor"></member><member name="T:KSP.IO.MemoryStream"><para>Emulates System.IO.MemoryStream.</para><remarks>- Useful for manipulating bytes in memory.</remarks></member><member name="P:KSP.IO.MemoryStream.CanRead"></member><member name="P:KSP.IO.MemoryStream.CanSeek"></member><member name="P:KSP.IO.MemoryStream.CanWrite"></member><member name="P:KSP.IO.MemoryStream.Capacity"></member><member name="P:KSP.IO.MemoryStream.Length"></member><member name="P:KSP.IO.MemoryStream.Position"></member><member name="M:KSP.IO.MemoryStream.Equals(object)"></member><member name="M:KSP.IO.MemoryStream.Finalize"></member><member name="M:KSP.IO.MemoryStream.Flush"></member><member name="M:KSP.IO.MemoryStream.GetBuffer"></member><member name="M:KSP.IO.MemoryStream.GetHashCode"></member><member name="M:KSP.IO.MemoryStream.GetType"></member><member name="M:KSP.IO.MemoryStream.MemberwiseClone"></member><member name="M:KSP.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.Read(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.ReadByte"></member><member name="M:KSP.IO.MemoryStream.Seek(System.Int64,KSP.IO.SeekOrigin)"></member><member name="M:KSP.IO.MemoryStream.SetLength(System.Int64)"></member><member name="M:KSP.IO.MemoryStream.ToArray"></member><member name="M:KSP.IO.MemoryStream.ToString"></member><member name="M:KSP.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.Write(byte[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.MemoryStream.WriteByte(System.Byte)"></member><member name="M:KSP.IO.MemoryStream.WriteByte(System.Byte)"></member><member name="M:KSP.IO.MemoryStream.#ctor"></member><member name="M:KSP.IO.MemoryStream.#ctor(System.Byte[])"></member><member name="M:KSP.IO.MemoryStream.#ctor(byte[])"></member><member name="T:KSP.IO.PluginConfigNode"><para>A node containing configuration information</para><remarks>- A node full of configuration values.</remarks></member><member name="P:KSP.IO.PluginConfigNode.Item"></member><member name="M:KSP.IO.PluginConfigNode.Equals(object)"></member><member name="M:KSP.IO.PluginConfigNode.Finalize"></member><member name="M:KSP.IO.PluginConfigNode.GetHashCode"></member><member name="M:KSP.IO.PluginConfigNode.GetParent"><para>Gets the parent of this node.</para><para>&lt;simplesect kind='return'&gt;<para>&lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_config_node' kindref='compound'&gt;PluginConfigNode&lt;/ref&gt; or null if root node.</para>&lt;/simplesect&gt;</para><remarks>- Gets the parent of this node.</remarks><returns/></member><member name="M:KSP.IO.PluginConfigNode.GetType"></member><member name="M:KSP.IO.PluginConfigNode.GetValue(string)"><para>Get the value of a configuration key.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Type you want returned</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The configuration key which you want to fetch&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;Either null (or equivalent) for an inexistent key, or the value you wanted&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Get the value of a configuration key.</remarks><typeparam name="T"/><param name="key"/><returns/></member><member name="M:KSP.IO.PluginConfigNode.GetValue(string,T)"><para>Get the value of a configuration key.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Type you want returned</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The configuration key which you want to fetch&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;_default&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The default value returned when the key cannot be found.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;Either default for an inexistent key, or the value you wanted&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Get the value of a configuration key.</remarks><typeparam name="T"/><param name="key"/><param name="_default"/><returns/></member><member name="M:KSP.IO.PluginConfigNode.MemberwiseClone"></member><member name="M:KSP.IO.PluginConfigNode.SetValue(string,object)"><para>Set the value of a configuration key</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The name of the configuration key</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The value you wish to set it to&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Set the value of a configuration key  &lt;param name="key"&gt;&lt;/param&gt; &lt;param name="value"&gt;&lt;/param&gt;</remarks></member><member name="M:KSP.IO.PluginConfigNode.ToString"></member><member name="M:KSP.IO.PluginConfigNode.#ctor(KSP.IO.PluginConfigNode)"><para>Specify the parent object when creating a node.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;parent&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>-</remarks></member><member name="M:KSP.IO.PluginConfigNode.#ctor"><para>Gets the parent of this node.</para><para>&lt;simplesect kind='return'&gt;<para>&lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_config_node' kindref='compound'&gt;PluginConfigNode&lt;/ref&gt; or null if root node.</para>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="T:KSP.IO.PluginConfiguration"><para>Acts as a proxy between plugins and the filesystem so plugins can&amp;apos;t go and mess with stuff outside of &lt;ref refid='namespace_k_s_p' kindref='compound'&gt;KSP&lt;/ref&gt;&amp;apos;s install dir. Saves as an XML file in PluginData/assemblyname[/flightname]/config.xml.</para><remarks>- From N3X15: PluginConfiguration was something I threw together a while ago to try and improve settings serialization. The INI files we were using just couldn't cope with newlines and had all sorts of horrible workarounds. Instead of INI files, it writes structured XML files that look like this:</remarks><para><code>&amp;lt;config&amp;gt;    &amp;lt;int name="int"\&amp;gt;4&amp;lt;/int&amp;gt;    &amp;lt;long name="long"&amp;gt;45&amp;lt;/long&amp;gt;    &amp;lt;short name="short"&amp;gt;4&amp;lt;/short&amp;gt;    &amp;lt;byte name="byte"&amp;gt;255&amp;lt;/byte&amp;gt;    &amp;lt;bool name="bool"&amp;gt;1&amp;lt;/bool&amp;gt;    &amp;lt;vector3 name="vector3"&amp;gt;        &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;        &amp;lt;y&amp;gt;1&amp;lt;/y&amp;gt;        &amp;lt;z&amp;gt;2&amp;lt;/z&amp;gt;    &amp;lt;/vector3&amp;gt;    &amp;lt;vector3d name="vector3d"&amp;gt;        &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;        &amp;lt;y&amp;gt;1&amp;lt;/y&amp;gt;        &amp;lt;z&amp;gt;2.05&amp;lt;/z&amp;gt;    &amp;lt;/vector3d&amp;gt;    &amp;lt;string name="string"&amp;gt;string&amp;lt;/string&amp;gt;  &amp;lt;/config&amp;gt;</code></para><para>Despite looking a bit messy, it's actually a lot easier to use and doesn't have as many drawbacks as INI files. Newlines are preserved, and most importantly, types are also preserved. Oh, and it's UTF-8 encoded, so internationalization won't be as much as a problem, theoretically. Here's how to use it:</para><para><code>PluginConfiguration cfg = PluginConfiguration.CreateForType&amp;lt;MyCoolModule&amp;gt;(); cfg["a string"] = "I love KSP!"; cfg["another setting"] = new Vector3d(0,1,2); cfg.save(); // Later... cfg.load(); settingAString = cfg.GetValue&amp;lt;string&amp;gt;("a string"); settingAVector = cfg.GetValue&amp;lt;Vector3d&amp;gt;("another setting");</code></para></member><member name="P:KSP.IO.PluginConfiguration.Item"></member><member name="M:KSP.IO.PluginConfiguration.Equals(object)"></member><member name="M:KSP.IO.PluginConfiguration.Finalize"></member><member name="M:KSP.IO.PluginConfiguration.GetHashCode"></member><member name="M:KSP.IO.PluginConfiguration.GetType"></member><member name="M:KSP.IO.PluginConfiguration.GetValue(string)"><para>Get a typed value from the root node.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The type you want</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The key you want to access&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The value you wanted, or null if the key didn&amp;apos;t exist.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Get a typed value from the root node.</remarks><typeparam name="T"/><param name="key"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.GetValue(string,T)"><para>Get a typed value from the root node, and set to a default if it doesn&amp;apos;t exist.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The type you want</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The key you want to access&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;_default&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The default value, if the key doesn&amp;apos;t exist in the map&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The value you wanted, or the default if the key didn&amp;apos;t exist.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Get a typed value from the root node, and set to a default if it doesn't exist.</remarks><typeparam name="T"/><param name="key"/><param name="_default"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.load"><para>Load from disk</para><remarks>- Load from disk</remarks></member><member name="M:KSP.IO.PluginConfiguration.MemberwiseClone"></member><member name="M:KSP.IO.PluginConfiguration.save"><para>Commit changes to disk</para><remarks>- Commit changes to disk</remarks></member><member name="M:KSP.IO.PluginConfiguration.SetValue(string,object)"><para>Set a configuration key&amp;apos;s value</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;key&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The key&amp;apos;s name</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;A value&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; - Set a configuration key's value  &lt;param name="key"&gt;&lt;/param&gt; &lt;param name="value"&gt;&lt;/param&gt;</remarks></member><member name="M:KSP.IO.PluginConfiguration.ToString"></member><member name="M:KSP.IO.PluginConfiguration.CreateForType(Vessel)"><para>Initialize the configuration object</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Initialize the configuration object</remarks><typeparam name="T"/><param name="flight"/><returns/></member><member name="M:KSP.IO.PluginConfiguration.#ctor(string)"><para>Don&amp;apos;t use this, use Create.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pathToFile&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>-</remarks></member><member name="T:KSP.IO.SeekOrigin"><summary>This enum is a replacement for its System.IO equivalent. It's used to determine from where one wishes to seek in a file stream.</summary></member><member name="T:KSP.IO.TextReader"><para>Sandboxed version of &lt;ref refid='class_k_s_p_1_1_i_o_1_1_text_reader' kindref='compound'&gt;TextReader&lt;/ref&gt; class from System.IO.</para><remarks>- Identical to System.IO.TextReader, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.</remarks></member><member name="P:KSP.IO.TextReader.BaseStream"></member><member name="P:KSP.IO.TextReader.CurrentEncoding"></member><member name="P:KSP.IO.TextReader.EndOfStream"></member><member name="M:KSP.IO.TextReader.Close"></member><member name="M:KSP.IO.TextReader.DiscardBufferedData"></member><member name="M:KSP.IO.TextReader.Dispose"></member><member name="M:KSP.IO.TextReader.Equals(object)"></member><member name="M:KSP.IO.TextReader.Finalize"></member><member name="M:KSP.IO.TextReader.GetHashCode"></member><member name="M:KSP.IO.TextReader.GetType"></member><member name="M:KSP.IO.TextReader.MemberwiseClone"></member><member name="M:KSP.IO.TextReader.Peek"></member><member name="M:KSP.IO.TextReader.Read"></member><member name="M:KSP.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextReader.Read(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextReader.ReadLine"></member><member name="M:KSP.IO.TextReader.ReadToEnd"></member><member name="M:KSP.IO.TextReader.ToString"></member><member name="M:KSP.IO.TextReader.CreateForType(string,Vessel)"><para>Create a text reader stream.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Create a text reader stream.</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.IO.TextWriter"><summary>Identical to System.IO.TextWriter, but with added IDisposable methods (for use in using() statements), and a factory method instead of constructors.</summary></member><member name="P:KSP.IO.TextWriter.Encoding"></member><member name="P:KSP.IO.TextWriter.FormatProvider"></member><member name="P:KSP.IO.TextWriter.NewLine"></member><member name="M:KSP.IO.TextWriter.Close"></member><member name="M:KSP.IO.TextWriter.Dispose"></member><member name="M:KSP.IO.TextWriter.Equals(object)"></member><member name="M:KSP.IO.TextWriter.Finalize"></member><member name="M:KSP.IO.TextWriter.Flush"></member><member name="M:KSP.IO.TextWriter.GetHashCode"></member><member name="M:KSP.IO.TextWriter.GetType"></member><member name="M:KSP.IO.TextWriter.MemberwiseClone"></member><member name="M:KSP.IO.TextWriter.ToString"></member><member name="M:KSP.IO.TextWriter.Write(string)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.Write(string,object,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char[])"></member><member name="M:KSP.IO.TextWriter.Write(object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Double)"></member><member name="M:KSP.IO.TextWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.Write(System.Single)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.Write(System.Int32)"></member><member name="M:KSP.IO.TextWriter.Write(string,object,object,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.Write(string,object[])"></member><member name="M:KSP.IO.TextWriter.Write(System.Char)"></member><member name="M:KSP.IO.TextWriter.Write(System.Boolean)"></member><member name="M:KSP.IO.TextWriter.Write(System.Int64)"></member><member name="M:KSP.IO.TextWriter.Write(string,object)"></member><member name="M:KSP.IO.TextWriter.Write(System.Char)"></member><member name="M:KSP.IO.TextWriter.Write(char[])"></member><member name="M:KSP.IO.TextWriter.Write(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.Write(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.Write(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Int64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Boolean)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Double)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(string,object,object,object)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Single)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(string)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Int32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Char)"></member><member name="M:KSP.IO.TextWriter.WriteLine(char[])"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.Decimal)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt32)"></member><member name="M:KSP.IO.TextWriter.WriteLine(System.UInt64)"></member><member name="M:KSP.IO.TextWriter.WriteLine(char[],System.Int32,System.Int32)"></member><member name="M:KSP.IO.TextWriter.CreateForType(string,Vessel)"><para>Create a text writing stream</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The plugin type for which it is being initialized</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flight&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Optional flight&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;returns a &lt;ref refid='class_k_s_p_1_1_i_o_1_1_plugin_configuration' kindref='compound'&gt;PluginConfiguration&lt;/ref&gt; object&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; - Create a text writing stream</remarks><typeparam name="T"/><param name="filename"/><param name="flight"/><returns/></member><member name="T:KSP.UI.Screens.ApplicationLauncher"><summary>The application launcher is the set of buttons that appear in the upper right, including for example the resource tab. You can add your own buttons to this toolbar.   See http://forum.kerbalspaceprogram.com/threads/86682-Appilcation-Launcher-and-Mods?p=1303921#post1303921</summary></member><member name="F:KSP.UI.Screens.ApplicationLauncher.anchor"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.appSpace"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.launcherSpace"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.listItemPrefab"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.listResizer"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListBtnLeft"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListBtnRight"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListDivider"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.modListResizer"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.prefab_horizontalRightLeft"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.prefab_verticalTopDown"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.tmpButtonStorage"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.tmpModButtonStorage"></member><member name="F:KSP.UI.Screens.ApplicationLauncher.Ready"><summary>Don't try to add buttons before ApplicationLauncher.Ready is true. If it's currently false, you can register for the GameEvents.onGUIApplicationLauncherReady event which will fire when the application launcher becomes ready to have buttons added to it.</summary></member><member name="P:KSP.UI.Screens.ApplicationLauncher.CurrentLayout"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.enabled"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.gameObject"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.hideFlags"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.IsPositionedAtTop"><summary>Whether the application launcher toolbar is positioned in the top right or in the bottom right (it's in the bottom right in the editor).</summary></member><member name="P:KSP.UI.Screens.ApplicationLauncher.name"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.tag"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.transform"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.useGUILayout"></member><member name="P:KSP.UI.Screens.ApplicationLauncher.Instance"><summary>The single instance of ApplicationLauncher; call all the methods of this class using this instance.</summary></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(Callback,Callback,Callback,Callback,Callback,Callback,UnityEngine.Texture)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(Callback,Callback,Callback,Callback,Callback,Callback,UnityEngine.Animator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,PackedSprite)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,Texture)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(Callback,Callback,Callback,Callback,Callback,Callback,KSP.UI.Screens.ApplicationLauncher+AppScenes,UnityEngine.Texture)"><para>Add a MOD(3rd party) application to the Application Launcher. Use &lt;ref refid='class_k_s_p_1_1_u_i_1_1_screens_1_1_application_launcher_button_1a779c5ca83ff386cb0dea3d5a57591706' kindref='member'&gt;ApplicationLauncherButton.VisibleInScenes&lt;/ref&gt; to set where the button should be displayed.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onTrue&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is toggeled on</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onFalse&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is toggeled off&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onHover&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the mouse is hovering over the button&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onHoverOut&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the mouse hoveris off the button&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onEnable&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is shown or enabled by the application launcher&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onDisable&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is hidden or disabled by the application launcher&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;visibleInScenes&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The &amp;quot;scenes&amp;quot; this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;texture&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The 38x38 Texture to use for the button icon.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(Callback,Callback,Callback,Callback,Callback,Callback,KSP.UI.Screens.ApplicationLauncher+AppScenes,UnityEngine.Animator)"><para>Add a MOD(3rd party) application to the Application Launcher. Use &lt;ref refid='class_k_s_p_1_1_u_i_1_1_screens_1_1_application_launcher_button_1a779c5ca83ff386cb0dea3d5a57591706' kindref='member'&gt;ApplicationLauncherButton.VisibleInScenes&lt;/ref&gt; to set where the button should be displayed.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onTrue&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is toggeled on</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onFalse&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is toggeled off&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onHover&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the mouse is hovering over the button&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onHoverOut&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the mouse hoveris off the button&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onEnable&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is shown or enabled by the application launcher&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;onDisable&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Callback for when the button is hidden or disabled by the application launcher&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;visibleInScenes&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The &amp;quot;scenes&amp;quot; this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;sprite&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The 38x38 &amp;apos;Animator&amp;apos; animation to use for the button icon. Use &lt;ref refid='class_k_s_p_1_1_u_i_1_1_screens_1_1_application_launcher_button_1ad9d55dc7c832a0f6c65b02be7dc194b8' kindref='member'&gt;ApplicationLauncherButton.PlayAnim()&lt;/ref&gt; to play the animation.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,ApplicationLauncher.AppScenes,PackedSprite)"><summary>Add a MOD(3rd party) application to the Application Launcher. Use ApplicationLauncherButton.VisibleInScenes to set where the button should be displayed.   Note that the application launcher is destroyed when the player exits to the main menu. If the player then  loads up a new save the application launcher will be recreated and you will have to re-add your button.  Register for GameEvents.onGUIApplicationLauncherDestroyed and GameEvents.onGUIApplicationLauncherReady to detect when the application launcher has been destroyed and when it has been re-created.</summary><param name="onTrue">Callback for when the button is toggeled on</param><param name="onFalse">Callback for when the button is toggeled off</param><param name="onHover">Callback for when the mouse is hovering over the button</param><param name="onHoverOut">Callback for when the mouse hoveris off the button</param><param name="onEnable">Callback for when the button is shown or enabled by the application launcher</param><param name="onDisable">Callback for when the button is hidden or disabled by the application launcher</param><param name="visibleInScenes">The "scenes" this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;</param><param name="sprite">The 38x38 PackedSprite animation to use for the button icon. Use ApplicationLauncherButton.PlayAnim() to play the animation.</param><returns/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddModApplication(RUIToggleButton.OnTrue,RUIToggleButton.OnFalse,RUIToggleButton.OnHover,RUIToggleButton.OnHoverOut,RUIToggleButton.OnEnable,RUIToggleButton.OnDisable,ApplicationLauncher.AppScenes,Texture)"><summary>Add a MOD(3rd party) application to the Application Launcher. Use ApplicationLauncherButton.VisibleInScenes to set where the button should be displayed.   Note that the application launcher is destroyed when the player exits to the main menu. If the player then  loads up a new save the application launcher will be recreated and you will have to re-add your button.  Register for GameEvents.onGUIApplicationLauncherDestroyed and GameEvents.onGUIApplicationLauncherReady to detect when the application launcher has been destroyed and when it has been re-created.</summary><param name="onTrue">Callback for when the button is toggeled on</param><param name="onFalse">Callback for when the button is toggeled off</param><param name="onHover">Callback for when the mouse is hovering over the button</param><param name="onHoverOut">Callback for when the mouse hoveris off the button</param><param name="onEnable">Callback for when the button is shown or enabled by the application launcher</param><param name="onDisable">Callback for when the button is hidden or disabled by the application launcher</param><param name="visibleInScenes">The "scenes" this button will be visible in. For example VisibleInScenes = ApplicationLauncher.AppScenes.FLIGHT | ApplicationLauncher.AppScenes.MAPVIEW;</param><param name="texture">The 38x38 Texture to use for the button icon.</param><returns/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnHideCallback(KSP.UI.Screens.ApplicationLauncher+OnHide)"><summary>Register a method that will be called when the ApplicationLauncher GUI hides itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnRepositionCallback(KSP.UI.Screens.ApplicationLauncher+OnReposition)"><summary>Register a method that will be called when the ApplicationLauncher moves from the top right to the bottom right, or vice versa.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.AddOnShowCallback(KSP.UI.Screens.ApplicationLauncher+OnShow)"><summary>Register a method that will be called when the ApplicationLauncher GUI shows itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CancelInvoke"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.CompareTag(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Contains(KSP.UI.Screens.ApplicationLauncherButton,bool&amp;)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Contains(ApplicationLauncherButton,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.DetermineVisibility(KSP.UI.Screens.ApplicationLauncherButton)"><para>Determine if an app should be shown/hidden and then show/hide it&amp;apos;s button</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;button&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The application button to show/hide</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; -</remarks></member><member name="M:KSP.UI.Screens.ApplicationLauncher.DisableMutuallyExclusive(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Reverses the effect of EnableMutuallyExclusive()</summary><param name="launcherButton"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.EnableMutuallyExclusive(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Makes your application hide the stock applications when opened, and  makes stock applications hide your appliction when opened.</summary><param name="launcherButton"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Equals(object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Finalize"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponent(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentInParent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents(List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponents"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetHashCode"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetInstanceID"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetKnowledgeBaseList"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.GetType"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Hide"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.IsInvoking"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.MemberwiseClone"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnHide"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnReposition"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.OnShow"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveApplication(KSP.UI.Screens.ApplicationLauncherButton)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveModApplication(KSP.UI.Screens.ApplicationLauncherButton)"><summary>Removes your button from the application launcher toolbar.</summary><param name="button"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnHideCallback(KSP.UI.Screens.ApplicationLauncher+OnHide)"><summary>Un-register a method that will be called when the ApplicationLauncher GUI hides itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnRepositionCallback(KSP.UI.Screens.ApplicationLauncher+OnReposition)"><summary>Un-register a method that will be called when the ApplicationLauncher moves from the top right to the bottom right, or vice versa.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.RemoveOnShowCallback(KSP.UI.Screens.ApplicationLauncher+OnShow)"><summary>Un-register a method that will be called when the ApplicationLauncher GUI shows itself.</summary><param name="del"/></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.ShouldBeVisible(KSP.UI.Screens.ApplicationLauncherButton)"><para>Should this app button be visible?</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;button&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The application button to determine visibility for.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>True if the application button should be visible.</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:KSP.UI.Screens.ApplicationLauncher.Show"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.ToString"></member><member name="M:KSP.UI.Screens.ApplicationLauncher.#ctor"></member><member name="T:KSP.UI.Screens.EditorActionGroups"><summary>The top-level object representing the Action Group Editor window in the VAB/SPH.</summary></member><member name="F:KSP.UI.Screens.EditorActionGroups.actionGroupList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.actionGroupPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupActionsList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupPartActionPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.groupPartTitlePrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionList"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionResetPrefab"></member><member name="F:KSP.UI.Screens.EditorActionGroups.partActionTitlePrefab"></member><member name="P:KSP.UI.Screens.EditorActionGroups.enabled"></member><member name="P:KSP.UI.Screens.EditorActionGroups.gameObject"></member><member name="P:KSP.UI.Screens.EditorActionGroups.hideFlags"></member><member name="P:KSP.UI.Screens.EditorActionGroups.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.EditorActionGroups.name"></member><member name="P:KSP.UI.Screens.EditorActionGroups.SelectedGroup"></member><member name="P:KSP.UI.Screens.EditorActionGroups.tag"></member><member name="P:KSP.UI.Screens.EditorActionGroups.transform"></member><member name="P:KSP.UI.Screens.EditorActionGroups.useGUILayout"></member><member name="P:KSP.UI.Screens.EditorActionGroups.Instance"><summary>Call this to get the current instance of the Action Group Editor window.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.ActivateInterface(ShipConstruct)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.AddActionToGroup(KSP.UI.Screens.EditorActionPartItem)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.AddToSelection(KSP.UI.Screens.EditorActionPartSelector)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CancelInvoke"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ClearSelection(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.CompareTag(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.DeactivateInterface(ShipConstruct)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Equals(object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Finalize"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponent(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentInParent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents(List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponents"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetHashCode"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetInstanceID"></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetSelectedParts"><summary>Returns list of currently selected parts by mouse left-click. Returns multiple parts when placed in symmetry and returns all parts in that symmetry placement. Note it is uncertain if the part left-clicked is always first in the returned list.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.GetType"></member><member name="M:KSP.UI.Screens.EditorActionGroups.HasSelectedParts"></member><member name="M:KSP.UI.Screens.EditorActionGroups.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.IsInvoking"></member><member name="M:KSP.UI.Screens.EditorActionGroups.MemberwiseClone"></member><member name="M:KSP.UI.Screens.EditorActionGroups.RemoveActionFromGroup(KSP.UI.Screens.EditorActionPartItem)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ResetPart(KSP.UI.Screens.EditorActionPartSelector)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SelectGroup"><summary>Intended purpose of this method is unclear. However, calling it refreshes the Action Group Editor window if data has changed behind the scenes and the window is displayed stale data.</summary></member><member name="M:KSP.UI.Screens.EditorActionGroups.SelectionContains(Part)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.EditorActionGroups.ToString"></member><member name="M:KSP.UI.Screens.EditorActionGroups.#ctor"></member><member name="T:KSP.UI.Screens.Flight.KerbalPortrait"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.evaButton"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.evaTooltip"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.geeMeterContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.geeMeterImage"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.geeMeterTooltip"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.hoverArea"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.hoverObjectsContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.ivaButton"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.ivaTooltip"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.lvlSprites"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.nameField"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.overlayImg"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.portrait"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.rectContainment"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleLevelImage"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleObjectsContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.roleText"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortrait.tooltip"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.crewMember"><summary>The kerbal class instance of the kerbal this portrait is attached to.</summary></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.crewMemberName"><summary>The name of the kerbal this portrait is attached to.</summary></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.enabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.gameObject"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.hideFlags"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.name"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.tag"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.transform"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortrait.useGUILayout"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CancelInvoke"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ClickEVA"><summary>Called when you click the EVA button in the portrait (or call it from your code). Will cause the kerbal to perform an EVA.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ClickIVA"><summary>Called when you click the View (IVA) button in the portrait (or call it from your code). Will cause the Camera to switch to IVA mode focused on the kerbal this portrait is attached to.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.CompareTag(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Equals(object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Finalize"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponent(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponents"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetHashCode"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetInstanceID"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.GetType"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.IsInvoking"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.MemberwiseClone"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnBecameInvisible"><summary>Called when this portrait is scrolled off the screen.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnBecameVisible"><summary>Called when this portrait is scrolled onto the screen.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnCrewDie"><summary>Called when the kerbal attached to this portrait dies.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OnOverlayUpdate(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.OverlayUpdate(System.Boolean,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.Setup(Kerbal,UnityEngine.RectTransform)"><para>&amp;lt; update once to avoid a weird first frame</para><remarks>- Called when this portrait is created.</remarks></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.ToString"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortrait.#ctor"></member><member name="T:KSP.UI.Screens.Flight.KerbalPortraitGallery"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.activeCrew"><para>Lists all crewmembers which can be portraited at any given time</para></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.areaHover"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.btnAddSlot"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.btnLeft"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.btnRemSlot"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.btnRight"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.dirty"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.firstPortrait"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.hoverArea"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.ivaOverlay"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.IVAOverlayButton"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.lastMode"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.leftEdgePadding"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.leftScreenEdge"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraitContainer"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.PortraitHeight"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraitLayoutParent"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraitPrefab"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraits"><para>Lists the crew portraits currently displayed (may be only a subset of active crew)</para></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.portraitViewport"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.PortraitWidth"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.refreshCoroutine"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.resetCoroutine"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.usableSpace"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.GalleryCapacity"></member><member name="F:KSP.UI.Screens.Flight.KerbalPortraitGallery.GalleryMaxSize"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.ActiveCrew"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.countPortraits"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.enabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.gameObject"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.hideFlags"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.isActiveAndEnabled"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.lastPortrait"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.name"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.Portraits"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.tag"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.transform"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.useGUILayout"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.Instance"></member><member name="P:KSP.UI.Screens.Flight.KerbalPortraitGallery.isIVAOverlayVisible"><para>Is the IVAOverlay currently visible</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Awake"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CancelInvoke"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CancelInvoke(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.ClearPortraits"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.CompareTag(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnInactivePortraits"><para>&amp;lt; also handles the remove</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnPortrait(Kerbal)"><para>Destroys the portrait for the given crewmember, if it exists</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;crewMember&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.DespawnPortrait(KSP.UI.Screens.Flight.KerbalPortrait)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Equals(object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Finalize"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponent(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponents"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInChildren(List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Type)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetComponentsInParent"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetHashCode"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetInstanceID"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetMaxGalleryCapacity(System.Single,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetPortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.GetType"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.HoverArea_onPointerEnter(XSelectable,UnityEngine.EventSystems.PointerEventData)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.HoverArea_onPointerExit(XSelectable,UnityEngine.EventSystems.PointerEventData)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Invoke(string,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.IsInvoking(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.IsInvoking"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.MemberwiseClone"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnAddSlot"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnLeft"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnRemSlot"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onBtnRight"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.OnCameraChange(CameraManager+CameraMode)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onCrewTransferred(GameEvents+HostedFromToAction)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.OnDestroy"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onIVAOverlayDismiss"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onIVAOverlayPress(System.Boolean)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.OnKerbalLevelUp(ProtoCrewMember)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.onVesselWasModified(Vessel)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.RegisterActiveCrew(Kerbal)"><summary>Register a Kerbal crewmember to the Portrait Gallery. Beware this will duplicate portraits if the crewmember is already in the list.
The list itself cannot be accessed as it is a private list. You can call UnRegisterActiveCrew before calling this. But that kind of defeats the purpose. The best bet is to attach to the portraitPrefab instance and build your own list. If you unregistered the kerbal previously and called kerbal.SetVisibleInPortrait(false) and set kerbal.inPart to null that you have to reverse this and set their inPart and SetVisibleInPortrait(true) before calling this method.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SetActivePortraitsForVessel(Vessel)"><para>&amp;lt; start up however many portraits will fit in the gallery at once. Leave not-shown IVA spaces de-spawned until they are needed</para><para>&amp;lt; spawn portraits for crews which don&amp;apos;t have one yet</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.SpawnPortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Start"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(string,object)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartRefresh(Vessel)"><para>Starts a delayed check which only removes kerbals that no longer exist before refreshing the gallery.</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StartReset(Vessel)"><para>Starts a delayed check, removing all kerbals from the gallery, then refreshing it.</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopAllCoroutines"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(string)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.ToString"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UIControlsUpdate"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UnregisterActiveCrew(Kerbal)"><summary>UnRegister a Kerbal crewmember to the Portrait Gallery. They will respawn a portrait though unless you set the kerbal.inPart to null and set the kerbal.SetVisibleInPortrait(false) first. If you do this, don't forget to set the kerbal.SetVisibleInPortrait(true) before you ReigsterActiveCrew.</summary></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.Update"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UpdatePortrait(Kerbal)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.UpdatePortraitScrolling(System.Int32)"></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.ToggleIVAOverlay"><para>Toggle the IVAOverlay mode</para></member><member name="M:KSP.UI.Screens.Flight.KerbalPortraitGallery.#ctor"></member><member name="T:KSPAction"><para>Tells the compiler that this method is an action and allows you to set up the &lt;ref refid='namespace_k_s_p' kindref='compound'&gt;KSP&lt;/ref&gt; specific stuff. ** REQUIRED BY ALL ACTION METHODS **</para><remarks>- Apply this attribute to a function to allow it to be called via action groups.</remarks></member><member name="F:KSPAction.actionGroup"><para>Added to action groups here the event will fire on activate</para><remarks>- Which action groups this action is currently a part of? Probably you can test whether this action is part of a given action group (say, the Abort group) with</remarks><para><code>if((actionGroup &amp;amp; KSPActionGroup.Abort) != 0)</code></para></member><member name="F:KSPAction.advancedTweakable"><para>Does the action require advanced tweakables</para></member><member name="F:KSPAction.guiName"><para>The gui name for this action (userAction must be true)</para><remarks>- The name of this action as it appears in the action group editor.</remarks></member><member name="F:KSPAction.isPersistent"><para>Does this action get its active field serialized?</para></member><member name="F:KSPAction.requireFullControl"><para>Does this require full, not just partial, control?</para></member><member name="P:KSPAction.TypeId"></member><member name="M:KSPAction.Equals(object)"></member><member name="M:KSPAction.Finalize"></member><member name="M:KSPAction.GetHashCode"></member><member name="M:KSPAction.GetType"></member><member name="M:KSPAction.IsDefaultAttribute"></member><member name="M:KSPAction.Match(object)"></member><member name="M:KSPAction.MemberwiseClone"></member><member name="M:KSPAction.ToString"></member><member name="M:KSPAction.#ctor(string,KSPActionGroup)"></member><member name="M:KSPAction.#ctor(string)"></member><member name="M:KSPAction.#ctor(string,KSPActionGroup,System.Boolean)"></member><member name="M:KSPAction.#ctor(string,KSPActionGroup,System.Boolean,System.Boolean)"></member><member name="M:KSPAction.#ctor"></member><member name="T:KSPAddon"><summary>Apply this attribute to a class that derives from MonoBehaviour to have KSP automatically start up your addon at a specified time.   At the time specified by the "startup" argument KSP will create a new GameObject and attach your MonoBehaviour to it. You can then implement the Unity event functions like Start(), Update(), etc.</summary></member><member name="F:KSPAddon.once"><summary>Whether KSP should start up your addon just once per game session, or every time the startup time is reached. If you want your addon to persist forever, even through scene changes, after being started once, set once to true. call DontDestroyOnLoad(this) in your  Start() function.</summary></member><member name="F:KSPAddon.startup"><summary>When this addon should be started.</summary></member><member name="P:KSPAddon.TypeId"></member><member name="M:KSPAddon.Equals(object)"></member><member name="M:KSPAddon.Finalize"></member><member name="M:KSPAddon.GetHashCode"></member><member name="M:KSPAddon.GetType"></member><member name="M:KSPAddon.IsDefaultAttribute"></member><member name="M:KSPAddon.Match(object)"></member><member name="M:KSPAddon.MemberwiseClone"></member><member name="M:KSPAddon.ToString"></member><member name="M:KSPAddon.#ctor(KSPAddon+Startup,System.Boolean)"><summary>Constructor.</summary><param name="startup">When this addon should be started</param><param name="once">Whether KSP should start up your addon just once per game session, or every time the startup time is reached. If you want your addon to persist forever, even through scene changes, after being started once, set once to true. call DontDestroyOnLoad(this) in your  Start() function.</param></member><member name="T:KSPAssembly"><summary>This attribute and the KSPAssemblyDependency attribute can be used to ensure that plugin assemblies are loaded in the right order.   Suppose Mod A depends on mod B, which is currently at version 2.6.  Mod B should add the following line to the end of Properties/AssemblyInfo.cs:</summary><code>[assembly: KSPAssembly("ModBName", 2, 6)]</code><remarks>where "ModBName" is the name of Mod B (Mod B's .dll?). Replace 2 and 6 with the major and minor version of Mod B.  Then Mod A should add the following line to the end of Properties/AssemblyInfo.cs:</remarks><code>[assembly: KSPAssemblyDependency("ModBName", 2, 6)]</code><remarks>This will tell KSP that Mod A depends on version 2.6 of Mod B, and ensure the the assemblies get loaded in the proper order.</remarks></member><member name="F:KSPAssembly.name"></member><member name="F:KSPAssembly.versionMajor"></member><member name="F:KSPAssembly.versionMinor"></member><member name="P:KSPAssembly.TypeId"></member><member name="M:KSPAssembly.Equals(object)"></member><member name="M:KSPAssembly.Finalize"></member><member name="M:KSPAssembly.GetHashCode"></member><member name="M:KSPAssembly.GetType"></member><member name="M:KSPAssembly.IsDefaultAttribute"></member><member name="M:KSPAssembly.Match(object)"></member><member name="M:KSPAssembly.MemberwiseClone"></member><member name="M:KSPAssembly.ToString"></member><member name="M:KSPAssembly.#ctor(string,System.Int32,System.Int32)"></member><member name="T:KSPAssemblyDependency"><summary>This attribute and the KSPAssembly attribute can be used to ensure that plugin assemblies are loaded in the right order.   Suppose Mod A depends on mod B, which is currently at version 2.6.  Mod B should add the following line to the end of Properties/AssemblyInfo.cs:</summary><code>[assembly: KSPAssembly("ModBName", 2, 6)]</code><remarks>where "ModBName" is the name of Mod B (Mod B's .dll?). Replace 2 and 6 with the major and minor version of Mod B.  Then Mod A should add the following line to the end of Properties/AssemblyInfo.cs:</remarks><code>[assembly: KSPAssemblyDependency("ModBName", 2, 6)]</code><remarks>This will tell KSP that Mod A depends on version 2.6 of Mod B, and ensure the the assemblies get loaded in the proper order.</remarks></member><member name="F:KSPAssemblyDependency.name"></member><member name="F:KSPAssemblyDependency.versionMajor"></member><member name="F:KSPAssemblyDependency.versionMinor"></member><member name="P:KSPAssemblyDependency.TypeId"></member><member name="M:KSPAssemblyDependency.Equals(object)"></member><member name="M:KSPAssemblyDependency.Finalize"></member><member name="M:KSPAssemblyDependency.GetHashCode"></member><member name="M:KSPAssemblyDependency.GetType"></member><member name="M:KSPAssemblyDependency.IsDefaultAttribute"></member><member name="M:KSPAssemblyDependency.Match(object)"></member><member name="M:KSPAssemblyDependency.MemberwiseClone"></member><member name="M:KSPAssemblyDependency.ToString"></member><member name="M:KSPAssemblyDependency.#ctor(string,System.Int32,System.Int32)"></member><member name="T:KSPEvent"><para>Tells the compiler that this method is an action and allows you to set up the &lt;ref refid='namespace_k_s_p' kindref='compound'&gt;KSP&lt;/ref&gt; specific stuff. ** REQUIRED BY ALL ACTION METHODS **</para><remarks>- Apply this attribute to a function in a PartModule to make it callable by the player via the right click menu of the part, or from other plugin code via Part.SendEvent.  It seems like this attribute is NOT refreshed on parts already in flight when you rebuild  your module DLL! You need to launch a new ship with your part.</remarks></member><member name="F:KSPEvent.active"><para>Is this action initially active?</para><remarks>- Whether this event can be triggered through Part.SendEvent.</remarks></member><member name="F:KSPEvent.advancedTweakable"><para>Does this action require Advanced Tweakables to be enabled?</para></member><member name="F:KSPEvent.category"><para>A string category id so can display all actions of certain types</para><remarks>-</remarks></member><member name="F:KSPEvent.externalToEVAOnly"><para>If available from other vessels, require that the other vessel be an EVA?</para><remarks>- Whether the event is only available when out on EVA.</remarks></member><member name="F:KSPEvent.guiActive"><para>Is this action available to the user?</para><remarks>- Whether the event is shown as available in the right click menu (active must also be true).</remarks></member><member name="F:KSPEvent.guiActiveEditor"><para>Is this action available to the GUI in editor</para></member><member name="F:KSPEvent.guiActiveUncommand"><para>Is this action available while the vessel is not under control?</para></member><member name="F:KSPEvent.guiActiveUnfocused"><para>Is this action available while focused on another vessel?</para><remarks>- Whether the event is shown as available in the right click menu even when the part is on a ship not currently being controlled by the player (but close enough to right click).</remarks></member><member name="F:KSPEvent.guiIcon"><para>The guiIcon name (guiAction must be true)</para><remarks>-</remarks></member><member name="F:KSPEvent.guiName"><summary>The name shown for the event in the right click menu.</summary></member><member name="F:KSPEvent.isDefault"><para>Is this action assigned as the part&amp;apos;s default?</para><para>&lt;itemizedlist&gt;
&lt;listitem&gt;<para>Will override any previous default *</para>&lt;/listitem&gt;&lt;/itemizedlist&gt;</para><remarks>-</remarks></member><member name="F:KSPEvent.isPersistent"><para>Should this event&amp;apos;s fields be saved to craft/sfs</para></member><member name="F:KSPEvent.name"><para>The external name of this action</para><remarks>- The name of the event, which can be used to trigger the event using from plugin code using Part.SendEvent.</remarks></member><member name="F:KSPEvent.requireFullControl"><para>Does this require full, not just partial, control?</para></member><member name="F:KSPEvent.unfocusedRange"><para>if available from other vessels, what is the minimum range for activation?</para><remarks>- When the part is on a ship not being controlled by the player, how close the player needs to be (in meters) in order for the event to appear in the right click menu.</remarks></member><member name="P:KSPEvent.guiName"><para>The gui name for this action (userAction must be true)</para></member><member name="P:KSPEvent.TypeId"></member><member name="M:KSPEvent.Equals(object)"></member><member name="M:KSPEvent.Finalize"></member><member name="M:KSPEvent.GetHashCode"></member><member name="M:KSPEvent.GetType"></member><member name="M:KSPEvent.IsDefaultAttribute"></member><member name="M:KSPEvent.Match(object)"></member><member name="M:KSPEvent.MemberwiseClone"></member><member name="M:KSPEvent.ToString"></member><member name="M:KSPEvent.#ctor"></member><member name="T:KSPField"><para>Attribute applied to fields to make them persistant or available to the part action GUI</para><para>Automatic persistance can only be applied to types which implement the &lt;ref refid='interface_i_config_node' kindref='compound'&gt;IConfigNode&lt;/ref&gt; interface or one of the following.. string, bool, int, float, Vector2, Vector3, Vector4 or Quaternion</para><remarks>- Apply this attribute to a field in a PartModule or ScenarioModule to make the field  get automatically initialized from the cfg file, and optionally persistent. See  http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</remarks></member><member name="F:KSPField.advancedTweakable"><para>Does this require advanced tweakables?</para></member><member name="F:KSPField.category"><para>string category id</para><remarks>- Seemingly unused</remarks></member><member name="F:KSPField.guiActive"><para>Is this field active on gui</para><remarks>- Whether to show the value of this field in the right click menu of the part.</remarks></member><member name="F:KSPField.guiActiveEditor"><para>Is this field active in the editor</para><remarks>- Whether to show the value of this field in the right click menu of the part when in the VAB/SPH.</remarks></member><member name="F:KSPField.guiFormat"><para>The gui format string for this field (D4, F2, N0, etc). Blank if none</para><remarks>- The format string that will be passed to ToString when displaying the value of your field in the right click menu of the part? E.g. "F3" for a floating point number with 3 digits past the decimal point.</remarks></member><member name="F:KSPField.guiName"><summary>The name that will be shown for this field in the right click menu of the part.</summary></member><member name="F:KSPField.guiUnits"><summary>The units that will be shown for this field in the right click menu of the part.</summary></member><member name="F:KSPField.isPersistant"><para>Is this field persistant?</para><remarks>- Whether to store the value of this field in persistent.sfs when the game state is saved, and reload it from persistent.sfs when the game state is loaded.</remarks></member><member name="P:KSPField.guiName"><para>The field&amp;apos;s gui name</para></member><member name="P:KSPField.guiUnits"></member><member name="P:KSPField.TypeId"></member><member name="M:KSPField.Equals(object)"></member><member name="M:KSPField.Finalize"></member><member name="M:KSPField.GetHashCode"></member><member name="M:KSPField.GetType"></member><member name="M:KSPField.IsDefaultAttribute"></member><member name="M:KSPField.Match(object)"></member><member name="M:KSPField.MemberwiseClone"></member><member name="M:KSPField.ToString"></member><member name="M:KSPField.#ctor"></member><member name="T:KSPScenario"><summary>Like KSPAddon, but for ScenarioModules. Apply this attribute to your subclass of ScenarioModule and KSP will add it to the game at the right time.</summary></member><member name="F:KSPScenario.createOptions"></member><member name="F:KSPScenario.tgtScenes"><para>This is a positional argument.</para><remarks>-</remarks></member><member name="P:KSPScenario.TargetScenes"></member><member name="P:KSPScenario.TypeId"></member><member name="M:KSPScenario.Equals(object)"></member><member name="M:KSPScenario.Finalize"></member><member name="M:KSPScenario.GetHashCode"></member><member name="M:KSPScenario.GetType"></member><member name="M:KSPScenario.HasCreateOption(ScenarioCreationOptions)"></member><member name="M:KSPScenario.IsDefaultAttribute"></member><member name="M:KSPScenario.Match(object)"></member><member name="M:KSPScenario.MemberwiseClone"></member><member name="M:KSPScenario.ToString"></member><member name="M:KSPScenario.#ctor(ScenarioCreationOptions,GameScenes[])"><summary>Constructor.</summary><param name="createOptions">Directions about which games the scenario should be added to. Different options can be combined with the | operator.</param><param name="tgtScenes">A list of the game scenes to which the scenario should be added</param></member><member name="T:KSPUtil"></member><member name="F:KSPUtil.digitsScale"></member><member name="F:KSPUtil.longSIprefixes"></member><member name="F:KSPUtil.prefixMults"></member><member name="F:KSPUtil.shortSIprefixes"></member><member name="F:KSPUtil.unitIndex"></member><member name="P:KSPUtil.ApplicationRootPath"><para>Returns a filepath string that points to the game&amp;apos;s root folder (regardless of platform)</para></member><member name="P:KSPUtil.dateTimeFormatter"></member><member name="M:KSPUtil.Equals(object)"></member><member name="M:KSPUtil.Finalize"></member><member name="M:KSPUtil.GetHashCode"></member><member name="M:KSPUtil.GetType"></member><member name="M:KSPUtil.MemberwiseClone"></member><member name="M:KSPUtil.ToString"></member><member name="M:KSPUtil.Add(UnityEngine.Matrix4x4,UnityEngine.Matrix4x4)"><para>Strips out nas</para><para>Add a 4x4 Matrix into another one (does not allocate)</para></member><member name="M:KSPUtil.Add(UnityEngine.Matrix4x4&amp;,UnityEngine.Matrix4x4)"></member><member name="M:KSPUtil.AppendValueToString(string,string,System.Char)"></member><member name="M:KSPUtil.BearingDegrees(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)"><para>Returns an angle from -180° to 180° between the two vectors, based on the up axis to tell left from right</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v1&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v2&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;upAxis&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.BearingRadians(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)"><para>Returns an angle from -PI to PI between the two vectors, based on the up axis to tell left from right</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v1&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v2&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;upAxis&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.CheckVersion(string,System.Int32,System.Int32,System.Int32)"></member><member name="M:KSPUtil.CheckVersion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"><para>&amp;lt; allow for backward compatibility up to the last backward-compatible version</para></member><member name="M:KSPUtil.ClampRectToScreen(UnityEngine.Rect)"><para>Takes a Rect r and moves it inside the screen space</para></member><member name="M:KSPUtil.DeepCompare(HashSet,HashSet)"></member><member name="M:KSPUtil.Diag(UnityEngine.Matrix4x4)"><para>Returns the diagonal 3-vector from the 4x4 matrix (simulating 3x3 matrix)</para></member><member name="M:KSPUtil.FindComponentsImplementing(UnityEngine.GameObject,System.Boolean)"></member><member name="M:KSPUtil.FindInPartModel(UnityEngine.Transform,string)"></member><member name="M:KSPUtil.FindTagsInChildren(System.Collections.Generic.List,UnityEngine.Transform)"></member><member name="M:KSPUtil.FindTransformAtIndexPath(string,UnityEngine.Transform)"></member><member name="M:KSPUtil.GetAttachNodeInfo(string,string&amp;,string&amp;)"></member><member name="M:KSPUtil.GetLinkID(string)"></member><member name="M:KSPUtil.GetOrCreatePath(string)"><para>Returns a filepath that points to the given folders inside the game&amp;apos;s root folder (will create it if one isn&amp;apos;t found)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;relPath&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the path, relative to the game&amp;apos;s .exe location</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>the full filepath</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.GetPartByCraftID(System.Collections.Generic.List,System.UInt32)"></member><member name="M:KSPUtil.GetPartInfo(string,string&amp;,string&amp;)"></member><member name="M:KSPUtil.GetPartName(string)"></member><member name="M:KSPUtil.GetTransformIndexPathToRoot(UnityEngine.Transform,UnityEngine.Transform)"><para>&amp;lt; the first parent</para><para>&amp;lt; go through each parent up the tree until we reach the specified root</para></member><member name="M:KSPUtil.GetTransformPathToRoot(UnityEngine.Transform,UnityEngine.Transform)"><para>&amp;lt; the first parent</para><para>&amp;lt; go through each parent up the tree until we reach the specified root</para></member><member name="M:KSPUtil.HasAncestorTransform(UnityEngine.Transform,UnityEngine.Transform)"><para>Returns true if the src transform is a hierarchical descendant of the ancestor transform</para></member><member name="M:KSPUtil.HasDescendantTransform(UnityEngine.Transform,UnityEngine.Transform)"><para>Returns true if the src transform has the child transform as a descendant on its hierarchy</para></member><member name="M:KSPUtil.HeadingDegrees(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)"><para>Returns an angle from 0 to 360° between the two vectors, based on the up axis to tell left from right</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v1&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v2&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;upAxis&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.HeadingRadians(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)"><para>Returns an angle from 0 to 2PI between the two vectors, based on the up axis to tell left from right</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v1&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v2&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;upAxis&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.OuterProduct(UnityEngine.Vector3,UnityEngine.Vector3)"><para>Construct the outer product of two 3-vectors as a 4x4 matrix</para></member><member name="M:KSPUtil.OuterProduct(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Matrix4x4&amp;)"></member><member name="M:KSPUtil.OuterProduct2(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Matrix4x4&amp;)"></member><member name="M:KSPUtil.ParseArray(string,ParserMethod)"></member><member name="M:KSPUtil.ParseQuaternion(string)"></member><member name="M:KSPUtil.ParseQuaternion(string,string,string,string)"></member><member name="M:KSPUtil.ParseQuaternionD(string)"></member><member name="M:KSPUtil.ParseQuaternionD(string,string,string,string)"></member><member name="M:KSPUtil.ParseVector2(string)"><para>Parses a Vector2 from a comma-separated string of XYZ values</para></member><member name="M:KSPUtil.ParseVector2(string,string)"></member><member name="M:KSPUtil.ParseVector3(string)"><para>Parses a Vector3 from a comma-separated string of XYZ values</para></member><member name="M:KSPUtil.ParseVector3(string,string,string)"></member><member name="M:KSPUtil.ParseVector3d(string)"><para>Parses a Vector3 from a comma-separated string of XYZ values</para></member><member name="M:KSPUtil.ParseVector3d(string,string,string)"></member><member name="M:KSPUtil.ParseVector4(string)"><para>Parses a Vector4 from a comma-separated string of XYZ values</para></member><member name="M:KSPUtil.ParseVector4(string,string,string,string)"></member><member name="M:KSPUtil.PrintCollection(IEnumerable,string)"></member><member name="M:KSPUtil.PrintCollection(IEnumerable,string,Func)"></member><member name="M:KSPUtil.PrintCoordinates(System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintDate(System.Double,System.Boolean,System.Boolean)"><summary>returns a human readable string representing the current date/time of your KSP simulation (time since savegame was originally started).
Format as follows if you include time and seconds (example):
"Year 1, Day 1 - 0h, 24m, 43s"</summary></member><member name="M:KSPUtil.PrintDateCompact(System.Double,System.Boolean,System.Boolean)"><summary>returns a human readable string representing the current date/time of your KSP simulation (time since savegame was originally started).
Format as follows if you include time and seconds (example):
"Y1, D01, 0:24:45"</summary></member><member name="M:KSPUtil.PrintDateDelta(System.Double,System.Boolean,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintDateDeltaCompact(System.Double,System.Boolean,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintDateNew(System.Double,System.Boolean)"><summary>returns a human readable string representing the current date/time of your KSP simulation (time since savegame was originally started).
Format as follows if you include time (example):
"Year 1, Day 1 - 00:24:43"</summary></member><member name="M:KSPUtil.PrintLatitude(System.Double,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintLongitude(System.Double,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintModuleName(string)"><para>returns a string with an auto-generated pretty name for a module, given its class name-</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:KSPUtil.PrintSI(System.Double,string,System.Int32,System.Boolean)"></member><member name="M:KSPUtil.PrintSpacedStringFromCamelcase(string)"></member><member name="M:KSPUtil.PrintTime(System.Double,System.Int32,System.Boolean)"></member><member name="M:KSPUtil.PrintTimeCompact(System.Double,System.Boolean)"></member><member name="M:KSPUtil.PrintTimeLong(System.Double)"></member><member name="M:KSPUtil.PrintTimeStamp(System.Double,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.PrintTimeStampCompact(System.Double,System.Boolean,System.Boolean)"></member><member name="M:KSPUtil.RemoveNonHighlightableRenderers(System.Collections.Generic.List)"></member><member name="M:KSPUtil.ReplaceString(string,KSPUtil+StringReplacement[])"></member><member name="M:KSPUtil.SanitizeFilename(string)"><para>Strips out nasty characters for mac/pc filename creation</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;originalFilename&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KSPUtil.SanitizeString(string,System.Char,System.Boolean)"></member><member name="M:KSPUtil.StripFileExtension(System.IO.FileInfo)"></member><member name="M:KSPUtil.ToDiagonalMatrix(System.Single)"><para>Constructs diagonal matrix from a float (Identity * val)</para></member><member name="M:KSPUtil.ToDiagonalMatrix(System.Single,UnityEngine.Matrix4x4&amp;)"></member><member name="M:KSPUtil.ToDiagonalMatrix(UnityEngine.Vector3)"><para>Constructs diagonal matrix from a 3-vector (simulating 3x3 matrix)</para></member><member name="M:KSPUtil.ToDiagonalMatrix2(System.Single,UnityEngine.Matrix4x4&amp;)"></member><member name="M:KSPUtil.ToDiagonalMatrix2(UnityEngine.Vector3,UnityEngine.Matrix4x4&amp;)"></member><member name="M:KSPUtil.WriteArray(T[])"></member><member name="M:KSPUtil.WriteQuaternion(UnityEngine.Quaternion)"><para>Returns a comma-separated string for the given quaternion</para></member><member name="M:KSPUtil.WriteQuaternion(UnityEngine.QuaternionD)"><para>Returns a comma-separated string for the given quaternion</para></member><member name="M:KSPUtil.WriteVector(UnityEngine.Vector2)"><para>Returns a comma-separated string for the given vector</para></member><member name="M:KSPUtil.WriteVector(UnityEngine.Vector3)"><para>Returns a comma-separated string for the given vector</para></member><member name="M:KSPUtil.WriteVector(Vector3d)"><para>Returns a comma-separated string for the given vector</para></member><member name="M:KSPUtil.WriteVector(UnityEngine.Vector4)"><para>Returns a comma-separated string for the given vector</para></member><member name="T:KerbalAnimationManager"></member><member name="F:KerbalAnimationManager.clamber"></member><member name="F:KerbalAnimationManager.evaController"></member><member name="F:KerbalAnimationManager.flagPlant"></member><member name="F:KerbalAnimationManager.idle"></member><member name="F:KerbalAnimationManager.JumpFwdEnd"></member><member name="F:KerbalAnimationManager.JumpFwdStart"></member><member name="F:KerbalAnimationManager.JumpStillEnd"></member><member name="F:KerbalAnimationManager.JumpStillStart"></member><member name="F:KerbalAnimationManager.ladderClimb"></member><member name="F:KerbalAnimationManager.ladderDescend"></member><member name="F:KerbalAnimationManager.ladderGrabGrounded"></member><member name="F:KerbalAnimationManager.ladderGrabSuspended"></member><member name="F:KerbalAnimationManager.ladderIdle"></member><member name="F:KerbalAnimationManager.ladderLeanBack"></member><member name="F:KerbalAnimationManager.ladderLeanFwd"></member><member name="F:KerbalAnimationManager.ladderLeanLeft"></member><member name="F:KerbalAnimationManager.ladderLeanRight"></member><member name="F:KerbalAnimationManager.ladderPushOff"></member><member name="F:KerbalAnimationManager.ladderRelease"></member><member name="F:KerbalAnimationManager.packExtend"></member><member name="F:KerbalAnimationManager.packStow"></member><member name="F:KerbalAnimationManager.run"></member><member name="F:KerbalAnimationManager.seatIdle"></member><member name="F:KerbalAnimationManager.standUpFaceDown"></member><member name="F:KerbalAnimationManager.standUpFaceUp"></member><member name="F:KerbalAnimationManager.strafeLeft"></member><member name="F:KerbalAnimationManager.strafeRight"></member><member name="F:KerbalAnimationManager.suspendedIdle"></member><member name="F:KerbalAnimationManager.swimFwd"></member><member name="F:KerbalAnimationManager.swimIdle"></member><member name="F:KerbalAnimationManager.swimUpFaceDown"></member><member name="F:KerbalAnimationManager.swimUpFaceUp"></member><member name="F:KerbalAnimationManager.syncLayers"></member><member name="F:KerbalAnimationManager.turnLeft"></member><member name="F:KerbalAnimationManager.turnRight"></member><member name="F:KerbalAnimationManager.walkBack"></member><member name="F:KerbalAnimationManager.walkFwd"></member><member name="F:KerbalAnimationManager.walkLowGee"></member><member name="F:KerbalAnimationManager.walkLowGeeLeft"></member><member name="F:KerbalAnimationManager.walkLowGeeRight"></member><member name="F:KerbalAnimationManager.walkLowGeeSuspendedLeft"></member><member name="F:KerbalAnimationManager.walkLowGeeSuspendedRight"></member><member name="M:KerbalAnimationManager.Equals(object)"></member><member name="M:KerbalAnimationManager.Finalize"></member><member name="M:KerbalAnimationManager.GetAllAnimations"></member><member name="M:KerbalAnimationManager.GetHashCode"></member><member name="M:KerbalAnimationManager.GetType"></member><member name="M:KerbalAnimationManager.MemberwiseClone"></member><member name="M:KerbalAnimationManager.setupAnimation(string,KerbalAnimationState)"></member><member name="M:KerbalAnimationManager.Start(KerbalEVA)"></member><member name="M:KerbalAnimationManager.SyncAnimationLayers"><summary>Syncs up animations that affect different parts of the Kerbal's body. This allows, for example, the animation of the arms while the legs move when walking forward and putting away the jetpack controls.</summary></member><member name="M:KerbalAnimationManager.ToString"></member><member name="M:KerbalAnimationManager.#ctor"></member><member name="T:KerbalEVA"><summary>Kerbals on EVA are represented as vessels with a single part. That part contains a KerbalEVA PartModule.</summary></member><member name="F:KerbalEVA._animation"></member><member name="F:KerbalEVA._currentLadderPart"></member><member name="F:KerbalEVA._flags"></member><member name="F:KerbalEVA._rigidbody"></member><member name="F:KerbalEVA.advRagdoll"></member><member name="F:KerbalEVA.Animations"></member><member name="F:KerbalEVA.autoGrabLadderOnStart"><para>If true, kerbal will auto-grab the ladder s/he is next to when StartEVA runs. Note that the check is done the frame after OnStart starts, so if you spawn and then set, it will be correct when it&amp;apos;s checked next frame.</para></member><member name="F:KerbalEVA.boundAttack"></member><member name="F:KerbalEVA.boundFallThreshold"></member><member name="F:KerbalEVA.boundForce"></member><member name="F:KerbalEVA.boundFrequency"></member><member name="F:KerbalEVA.boundLeftFoot"></member><member name="F:KerbalEVA.boundRelease"></member><member name="F:KerbalEVA.boundSharpness"></member><member name="F:KerbalEVA.boundSpeed"></member><member name="F:KerbalEVA.boundThreshold"></member><member name="F:KerbalEVA.canRecover"></member><member name="F:KerbalEVA.centrifugalForce"></member><member name="F:KerbalEVA.characterColliders"></member><member name="F:KerbalEVA.CharacterFrameMode"></member><member name="F:KerbalEVA.CharacterFrameModeToggle"></member><member name="F:KerbalEVA.clamberHitInfo"></member><member name="F:KerbalEVA.clamberMaxAlt"></member><member name="F:KerbalEVA.clamberOrigin"></member><member name="F:KerbalEVA.clamberPath"></member><member name="F:KerbalEVA.clamberReach"></member><member name="F:KerbalEVA.clamberStandoff"></member><member name="F:KerbalEVA.clamberTarget"></member><member name="F:KerbalEVA.cmdDir"></member><member name="F:KerbalEVA.cmdRot"></member><member name="F:KerbalEVA.coriolisForce"></member><member name="F:KerbalEVA.currentAirlockPart"></member><member name="F:KerbalEVA.currentAirlockTrigger"></member><member name="F:KerbalEVA.currentLadder"></member><member name="F:KerbalEVA.currentLadderTriggers"></member><member name="F:KerbalEVA.currentSpd"></member><member name="F:KerbalEVA.deltaHdg"></member><member name="F:KerbalEVA.derivative"></member><member name="F:KerbalEVA.ejectDirection"></member><member name="F:KerbalEVA.error"></member><member name="F:KerbalEVA.fFwd"></member><member name="F:KerbalEVA.flag"></member><member name="F:KerbalEVA.flagReach"></member><member name="F:KerbalEVA.flagSpot"></member><member name="F:KerbalEVA.footPivot"></member><member name="F:KerbalEVA.fRgt"></member><member name="F:KerbalEVA.fsm"></member><member name="F:KerbalEVA.fuelFlowRate"></member><member name="F:KerbalEVA.fUp"></member><member name="F:KerbalEVA.geeForce"></member><member name="F:KerbalEVA.halfHeight"></member><member name="F:KerbalEVA.headLamp"></member><member name="F:KerbalEVA.hopThreshold"></member><member name="F:KerbalEVA.iC"></member><member name="F:KerbalEVA.initialMass"></member><member name="F:KerbalEVA.integral"></member><member name="F:KerbalEVA.invLadderAxis"></member><member name="F:KerbalEVA.isEnabled"></member><member name="F:KerbalEVA.isRagdoll"><summary>Indicates whether the Kerbal is currently in ragdoll mode or not.</summary></member><member name="F:KerbalEVA.JetpackDeployed"><summary>Indicates whether the jetpack is switched on or not.</summary></member><member name="F:KerbalEVA.JetpackIsThrusting"><summary>Indicates whether the jetpack is actively thrusting</summary></member><member name="F:KerbalEVA.jumpForce"></member><member name="F:KerbalEVA.Kd"></member><member name="F:KerbalEVA.kerbalSeat"></member><member name="F:KerbalEVA.kerbalVesselInfo"></member><member name="F:KerbalEVA.Ki"></member><member name="F:KerbalEVA.Kp"></member><member name="F:KerbalEVA.ladderClimbSpeed"></member><member name="F:KerbalEVA.ladderFwd"></member><member name="F:KerbalEVA.ladderPivot"></member><member name="F:KerbalEVA.ladderPos"></member><member name="F:KerbalEVA.ladderPushoffForce"></member><member name="F:KerbalEVA.ladderTgtRPos"></member><member name="F:KerbalEVA.ladderTransition"></member><member name="F:KerbalEVA.ladderUp"></member><member name="F:KerbalEVA.lampOn"><summary>Indicates whether the headlamp is on or off</summary></member><member name="F:KerbalEVA.lastBoundStep"></member><member name="F:KerbalEVA.lastCollisionDirection"></member><member name="F:KerbalEVA.lastCollisionNormal"></member><member name="F:KerbalEVA.lastCollisionTime"></member><member name="F:KerbalEVA.lastDeltaHdg"></member><member name="F:KerbalEVA.lastTgtRPos"></member><member name="F:KerbalEVA.lastTgtSpeed"></member><member name="F:KerbalEVA.linPower"></member><member name="F:KerbalEVA.loadedFromSFS"></member><member name="F:KerbalEVA.loadedStateName"></member><member name="F:KerbalEVA.manualAxisControl"></member><member name="F:KerbalEVA.manualRotation"></member><member name="F:KerbalEVA.massMultiplier"></member><member name="F:KerbalEVA.maxJumpForce"></member><member name="F:KerbalEVA.minRunningGee"></member><member name="F:KerbalEVA.minWalkingGee"></member><member name="F:KerbalEVA.moduleIsEnabled"></member><member name="F:KerbalEVA.moduleName"></member><member name="F:KerbalEVA.On_boardPart"></member><member name="F:KerbalEVA.On_bound"></member><member name="F:KerbalEVA.On_bound_fall"></member><member name="F:KerbalEVA.On_bound_land"></member><member name="F:KerbalEVA.On_clamberGrabStart"></member><member name="F:KerbalEVA.On_clamberP1"></member><member name="F:KerbalEVA.On_clamberP2"></member><member name="F:KerbalEVA.On_clamberP3"></member><member name="F:KerbalEVA.On_endRun"></member><member name="F:KerbalEVA.On_fall"></member><member name="F:KerbalEVA.On_feet_dry"></member><member name="F:KerbalEVA.On_feet_wet"></member><member name="F:KerbalEVA.On_flagPlantComplete"></member><member name="F:KerbalEVA.On_flagPlantFailed"></member><member name="F:KerbalEVA.On_flagPlantHdgAcquire"></member><member name="F:KerbalEVA.On_flagPlantStart"></member><member name="F:KerbalEVA.On_grapple"></member><member name="F:KerbalEVA.On_grappleRelease"></member><member name="F:KerbalEVA.On_hdgAcquireComplete"></member><member name="F:KerbalEVA.On_hdgAcquireStart"></member><member name="F:KerbalEVA.On_jump_complete"></member><member name="F:KerbalEVA.On_jump_start"></member><member name="F:KerbalEVA.On_ladderClimb"></member><member name="F:KerbalEVA.On_ladderDescend"></member><member name="F:KerbalEVA.On_LadderEnd"></member><member name="F:KerbalEVA.On_ladderGrabComplete"></member><member name="F:KerbalEVA.On_ladderGrabStart"></member><member name="F:KerbalEVA.On_LadderLand"></member><member name="F:KerbalEVA.On_LadderLeanEnd"></member><member name="F:KerbalEVA.On_LadderLeanStart"></member><member name="F:KerbalEVA.On_ladderLetGo"></member><member name="F:KerbalEVA.On_LadderPushOff"></member><member name="F:KerbalEVA.On_LadderPushoff_complete"></member><member name="F:KerbalEVA.On_ladderStop"></member><member name="F:KerbalEVA.On_LadderTop"></member><member name="F:KerbalEVA.On_land_complete"></member><member name="F:KerbalEVA.On_land_start"></member><member name="F:KerbalEVA.On_MoveAcd"></member><member name="F:KerbalEVA.On_MoveFPS"></member><member name="F:KerbalEVA.On_MoveLowG_Acd"></member><member name="F:KerbalEVA.On_MoveLowG_fps"></member><member name="F:KerbalEVA.On_packToggle"></member><member name="F:KerbalEVA.On_recover_complete"></member><member name="F:KerbalEVA.On_recover_start"></member><member name="F:KerbalEVA.On_seatBoard"></member><member name="F:KerbalEVA.On_seatDeboard"></member><member name="F:KerbalEVA.On_seatEject"></member><member name="F:KerbalEVA.On_startRun"></member><member name="F:KerbalEVA.On_stop"></member><member name="F:KerbalEVA.On_stumble"></member><member name="F:KerbalEVA.On_swim_fwd"></member><member name="F:KerbalEVA.On_swim_stop"></member><member name="F:KerbalEVA.onFallHeightFromTerrain"></member><member name="F:KerbalEVA.onLadder"></member><member name="F:KerbalEVA.otherRagdollColliders"></member><member name="F:KerbalEVA.overrideStagingIconIfBlank"></member><member name="F:KerbalEVA.packLinear"></member><member name="F:KerbalEVA.packRRot"></member><member name="F:KerbalEVA.packTgtRPos"></member><member name="F:KerbalEVA.PitchNeg"></member><member name="F:KerbalEVA.PitchPos"></member><member name="F:KerbalEVA.prev_error"></member><member name="F:KerbalEVA.PropellantConsumption"></member><member name="F:KerbalEVA.propellantResource"></member><member name="F:KerbalEVA.propellantResourceDefaultAmount"></member><member name="F:KerbalEVA.propellantResourceName"></member><member name="F:KerbalEVA.ragdollNodes"></member><member name="F:KerbalEVA.rd_rot"></member><member name="F:KerbalEVA.rd_tgtRot"></member><member name="F:KerbalEVA.recoverThreshold"></member><member name="F:KerbalEVA.recoverTime"></member><member name="F:KerbalEVA.referenceFrameChanged_rdPhysHold"></member><member name="F:KerbalEVA.referenceTransform"></member><member name="F:KerbalEVA.resHandler"></member><member name="F:KerbalEVA.RollNeg"></member><member name="F:KerbalEVA.RollPos"></member><member name="F:KerbalEVA.rotPower"></member><member name="F:KerbalEVA.runSpeed"></member><member name="F:KerbalEVA.secondaryLadder"></member><member name="F:KerbalEVA.showUpgradesInModuleInfo"></member><member name="F:KerbalEVA.snapshot"></member><member name="F:KerbalEVA.splatEnabled"></member><member name="F:KerbalEVA.splatPrefab"></member><member name="F:KerbalEVA.splatSpeed"></member><member name="F:KerbalEVA.splatThreshold"></member><member name="F:KerbalEVA.st_bound_fl"></member><member name="F:KerbalEVA.st_bound_gr_acd"></member><member name="F:KerbalEVA.st_bound_gr_fps"></member><member name="F:KerbalEVA.st_clamber_acquireP1"></member><member name="F:KerbalEVA.st_clamber_acquireP2"></member><member name="F:KerbalEVA.st_clamber_acquireP3"></member><member name="F:KerbalEVA.st_flagAcquireHeading"></member><member name="F:KerbalEVA.st_flagPlant"></member><member name="F:KerbalEVA.st_grappled"></member><member name="F:KerbalEVA.st_heading_acquire"></member><member name="F:KerbalEVA.st_idle_fl"></member><member name="F:KerbalEVA.st_idle_gr"></member><member name="F:KerbalEVA.st_jump"></member><member name="F:KerbalEVA.st_ladder_acquire"></member><member name="F:KerbalEVA.st_ladder_climb"></member><member name="F:KerbalEVA.st_ladder_descend"></member><member name="F:KerbalEVA.st_ladder_idle"></member><member name="F:KerbalEVA.st_ladder_lean"></member><member name="F:KerbalEVA.st_ladder_pushoff"></member><member name="F:KerbalEVA.st_land"></member><member name="F:KerbalEVA.st_packTransition"></member><member name="F:KerbalEVA.st_ragdoll"></member><member name="F:KerbalEVA.st_recover"></member><member name="F:KerbalEVA.st_run_acd"></member><member name="F:KerbalEVA.st_run_fps"></member><member name="F:KerbalEVA.st_seated_cmd"></member><member name="F:KerbalEVA.st_swim_fwd"></member><member name="F:KerbalEVA.st_swim_idle"></member><member name="F:KerbalEVA.st_walk_acd"></member><member name="F:KerbalEVA.st_walk_fps"></member><member name="F:KerbalEVA.stagingDisableText"></member><member name="F:KerbalEVA.stagingEnabled"></member><member name="F:KerbalEVA.stagingEnableText"></member><member name="F:KerbalEVA.stagingToggleEnabledEditor"></member><member name="F:KerbalEVA.stagingToggleEnabledFlight"></member><member name="F:KerbalEVA.strafeSpeed"></member><member name="F:KerbalEVA.stumbleThreshold"></member><member name="F:KerbalEVA.swimSpeed"></member><member name="F:KerbalEVA.tgtFwd"></member><member name="F:KerbalEVA.tgtRpos"></member><member name="F:KerbalEVA.tgtSpeed"></member><member name="F:KerbalEVA.tgtUp"></member><member name="F:KerbalEVA.tmpBoundState"></member><member name="F:KerbalEVA.turnRate"></member><member name="F:KerbalEVA.upgrades"></member><member name="F:KerbalEVA.upgradesApplied"></member><member name="F:KerbalEVA.upgradesApply"></member><member name="F:KerbalEVA.upgradesAsk"></member><member name="F:KerbalEVA.upperTorso"></member><member name="F:KerbalEVA.Vtgt"></member><member name="F:KerbalEVA.walkSpeed"></member><member name="F:KerbalEVA.waterAngularDragMultiplier"></member><member name="F:KerbalEVA.xNeg"></member><member name="F:KerbalEVA.xPos"></member><member name="F:KerbalEVA.YawNeg"></member><member name="F:KerbalEVA.YawPos"></member><member name="F:KerbalEVA.yNeg"></member><member name="F:KerbalEVA.yPos"></member><member name="F:KerbalEVA.zNeg"></member><member name="F:KerbalEVA.zPos"></member><member name="F:KerbalEVA.LadderMinCorrectiveForceSqrMag"></member><member name="F:KerbalEVA.LadderVesselPerturbationMultiplier"></member><member name="P:KerbalEVA.Actions"></member><member name="P:KerbalEVA.ClassID"></member><member name="P:KerbalEVA.ClassName"></member><member name="P:KerbalEVA.currentLadderPart"></member><member name="P:KerbalEVA.enabled"></member><member name="P:KerbalEVA.Events"></member><member name="P:KerbalEVA.Fields"></member><member name="P:KerbalEVA.flagItems"></member><member name="P:KerbalEVA.Fuel"><summary>The current amount of EVA fuel the Kerbal is carrying</summary></member><member name="P:KerbalEVA.FuelCapacity"><summary>The maximum amount of EVA fuel the Kerbal can carry</summary></member><member name="P:KerbalEVA.gameObject"></member><member name="P:KerbalEVA.GUIName"></member><member name="P:KerbalEVA.hideFlags"></member><member name="P:KerbalEVA.isActiveAndEnabled"></member><member name="P:KerbalEVA.LadderPart"></member><member name="P:KerbalEVA.ModuleAttributes"></member><member name="P:KerbalEVA.name"></member><member name="P:KerbalEVA.OnALadder"><summary>Whether the kerbal is currently hanging on to a ladder.</summary></member><member name="P:KerbalEVA.part"></member><member name="P:KerbalEVA.Ready"></member><member name="P:KerbalEVA.tag"></member><member name="P:KerbalEVA.transform"></member><member name="P:KerbalEVA.useGUILayout"></member><member name="P:KerbalEVA.vessel"></member><member name="P:KerbalEVA.VesselUnderControl"><para>True if the vessel is able to respond to player input (focused and not packed)</para></member><member name="M:KerbalEVA.AcquirePosition(UnityEngine.Vector3,System.Single)"></member><member name="M:KerbalEVA.AcquireRotation(UnityEngine.Quaternion,System.Single)"></member><member name="M:KerbalEVA.AddFlag(System.Int32)"></member><member name="M:KerbalEVA.AppliedUpgrades"></member><member name="M:KerbalEVA.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:KerbalEVA.ApplyUpgrades(PartModule+StartState)"></member><member name="M:KerbalEVA.Awake"></member><member name="M:KerbalEVA.BoardPart(Part)"><summary>Ends the EVA by boarding the specified part.</summary></member><member name="M:KerbalEVA.BoardSeat(KerbalSeat)"><summary>Ends the EVA by boarding a seat instead of a part.</summary></member><member name="M:KerbalEVA.bound_fl_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.bound_fl_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.bound_gr_acd_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.bound_gr_acd_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.bound_gr_acd_OnUpdate"></member><member name="M:KerbalEVA.bound_gr_fps_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.bound_gr_fps_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.bound_gr_fps_OnUpdate"></member><member name="M:KerbalEVA.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.BroadcastMessage(string,object)"></member><member name="M:KerbalEVA.BroadcastMessage(string)"></member><member name="M:KerbalEVA.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.CancelInvoke"></member><member name="M:KerbalEVA.CancelInvoke(string)"></member><member name="M:KerbalEVA.CanPlantFlag"></member><member name="M:KerbalEVA.CanRecover"></member><member name="M:KerbalEVA.checkExperiments(Part)"></member><member name="M:KerbalEVA.clamber_acquireP1_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.clamber_acquireP1_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.clamber_acquireP2_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.clamber_acquireP2_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.clamber_acquireP3_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.clamber_acquireP3_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.CompareContactsByNormalToSurface(UnityEngine.ContactPoint,UnityEngine.ContactPoint)"><para>&amp;lt; c1 is first</para><para>&amp;lt; c2 is first</para></member><member name="M:KerbalEVA.CompareTag(string)"></member><member name="M:KerbalEVA.Copy(PartModule)"></member><member name="M:KerbalEVA.correctGroundedRotation"><para>&amp;lt; rotation correction (kerbals are dumb, but not so dumb they can&amp;apos;t walk without toppling over)</para></member><member name="M:KerbalEVA.correctLadderPosition"></member><member name="M:KerbalEVA.correctLadderRotation"></member><member name="M:KerbalEVA.drawCoordinateFrame"></member><member name="M:KerbalEVA.EjectFromSeat"></member><member name="M:KerbalEVA.Equals(object)"></member><member name="M:KerbalEVA.Finalize"></member><member name="M:KerbalEVA.FindClamberSrf(System.Single,System.Single)"><para>Does a simple Raycast to find potential surfaces to climb on to</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;angle&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;How much to raycast in front of the &lt;ref refid='class_kerbal' kindref='compound'&gt;Kerbal&lt;/ref&gt;</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;reach&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;How far a &lt;ref refid='class_kerbal' kindref='compound'&gt;Kerbal&lt;/ref&gt; should be able to reach&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;True if a surface is found, false if not&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; if we find a surface, raycast again upwards to check if we haven&amp;apos;t hit a ceiling or a roof &lt;/para&gt;</remarks></member><member name="M:KerbalEVA.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:KerbalEVA.FixedUpdate"></member><member name="M:KerbalEVA.flagAcquireHeading_OnEnter(KFSMState)"><para>&amp;lt; call once to figure out deltaHdg before animating</para></member><member name="M:KerbalEVA.flagAcquireHeading_OnLateUpdate"></member><member name="M:KerbalEVA.flagAcquireHeading_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.flagPlant_OnEnter(KFSMState)"><para>&amp;lt; recalculate flag spot in case we drifted a little</para></member><member name="M:KerbalEVA.flagPlant_OnLeave(KFSMState)"><para>&amp;lt; To prevent the need for flag-planting parties, find nearby kerbals and give them credit too.</para></member><member name="M:KerbalEVA.GetClamberPath(System.Single,System.Single)"><para>A more comprehensive test of the climbable surface, which returns enough information to animate the &lt;ref refid='class_kerbal' kindref='compound'&gt;Kerbal&lt;/ref&gt; as he clambers on</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><para>&amp;lt; find the normal at the very edge of the climbing surface</para></member><member name="M:KerbalEVA.GetComponent(System.Type)"></member><member name="M:KerbalEVA.GetComponent"></member><member name="M:KerbalEVA.GetComponent(string)"></member><member name="M:KerbalEVA.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalEVA.GetComponentInChildren(System.Type)"></member><member name="M:KerbalEVA.GetComponentInChildren"></member><member name="M:KerbalEVA.GetComponentInChildren(System.Boolean)"></member><member name="M:KerbalEVA.GetComponentInParent(System.Type)"></member><member name="M:KerbalEVA.GetComponentInParent"></member><member name="M:KerbalEVA.GetComponents(System.Type)"></member><member name="M:KerbalEVA.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KerbalEVA.GetComponents(List)"></member><member name="M:KerbalEVA.GetComponents"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Type)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KerbalEVA.GetComponentsInChildren"></member><member name="M:KerbalEVA.GetComponentsInChildren(List)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Type)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Boolean)"></member><member name="M:KerbalEVA.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KerbalEVA.GetComponentsInParent"></member><member name="M:KerbalEVA.getCoordinateFrame"></member><member name="M:KerbalEVA.GetEjectPoint(UnityEngine.Vector3,System.Single,System.Single,System.Single)"><para>Does a CapsuleCast to get a point that&amp;apos;s safe of other colliders for ejecting a kerbal</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;eva&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KerbalEVA.GetHashCode"></member><member name="M:KerbalEVA.GetInfo"></member><member name="M:KerbalEVA.GetInstanceID"></member><member name="M:KerbalEVA.GetL19Contact"></member><member name="M:KerbalEVA.GetModuleDisplayName"></member><member name="M:KerbalEVA.GetStagingDisableText"></member><member name="M:KerbalEVA.GetStagingEnableText"></member><member name="M:KerbalEVA.GetType"></member><member name="M:KerbalEVA.GetUpgrade(string)"></member><member name="M:KerbalEVA.GetUpgradeInfo"></member><member name="M:KerbalEVA.grappled_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.grappled_OnLeave(KFSMState)"><para>&amp;lt; this would mean we didn&amp;apos;t leave the seat voluntarily, so we&amp;apos;re probably debris now.</para></member><member name="M:KerbalEVA.HandleMovementInput"><para>&amp;lt; walk/run/swim/ladder controls</para><para>&amp;lt; pack controls</para><para>&amp;lt; rotation</para></member><member name="M:KerbalEVA.HasUpgrades"></member><member name="M:KerbalEVA.heading_acquire_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.heading_acquire_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.idle_fl_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.idle_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.idle_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.IntegrateRagdollRigidbodyForces"></member><member name="M:KerbalEVA.InterpolateLadders"></member><member name="M:KerbalEVA.Invoke(string,System.Single)"></member><member name="M:KerbalEVA.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KerbalEVA.IsInvoking(string)"></member><member name="M:KerbalEVA.IsInvoking"></member><member name="M:KerbalEVA.isSelfCollision(UnityEngine.Collision)"></member><member name="M:KerbalEVA.IsStageable"></member><member name="M:KerbalEVA.IsValidContractObjective(string)"></member><member name="M:KerbalEVA.jump_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_acquire_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_acquire_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.ladder_climb_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_climb_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.ladder_descend_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_descend_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.ladder_idle_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_idle_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.ladder_lean_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ladder_lean_OnLateUpdate"></member><member name="M:KerbalEVA.ladder_lean_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.ladder_pushoff_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.land_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.land_OnUpdate"></member><member name="M:KerbalEVA.LateUpdate"></member><member name="M:KerbalEVA.Load(ConfigNode)"></member><member name="M:KerbalEVA.LoadUpgrades(ConfigNode)"></member><member name="M:KerbalEVA.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:KerbalEVA.MakeReference"></member><member name="M:KerbalEVA.MemberwiseClone"></member><member name="M:KerbalEVA.OnActive"></member><member name="M:KerbalEVA.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:KerbalEVA.OnCollisionEnter(UnityEngine.Collision)"><para>&amp;lt; bypass part collision checking and just handle it directly</para></member><member name="M:KerbalEVA.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:KerbalEVA.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:KerbalEVA.OnCopy(PartModule)"></member><member name="M:KerbalEVA.OnDeboardSeat"></member><member name="M:KerbalEVA.OnDestroy"></member><member name="M:KerbalEVA.OnDrawGizmosSelected"></member><member name="M:KerbalEVA.OnFixedUpdate"></member><member name="M:KerbalEVA.onFrameVelocityChange(Vector3d)"></member><member name="M:KerbalEVA.OnGrapple"></member><member name="M:KerbalEVA.OnIconCreate"></member><member name="M:KerbalEVA.OnInactive"></member><member name="M:KerbalEVA.OnInitialize"></member><member name="M:KerbalEVA.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; load saved state data from the confignode</para></member><member name="M:KerbalEVA.OnPartDie"></member><member name="M:KerbalEVA.onReferencebodyChanged(GameEvents+FromToAction)"></member><member name="M:KerbalEVA.onRotatingFrameChanged(GameEvents+HostTargetAction)"></member><member name="M:KerbalEVA.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:KerbalEVA.OnStart(PartModule+StartState)"></member><member name="M:KerbalEVA.OnStartFinished(PartModule+StartState)"></member><member name="M:KerbalEVA.OnTriggerExit(UnityEngine.Collider)"></member><member name="M:KerbalEVA.OnTriggerStay(UnityEngine.Collider)"></member><member name="M:KerbalEVA.OnUpdate"></member><member name="M:KerbalEVA.OnVesselGoOffRails(Vessel)"><para>&amp;lt; Need to check and update if flags are active (when switching to kerbal from traction station, kerbal enters st_idle_gr before ground contact occurs)</para></member><member name="M:KerbalEVA.OnVesselGoOnRails(Vessel)"></member><member name="M:KerbalEVA.OnVesselSituationChange(GameEvents+HostedFromToAction)"></member><member name="M:KerbalEVA.PlantFlag"></member><member name="M:KerbalEVA.PostInteractionScreenMessage(string,System.Single)"></member><member name="M:KerbalEVA.PrintUpgrades"></member><member name="M:KerbalEVA.proceedAndBoard(Part)"></member><member name="M:KerbalEVA.ragdoll_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.ragdoll_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.recover_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.recover_OnUpdate"></member><member name="M:KerbalEVA.RecoverGroundedRotation(System.Single)"></member><member name="M:KerbalEVA.RenameVessel"></member><member name="M:KerbalEVA.ResetOrientationPID"></member><member name="M:KerbalEVA.ResetRagdollLinks"></member><member name="M:KerbalEVA.RestoreVesselInfo(System.Single)"></member><member name="M:KerbalEVA.restoreVesselInfo_afterWait(System.Single)"></member><member name="M:KerbalEVA.run_acd_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.run_acd_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.run_fps_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.run_fps_OnUpdate"></member><member name="M:KerbalEVA.Save(ConfigNode)"></member><member name="M:KerbalEVA.SaveUpgradesApplied(ConfigNode)"></member><member name="M:KerbalEVA.seated_cmd_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.seated_cmd_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessage(string,object)"></member><member name="M:KerbalEVA.SendMessage(string)"></member><member name="M:KerbalEVA.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,object)"></member><member name="M:KerbalEVA.SendMessageUpwards(string)"></member><member name="M:KerbalEVA.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalEVA.SetEjectDirection"></member><member name="M:KerbalEVA.SetRagdoll(System.Boolean,System.Boolean)"></member><member name="M:KerbalEVA.SetStaging(System.Boolean)"></member><member name="M:KerbalEVA.SetupAnimations"></member><member name="M:KerbalEVA.SetupFSM"><para>&amp;lt; create FSM states</para><para>&amp;lt; Check height from either terrain or water surface</para><para>&amp;lt; we&amp;apos;re about to set pos, so don&amp;apos;t set it here.</para></member><member name="M:KerbalEVA.SetupJetpackEffects"></member><member name="M:KerbalEVA.SetupRagdoll(Part)"></member><member name="M:KerbalEVA.SetWaypoint(UnityEngine.Vector3)"></member><member name="M:KerbalEVA.SortTriggersByAlignment(UnityEngine.Collider,UnityEngine.Collider)"></member><member name="M:KerbalEVA.SortTriggersByDistance(UnityEngine.Collider,UnityEngine.Collider)"></member><member name="M:KerbalEVA.Splat(UnityEngine.Vector3,UnityEngine.Vector3)"><para>&amp;lt; Added for Unity 4 Support CJ</para></member><member name="M:KerbalEVA.StagingEnabled"></member><member name="M:KerbalEVA.StagingToggleEnabledEditor"></member><member name="M:KerbalEVA.StagingToggleEnabledFlight"></member><member name="M:KerbalEVA.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StartCoroutine(string,object)"></member><member name="M:KerbalEVA.StartCoroutine(string)"></member><member name="M:KerbalEVA.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StartEVA(PartModule+StartState)"><para>&amp;lt; set up character control</para></member><member name="M:KerbalEVA.StartGroundedRotationRecover"></member><member name="M:KerbalEVA.StartNonCollidePeriod(System.Single,System.Single,Part,UnityEngine.Transform)"></member><member name="M:KerbalEVA.StopAllCoroutines"></member><member name="M:KerbalEVA.StopCoroutine(string)"></member><member name="M:KerbalEVA.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalEVA.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KerbalEVA.SurfaceContact"></member><member name="M:KerbalEVA.SurfaceOrSplashed"></member><member name="M:KerbalEVA.swichFocusIfActiveVesselUncontrollable_delay(System.Single)"></member><member name="M:KerbalEVA.swim_fwd_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.swim_fwd_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.swim_idle_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.swim_idle_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.SwitchFocusIfActiveVesselUncontrollable(System.Single)"></member><member name="M:KerbalEVA.TestClamberSrf(UnityEngine.RaycastHit)"><para>test a possible clamber surface further to rule out cases like moving objects</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;clamberHitInfo&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The hit info after a (successful) FindClamberSrf call</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KerbalEVA.ToggleJetpack"></member><member name="M:KerbalEVA.ToggleJetpack(System.Boolean)"></member><member name="M:KerbalEVA.ToggleLamp"></member><member name="M:KerbalEVA.ToggleStaging"></member><member name="M:KerbalEVA.ToString"></member><member name="M:KerbalEVA.Update"></member><member name="M:KerbalEVA.UpdateCurrentLadder"></member><member name="M:KerbalEVA.UpdateCurrentLadderIdle"></member><member name="M:KerbalEVA.UpdateHeading"></member><member name="M:KerbalEVA.updateJetpackEffects"></member><member name="M:KerbalEVA.UpdateLadderMovement"></member><member name="M:KerbalEVA.UpdateMovement"></member><member name="M:KerbalEVA.UpdateOrientationPID"></member><member name="M:KerbalEVA.UpdatePackAngular"></member><member name="M:KerbalEVA.UpdatePackFuel"></member><member name="M:KerbalEVA.UpdatePackLinear"></member><member name="M:KerbalEVA.updateRagdollVelocities"></member><member name="M:KerbalEVA.UpdateStagingToggle"></member><member name="M:KerbalEVA.UpgradeWaitForScenarioModules"></member><member name="M:KerbalEVA.waitAndHandleRagdollTimeWarp(System.Int32)"></member><member name="M:KerbalEVA.walk_Acd_OnEnter(KFSMState)"></member><member name="M:KerbalEVA.walk_ccd_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.walk_fps_OnLeave(KFSMState)"></member><member name="M:KerbalEVA.walk_fps_OnUpdate"></member><member name="M:KerbalEVA.ZeroRBVelocity"></member><member name="M:KerbalEVA.#ctor"></member><member name="T:KerbalFSM"><summary>A finite state machine. States are represented by KFSMState objects, and  "events" (transitions between states) are represented by KFSMEvent objects.</summary></member><member name="F:KerbalFSM.currentState"></member><member name="F:KerbalFSM.currentStateName"><summary>The name of the state the machine is currently in.</summary></member><member name="F:KerbalFSM.DebugBreakOnStateChange"></member><member name="F:KerbalFSM.fsmStarted"></member><member name="F:KerbalFSM.lastEvent"></member><member name="F:KerbalFSM.lastEventName"><summary>The name of the last event that occurred.</summary></member><member name="F:KerbalFSM.lastState"></member><member name="F:KerbalFSM.OnStateChange"><para>Called every time a registered event causes the FSM to change states</para></member><member name="F:KerbalFSM.States"></member><member name="P:KerbalFSM.CurrentState"><summary>The state the machine is currently in.</summary></member><member name="P:KerbalFSM.FramesInCurrentState"><summary>How many frames the machine has been in this state.</summary></member><member name="P:KerbalFSM.LastEvent"><summary>The last event that occurred.</summary></member><member name="P:KerbalFSM.LastState"><summary>The state the machine was in before this state.</summary></member><member name="P:KerbalFSM.Started"><summary>Whether the state machine has been started.</summary></member><member name="P:KerbalFSM.TimeAtCurrentState"><summary>How long the machine has been in the current state, in seconds.</summary></member><member name="M:KerbalFSM.AddEvent(KFSMEvent,KFSMState[])"><summary>Add a new event (possible transition) to the finite state machine.</summary><param name="ev">The event to add.</param><param name="toStates">The states to add the event to. The event can only be triggered when the machine is in one of these states.</param></member><member name="M:KerbalFSM.AddEventExcluding(KFSMEvent,KFSMState[])"><summary>Add a new event (possible transition) to the finite state machine.</summary><param name="ev">The event to add.</param><param name="excStates">A list of states *not* to add the event to. The event can only be triggered when the machine is *not* in one of these states.</param></member><member name="M:KerbalFSM.AddState(KFSMState)"><summary>Add a new possible state to the machine.</summary><param name="st">The state to add.</param></member><member name="M:KerbalFSM.Equals(object)"></member><member name="M:KerbalFSM.Finalize"></member><member name="M:KerbalFSM.FixedUpdateFSM"></member><member name="M:KerbalFSM.GetHashCode"></member><member name="M:KerbalFSM.GetType"></member><member name="M:KerbalFSM.LateUpdateFSM"></member><member name="M:KerbalFSM.MemberwiseClone"></member><member name="M:KerbalFSM.RunEvent(KFSMEvent)"><summary>Cause the machine to execute the transition specified by evt.</summary><param name="evt">The event to execute.</param></member><member name="M:KerbalFSM.StartFSM(string)"><summary>Start the state machine in a given initial state.</summary><param name="initialStateName">The name of the state to start in</param></member><member name="M:KerbalFSM.StartFSM(KFSMState)"><summary>Start the state machine in a given initial state.</summary><param name="initialState">The state to start in.</param></member><member name="M:KerbalFSM.ToString"></member><member name="M:KerbalFSM.UpdateFSM"></member><member name="M:KerbalFSM.updateFSM(KFSMUpdateMode)"></member><member name="M:KerbalFSM.#ctor"></member><member name="T:KerbalInstructor"><summary>A KerbalInstructor object controls the animated image of a kerbal instructor in a TutorialScenario. KerbalInstructors come with a stock emote animations that you can trigger by calling the appropriate functions.</summary></member><member name="F:KerbalInstructor.anim"></member><member name="F:KerbalInstructor.anim_false_disagreeA"></member><member name="F:KerbalInstructor.anim_false_disagreeB"></member><member name="F:KerbalInstructor.anim_false_disagreeC"></member><member name="F:KerbalInstructor.anim_false_disappointed"></member><member name="F:KerbalInstructor.anim_false_sadA"></member><member name="F:KerbalInstructor.anim_idle"></member><member name="F:KerbalInstructor.anim_idle_lookAround"></member><member name="F:KerbalInstructor.anim_idle_sigh"></member><member name="F:KerbalInstructor.anim_idle_wonder"></member><member name="F:KerbalInstructor.anim_true_nodA"></member><member name="F:KerbalInstructor.anim_true_nodB"></member><member name="F:KerbalInstructor.anim_true_smileA"></member><member name="F:KerbalInstructor.anim_true_smileB"></member><member name="F:KerbalInstructor.anim_true_thumbsUp"></member><member name="F:KerbalInstructor.anim_true_thumbUp"></member><member name="F:KerbalInstructor.AnimationRoot"></member><member name="F:KerbalInstructor.CharacterName"></member><member name="F:KerbalInstructor.DrawDebugPanel"></member><member name="F:KerbalInstructor.instructorCamera"></member><member name="F:KerbalInstructor.PortraitRenderMaterial"></member><member name="P:KerbalInstructor.enabled"></member><member name="P:KerbalInstructor.gameObject"></member><member name="P:KerbalInstructor.hideFlags"></member><member name="P:KerbalInstructor.isActiveAndEnabled"></member><member name="P:KerbalInstructor.name"></member><member name="P:KerbalInstructor.tag"></member><member name="P:KerbalInstructor.transform"></member><member name="P:KerbalInstructor.useGUILayout"></member><member name="M:KerbalInstructor.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.BroadcastMessage(string,object)"></member><member name="M:KerbalInstructor.BroadcastMessage(string)"></member><member name="M:KerbalInstructor.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.CancelInvoke"></member><member name="M:KerbalInstructor.CancelInvoke(string)"></member><member name="M:KerbalInstructor.ClearCamera"></member><member name="M:KerbalInstructor.CompareTag(string)"></member><member name="M:KerbalInstructor.Equals(object)"></member><member name="M:KerbalInstructor.Finalize"></member><member name="M:KerbalInstructor.GetComponent(System.Type)"></member><member name="M:KerbalInstructor.GetComponent"></member><member name="M:KerbalInstructor.GetComponent(string)"></member><member name="M:KerbalInstructor.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentInChildren(System.Type)"></member><member name="M:KerbalInstructor.GetComponentInChildren"></member><member name="M:KerbalInstructor.GetComponentInChildren(System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentInParent(System.Type)"></member><member name="M:KerbalInstructor.GetComponentInParent"></member><member name="M:KerbalInstructor.GetComponents(System.Type)"></member><member name="M:KerbalInstructor.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:KerbalInstructor.GetComponents(List)"></member><member name="M:KerbalInstructor.GetComponents"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Type)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:KerbalInstructor.GetComponentsInChildren"></member><member name="M:KerbalInstructor.GetComponentsInChildren(List)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Type)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Boolean)"></member><member name="M:KerbalInstructor.GetComponentsInParent(System.Boolean,List)"></member><member name="M:KerbalInstructor.GetComponentsInParent"></member><member name="M:KerbalInstructor.GetHashCode"></member><member name="M:KerbalInstructor.GetInstanceID"></member><member name="M:KerbalInstructor.GetType"></member><member name="M:KerbalInstructor.Invoke(string,System.Single)"></member><member name="M:KerbalInstructor.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:KerbalInstructor.IsInvoking(string)"></member><member name="M:KerbalInstructor.IsInvoking"></member><member name="M:KerbalInstructor.MemberwiseClone"></member><member name="M:KerbalInstructor.PlayEmote(CharacterAnimationState)"><summary>Presumably, makes the instructor execute a given animation.</summary><param name="st">The animation to execute.</param></member><member name="M:KerbalInstructor.PlayEmote(CharacterAnimationState,CharacterAnimationState,System.Boolean)"></member><member name="M:KerbalInstructor.PlayEmoteQueued(CharacterAnimationState,CharacterAnimationState)"></member><member name="M:KerbalInstructor.PlayEmoteRepeating(CharacterAnimationState,System.Single)"><summary>Presumably, makes the instructor execute a given animation repeatedly.</summary><param name="st">The animation to exectue.</param><param name="repeatInterval">How often to repeat the animation, in seconds?</param></member><member name="M:KerbalInstructor.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessage(string,object)"></member><member name="M:KerbalInstructor.SendMessage(string)"></member><member name="M:KerbalInstructor.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,object)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string)"></member><member name="M:KerbalInstructor.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:KerbalInstructor.SetupAnimations"></member><member name="M:KerbalInstructor.SetupCamera(UnityEngine.RenderTexture)"></member><member name="M:KerbalInstructor.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StartCoroutine(string,object)"></member><member name="M:KerbalInstructor.StartCoroutine(string)"></member><member name="M:KerbalInstructor.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StopAllCoroutines"></member><member name="M:KerbalInstructor.StopCoroutine(string)"></member><member name="M:KerbalInstructor.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:KerbalInstructor.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:KerbalInstructor.StopRepeatingEmote"><summary>Presumably, makes the instructor stop repeating whatever animation you last told it to repeat.</summary></member><member name="M:KerbalInstructor.ToString"></member><member name="M:KerbalInstructor.#ctor"></member><member name="T:KerbalRoster"></member><member name="F:KerbalRoster.engineerTrait"></member><member name="F:KerbalRoster.pilotTrait"></member><member name="F:KerbalRoster.scientistTrait"></member><member name="F:KerbalRoster.touristTrait"></member><member name="P:KerbalRoster.Applicants"></member><member name="P:KerbalRoster.Count"></member><member name="P:KerbalRoster.Crew"></member><member name="P:KerbalRoster.GameMode"></member><member name="P:KerbalRoster.Item"></member><member name="P:KerbalRoster.Item"></member><member name="P:KerbalRoster.Tourist"></member><member name="P:KerbalRoster.Unowned"></member><member name="M:KerbalRoster.AddCrewMember(ProtoCrewMember)"></member><member name="M:KerbalRoster.ChangeName(string,string)"></member><member name="M:KerbalRoster.ChangeNameCalledFromPCM(ProtoCrewMember,string,string)"><para>DO NOT CALL DIRECTLY. Should only be called from PCM itself via PCM.ChangeName()</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;crew&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;oldName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;newName&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:KerbalRoster.DefaultCrewForVessel(ConfigNode,VesselCrewManifest,System.Boolean)"><para>Generate a default manifest for the current vessel. Optionally provide an already existing manifest to avoid reassigning crews already seated.</para><para>&amp;lt; find first crewable commandable part and fill it with all available crew</para></member><member name="M:KerbalRoster.Equals(object)"></member><member name="M:KerbalRoster.Exists(string)"></member><member name="M:KerbalRoster.Finalize"></member><member name="M:KerbalRoster.GetActiveCrewCount"></member><member name="M:KerbalRoster.GetAssignedCrewCount"></member><member name="M:KerbalRoster.GetAvailableCrewCount"></member><member name="M:KerbalRoster.GetHashCode"></member><member name="M:KerbalRoster.GetKIACrewCount"></member><member name="M:KerbalRoster.GetLostCrewCount"></member><member name="M:KerbalRoster.GetMissingCrewCount"></member><member name="M:KerbalRoster.GetNewKerbal(ProtoCrewMember+KerbalType)"><summary>Generates a new Kerbal pertaining to type (i.e. Crew, Tourist, Unowned, Applicant).</summary></member><member name="M:KerbalRoster.GetNextApplicant"></member><member name="M:KerbalRoster.GetNextAvailableKerbal(ProtoCrewMember+KerbalType)"><para>&amp;lt; check respawning kerbals to see if they&amp;apos;re good to go again</para></member><member name="M:KerbalRoster.GetNextOrNewKerbal(ProtoCrewMember+KerbalType)"></member><member name="M:KerbalRoster.GetType"></member><member name="M:KerbalRoster.HireApplicant(ProtoCrewMember)"></member><member name="M:KerbalRoster.IndexOf(ProtoCrewMember)"></member><member name="M:KerbalRoster.Init(Game)"></member><member name="M:KerbalRoster.Kerbals(ProtoCrewMember+KerbalType,ProtoCrewMember+RosterStatus[])"></member><member name="M:KerbalRoster.MemberwiseClone"></member><member name="M:KerbalRoster.PCMUpdate(System.Double)"></member><member name="M:KerbalRoster.Remove(string)"></member><member name="M:KerbalRoster.Remove(ProtoCrewMember)"></member><member name="M:KerbalRoster.Remove(System.Int32)"></member><member name="M:KerbalRoster.RemoveDead(ProtoCrewMember)"></member><member name="M:KerbalRoster.RemoveMIA(ProtoCrewMember)"></member><member name="M:KerbalRoster.SackAvailable(ProtoCrewMember)"></member><member name="M:KerbalRoster.Save(ConfigNode)"></member><member name="M:KerbalRoster.ToString"></member><member name="M:KerbalRoster.Update(System.Double)"></member><member name="M:KerbalRoster.ValidateAssignments(Game)"><para>Validates all assigned crews against being on non-existing vessels. May never happen, but it was a bug once so it might still be a thing now.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;st&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:KerbalRoster.AddExperienceType(string,string,System.Single,System.Single)"></member><member name="M:KerbalRoster.CalculateExperience(FlightLog[])"></member><member name="M:KerbalRoster.CalculateExperienceLevel(System.Single)"></member><member name="M:KerbalRoster.CheatExperience"></member><member name="M:KerbalRoster.GenerateExperienceLog(FlightLog)"><para>&amp;lt; go through each flight and compile it&amp;apos;s targets and best achievements to the lists</para></member><member name="M:KerbalRoster.GenerateInitialCrewRoster(Game+Modes)"><para>&amp;lt; force-set the traits</para></member><member name="M:KerbalRoster.GetExperienceEffectType(string)"></member><member name="M:KerbalRoster.GetExperienceLevelRequirement(System.Int32)"></member><member name="M:KerbalRoster.GetExperienceMaxLevel"></member><member name="M:KerbalRoster.GetExperienceTraitType(string)"></member><member name="M:KerbalRoster.SetExperienceLevel(ProtoCrewMember,System.Int32)"><para>&amp;lt; This method necessarily clears a kerbal&amp;apos;s career log. Use it sparingly, for debug and cheats.</para></member><member name="M:KerbalRoster.SetExperienceTrait(ProtoCrewMember,string)"><summary>Sets the trait (i.e. Scientist/Engineer/Pilot/Custom).  This trait is by default a hash of the Kerbal's name.  However, this method can be called to permanently set the trait of the Kerbal.  The traitName must match one of those found in the Traits.cfg file.  For example:

SetExperienceTrait(Kerbal_Object, "Pilot");

Will set the Kerbal in Kerbal_Object as a pilot, whether he would be by default or not.</summary></member><member name="M:KerbalRoster.TryGetExperienceTraitConfig(string,Experience.ExperienceTraitConfig&amp;)"></member><member name="M:KerbalRoster.#ctor(Game+Modes)"></member><member name="M:KerbalRoster.#ctor(ConfigNode,Game+Modes)"></member><member name="T:Krakensbane"><summary>The physics simulation has problems if vessels move too fast relative to  the underlying reference frame used by the simulation, or get too far from the origin of the coordinate system. Krakensbane shifts the reference frame origin and velocity so that the active vessel is always near the origin of, and moving slowly with respect to, the underlying coordinate system used by the physics simulation.</summary></member><member name="F:Krakensbane.altThreshold"></member><member name="F:Krakensbane.altThresholdAlone"></member><member name="F:Krakensbane.excessV"></member><member name="F:Krakensbane.extraAltOffsetForVel"></member><member name="F:Krakensbane.FrameVel"></member><member name="F:Krakensbane.lastCorrection"></member><member name="F:Krakensbane.loadedVesselsCount"></member><member name="F:Krakensbane.MaxV"></member><member name="F:Krakensbane.MaxVSqr"></member><member name="F:Krakensbane.RBVel"></member><member name="F:Krakensbane.totalVel"></member><member name="P:Krakensbane.enabled"></member><member name="P:Krakensbane.gameObject"></member><member name="P:Krakensbane.hideFlags"></member><member name="P:Krakensbane.isActiveAndEnabled"></member><member name="P:Krakensbane.name"></member><member name="P:Krakensbane.tag"></member><member name="P:Krakensbane.transform"></member><member name="P:Krakensbane.useGUILayout"></member><member name="P:Krakensbane.SqrThreshold"></member><member name="M:Krakensbane.AddExcess(Vector3d)"><para>Adds the excess velocity to the frame velocity and subtracts the excess from all loaded offrails vessels/physobjects</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Krakensbane.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.BroadcastMessage(string,object)"></member><member name="M:Krakensbane.BroadcastMessage(string)"></member><member name="M:Krakensbane.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.CancelInvoke"></member><member name="M:Krakensbane.CancelInvoke(string)"></member><member name="M:Krakensbane.CompareTag(string)"></member><member name="M:Krakensbane.Equals(object)"></member><member name="M:Krakensbane.Finalize"></member><member name="M:Krakensbane.FixedUpdate"><para>Here we determine if we can engage &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; (and signal &lt;ref refid='class_floating_origin' kindref='compound'&gt;FloatingOrigin&lt;/ref&gt; whether it can engage, too). If we need to disengage &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt;, we zero the frame velocity and reapply it to everything. Finally if we have frame velocity, we signal &lt;ref refid='class_floating_origin' kindref='compound'&gt;FloatingOrigin&lt;/ref&gt; how much additional offset to apply to things outside the &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; frame.</para></member><member name="M:Krakensbane.GetComponent(System.Type)"></member><member name="M:Krakensbane.GetComponent"></member><member name="M:Krakensbane.GetComponent(string)"></member><member name="M:Krakensbane.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Krakensbane.GetComponentInChildren(System.Type)"></member><member name="M:Krakensbane.GetComponentInChildren"></member><member name="M:Krakensbane.GetComponentInChildren(System.Boolean)"></member><member name="M:Krakensbane.GetComponentInParent(System.Type)"></member><member name="M:Krakensbane.GetComponentInParent"></member><member name="M:Krakensbane.GetComponents(System.Type)"></member><member name="M:Krakensbane.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Krakensbane.GetComponents(List)"></member><member name="M:Krakensbane.GetComponents"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Type)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Krakensbane.GetComponentsInChildren"></member><member name="M:Krakensbane.GetComponentsInChildren(List)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Type)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Boolean)"></member><member name="M:Krakensbane.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Krakensbane.GetComponentsInParent"></member><member name="M:Krakensbane.GetHashCode"></member><member name="M:Krakensbane.GetInstanceID"></member><member name="M:Krakensbane.GetType"></member><member name="M:Krakensbane.Invoke(string,System.Single)"></member><member name="M:Krakensbane.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Krakensbane.IsInvoking(string)"></member><member name="M:Krakensbane.IsInvoking"></member><member name="M:Krakensbane.MemberwiseClone"></member><member name="M:Krakensbane.SafeToEngage(bool&amp;)"></member><member name="M:Krakensbane.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessage(string,object)"></member><member name="M:Krakensbane.SendMessage(string)"></member><member name="M:Krakensbane.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.SendMessageUpwards(string,object)"></member><member name="M:Krakensbane.SendMessageUpwards(string)"></member><member name="M:Krakensbane.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Krakensbane.setOffset(Vector3d)"><summary>Moves all vessels not on rails by the given position offset. This will usually only affect the active vessel, unless there are other vessels nearby. The offset can be very large and the vessels will not break, unlike for Vessel.SetPosition.</summary><param name="offset"/></member><member name="M:Krakensbane.Start"></member><member name="M:Krakensbane.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StartCoroutine(string,object)"></member><member name="M:Krakensbane.StartCoroutine(string)"></member><member name="M:Krakensbane.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StopAllCoroutines"></member><member name="M:Krakensbane.StopCoroutine(string)"></member><member name="M:Krakensbane.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Krakensbane.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Krakensbane.ToString"></member><member name="M:Krakensbane.Zero"><para>Zeroes the frame velocity and applies the frame velocity back to all loaded offrails vessels and physobjects</para></member><member name="M:Krakensbane.AddFrameVelocity(Vector3d)"><para>Directly sets additional frame velocity. Notably used when the active vessel comes off rails so &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; is engaged before a frame of imprecise PhysX, since vessels come off rails in Update and otherwise at the start of the next fixed frame the RB velocities would be high (and therefore imprecise).</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Krakensbane.GetFrameVelocity"><para>Returns the velocity of the &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; velocity frame.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns the velocity of the Krakensbane velocity frame.</remarks><returns/></member><member name="M:Krakensbane.GetFrameVelocityV3f"><para>Returns the velocity of the &lt;ref refid='class_krakensbane' kindref='compound'&gt;Krakensbane&lt;/ref&gt; velocity frame as a single-precision vector.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns the velocity of the Krakensbane velocity frame as a single-precision vector.</remarks><returns/></member><member name="M:Krakensbane.GetLastCorrection"><para>Returns the last velocity correction performed.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns the last velocity correction performed.</remarks><returns/></member><member name="M:Krakensbane.ResetVelocityFrame(System.Boolean)"><para>sets the frame velocity back to 0m/s. Use this if setting the worldspace velocity of vessels directly.</para></member><member name="M:Krakensbane.ResetVelocityFrame"><summary>sets the frame velocity back to 0m/s. Use this if setting the worldspace velocity of vessels directly.</summary></member><member name="M:Krakensbane.#ctor"></member><member name="T:ManeuverNode"><summary>Represents a maneuver node.</summary></member><member name="F:ManeuverNode.attachedGizmo"></member><member name="F:ManeuverNode.DeltaV"><summary>The delta-V of the burn represented by this maneuver node, in m/s. NOTE: maneuver nodes use a special coordinate system for delta-V. The x-component of DeltaV represents the delta-V in the radial-plus direction. The y-component of DeltaV  represents the delta-V in the normal-minus direction. The z-component of DeltaV represents the delta-V in the prograde direction.</summary></member><member name="F:ManeuverNode.nextPatch"><summary>The orbit patch that starts at this maneuver node.</summary></member><member name="F:ManeuverNode.nodeRotation"></member><member name="F:ManeuverNode.patch"><summary>The orbit patch that ends at this maneuver node?</summary></member><member name="F:ManeuverNode.scaledSpaceTarget"></member><member name="F:ManeuverNode.solver"></member><member name="F:ManeuverNode.UT"><summary>The universal time of the burn represented by this maneuver node.</summary></member><member name="M:ManeuverNode.AttachGizmo(UnityEngine.GameObject,PatchedConicRenderer)"></member><member name="M:ManeuverNode.AttachGizmo(GameObject,PatchedConicRenderer,PatchRendering)"></member><member name="M:ManeuverNode.DetachGizmo"></member><member name="M:ManeuverNode.Equals(object)"></member><member name="M:ManeuverNode.Finalize"></member><member name="M:ManeuverNode.GetBurnVector(Orbit)"><summary>Perhaps this translates the DeltaV vector into a world-space vector?</summary><param name="currentOrbit"/><returns/></member><member name="M:ManeuverNode.GetHashCode"></member><member name="M:ManeuverNode.GetType"></member><member name="M:ManeuverNode.Load(ConfigNode)"></member><member name="M:ManeuverNode.MemberwiseClone"></member><member name="M:ManeuverNode.OnGizmoUpdated(Vector3d,System.Double)"><summary>You can call this function to change the delta-V and time of a maneuver node.</summary><param name="dV">The new delta-V. See the DeltaV for notes about the coordinate system used.</param><param name="ut">The new universal time.</param></member><member name="M:ManeuverNode.RemoveSelf"></member><member name="M:ManeuverNode.Save(ConfigNode)"></member><member name="M:ManeuverNode.ToString"></member><member name="M:ManeuverNode.#ctor"></member><member name="T:MapView"><summary>This class stores some global information related to the map view.</summary></member><member name="F:MapView.camDistance"></member><member name="F:MapView.camFocusTarget"></member><member name="F:MapView.camHdg"></member><member name="F:MapView.camPitch"></member><member name="F:MapView.ConstantMode"></member><member name="F:MapView.dottedLineMaterial"></member><member name="F:MapView.draw3Dlines"></member><member name="F:MapView.mainCamera"></member><member name="F:MapView.mainCameras"></member><member name="F:MapView.maneuverModeActive"></member><member name="F:MapView.maneuverModeToggle"></member><member name="F:MapView.maneuverNodePrefab"></member><member name="F:MapView.mapCamera"></member><member name="F:MapView.MapCollapse_navBall"></member><member name="F:MapView.masterOrbitOpacity"></member><member name="F:MapView.max3DlineDrawDist"></member><member name="F:MapView.orbitDrawModeBtn"></member><member name="F:MapView.orbitIconsMap"></member><member name="F:MapView.orbitIconsMaterial"></member><member name="F:MapView.orbitIconsTextSkin"></member><member name="F:MapView.orbitIconsTextSkinDef"></member><member name="F:MapView.orbitLinesMaterial"></member><member name="F:MapView.patchColors"></member><member name="F:MapView.scaledVessel"></member><member name="F:MapView.scriptsToDisable"></member><member name="F:MapView.spaceCameraHome"></member><member name="F:MapView.targetPatchColors"></member><member name="F:MapView.transitionDuration"></member><member name="F:MapView.uiCameras"></member><member name="F:MapView.uiNodePrefab"></member><member name="F:MapView.vectorCam"></member><member name="F:MapView.culledCaptions"></member><member name="F:MapView.displayedOrbits"></member><member name="F:MapView.DottedLineMaterialStatic"></member><member name="F:MapView.fetch"></member><member name="F:MapView.MapIconTextOverlap"></member><member name="F:MapView.MapIsEnabled"><summary>Whether the game is currently in map view or not.</summary></member><member name="F:MapView.OnEnterMapView"></member><member name="F:MapView.OnExitMapView"></member><member name="F:MapView.OrbitLinesMaterialStatic"></member><member name="F:MapView.ReportMapAsDisabled"></member><member name="F:MapView.totalCaptions"></member><member name="P:MapView.enabled"></member><member name="P:MapView.gameObject"></member><member name="P:MapView.hideFlags"></member><member name="P:MapView.isActiveAndEnabled"></member><member name="P:MapView.name"></member><member name="P:MapView.tag"></member><member name="P:MapView.transform"></member><member name="P:MapView.useGUILayout"></member><member name="P:MapView.VectorCamera"></member><member name="P:MapView.DottedLinesMaterial"></member><member name="P:MapView.Draw3DLines"></member><member name="P:MapView.fetch"></member><member name="P:MapView.HighOrbitCountMode"></member><member name="P:MapView.ManeuverModeActive"></member><member name="P:MapView.ManeuverNodePrefab"></member><member name="P:MapView.MapCamera"></member><member name="P:MapView.MapIsEnabled"></member><member name="P:MapView.OrbitDrawMode"></member><member name="P:MapView.OrbitIconsMap"></member><member name="P:MapView.OrbitIconsMaterial"></member><member name="P:MapView.OrbitIconsTextSkin"></member><member name="P:MapView.OrbitIconsTextSkinDef"></member><member name="P:MapView.OrbitLinesMaterial"></member><member name="P:MapView.PatchColors"></member><member name="P:MapView.SplineEccentricOffset"></member><member name="P:MapView.TargetPatchColors"></member><member name="P:MapView.UINodePrefab"></member><member name="M:MapView.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.BroadcastMessage(string,object)"></member><member name="M:MapView.BroadcastMessage(string)"></member><member name="M:MapView.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.CancelInvoke"></member><member name="M:MapView.CancelInvoke(string)"></member><member name="M:MapView.CompareTag(string)"></member><member name="M:MapView.CreateVectorCanvasCam"></member><member name="M:MapView.Equals(object)"></member><member name="M:MapView.Finalize"></member><member name="M:MapView.GetComponent(System.Type)"></member><member name="M:MapView.GetComponent"></member><member name="M:MapView.GetComponent(string)"></member><member name="M:MapView.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:MapView.GetComponentInChildren(System.Type)"></member><member name="M:MapView.GetComponentInChildren"></member><member name="M:MapView.GetComponentInChildren(System.Boolean)"></member><member name="M:MapView.GetComponentInParent(System.Type)"></member><member name="M:MapView.GetComponentInParent"></member><member name="M:MapView.GetComponents(System.Type)"></member><member name="M:MapView.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:MapView.GetComponents(List)"></member><member name="M:MapView.GetComponents"></member><member name="M:MapView.GetComponentsInChildren(System.Type)"></member><member name="M:MapView.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:MapView.GetComponentsInChildren(System.Boolean)"></member><member name="M:MapView.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:MapView.GetComponentsInChildren"></member><member name="M:MapView.GetComponentsInChildren(List)"></member><member name="M:MapView.GetComponentsInParent(System.Type)"></member><member name="M:MapView.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:MapView.GetComponentsInParent(System.Boolean)"></member><member name="M:MapView.GetComponentsInParent(System.Boolean,List)"></member><member name="M:MapView.GetComponentsInParent"></member><member name="M:MapView.GetHashCode"></member><member name="M:MapView.GetInstanceID"></member><member name="M:MapView.GetType"></member><member name="M:MapView.Invoke(string,System.Single)"></member><member name="M:MapView.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:MapView.IsInvoking(string)"></member><member name="M:MapView.IsInvoking"></member><member name="M:MapView.MemberwiseClone"></member><member name="M:MapView.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessage(string,object)"></member><member name="M:MapView.SendMessage(string)"></member><member name="M:MapView.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.SendMessageUpwards(string,object)"></member><member name="M:MapView.SendMessageUpwards(string)"></member><member name="M:MapView.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:MapView.Start"></member><member name="M:MapView.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:MapView.StartCoroutine(string,object)"></member><member name="M:MapView.StartCoroutine(string)"></member><member name="M:MapView.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:MapView.StopAllCoroutines"></member><member name="M:MapView.StopCoroutine(string)"></member><member name="M:MapView.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:MapView.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:MapView.ToString"></member><member name="M:MapView.UpdateMap(System.Boolean)"><para>&amp;lt; Should count the active orbit only ?</para></member><member name="M:MapView.EnterMapView"><summary>Calling this function will cause the game to switch to map view from the flight view.</summary></member><member name="M:MapView.ExitMapView"><summary>Calling this function will cause the game to switch to flight view from the map view.</summary></member><member name="M:MapView.GetEccOffset(System.Single,System.Single,System.Single)"></member><member name="M:MapView.#ctor"><para>&amp;lt; duplicate VectorLine.mat, I&amp;apos;ve had enough of discarding its changes in git</para><remarks>-</remarks></member><member name="T:ModuleAblator"><summary>A PartModule that lets a part cool its skin by consuming a resource through pyrolysis. For example, ablative heatshields are implemented with this module. Attention: this module may override some heat conduction behavior (see reentryConductivity).</summary></member><member name="F:ModuleAblator.ablationTempThresh"><para>Minimum temperature for ablation to start</para><remarks>- Skin temperature (in Kelvin) at which ablation begins. This is merely a cutoff; it doesn't reposition the zero point of the calculation. If you set this value very high, you'll see ablation rate instantly jump from zero to a high value as the temperature passes this threshold.</remarks></member><member name="F:ModuleAblator.ablativeAmount"></member><member name="F:ModuleAblator.ablativeFlowMode"></member><member name="F:ModuleAblator.ablativeID"></member><member name="F:ModuleAblator.ablativeMaxAmount"></member><member name="F:ModuleAblator.ablativeResource"><para>Name of the Ablative Resource</para><remarks>- Which resource is consumed by the ablation process. Yes, you can put any resource here that is present in the part, for hilarious results... but you probably want to set it to "Ablator".</remarks></member><member name="F:ModuleAblator.charAlpha"></member><member name="F:ModuleAblator.charMax"><summary>How dark the charring effect on a part that has experienced ablation can get at most. Between 0 and 1, should be higher than or equal to charMin.</summary></member><member name="F:ModuleAblator.charMin"><summary>How darkly charred a part with ModuleAblator starts out, even without prior use. Between 0 and 1, should be lower than or equal to charMax.</summary></member><member name="F:ModuleAblator.charModule"></member><member name="F:ModuleAblator.charModuleName"><para>The &lt;ref refid='interface_i_scalar_module' kindref='compound'&gt;IScalarModule&lt;/ref&gt; name linked to the Ablator. Must be on the same part.</para></member><member name="F:ModuleAblator.density"></member><member name="F:ModuleAblator.downDir"></member><member name="F:ModuleAblator.flux"></member><member name="F:ModuleAblator.fluxField"></member><member name="F:ModuleAblator.infoTemp"></member><member name="F:ModuleAblator.isEnabled"></member><member name="F:ModuleAblator.loss"></member><member name="F:ModuleAblator.lossConst"><para>Constant to tune ablator loss</para><remarks>- A constant that governs the rate at which ablation happens. Modified by lossExp. Usually positive and very small (one digit).</remarks></member><member name="F:ModuleAblator.lossExp"><para>The &amp;quot;scale height&amp;quot; for ablator loss</para><remarks>- An exponent that governs the rate at which ablation happens. Modifies lossConst. Usually negative and quite large (four digits).</remarks></member><member name="F:ModuleAblator.lossField"></member><member name="F:ModuleAblator.moduleIsEnabled"></member><member name="F:ModuleAblator.moduleName"></member><member name="F:ModuleAblator.nodeName"></member><member name="F:ModuleAblator.nominalAmountRecip"><para>protected fields</para></member><member name="F:ModuleAblator.occNode"></member><member name="F:ModuleAblator.origConductivity"><para>we&amp;apos;ll store the part&amp;apos;s original conductivity here</para></member><member name="F:ModuleAblator.outputFlowMode"></member><member name="F:ModuleAblator.outputID"></member><member name="F:ModuleAblator.outputMult"></member><member name="F:ModuleAblator.outputResource"></member><member name="F:ModuleAblator.overrideStagingIconIfBlank"></member><member name="F:ModuleAblator.pyrolysisLoss"><para>actual per-tonne flux</para></member><member name="F:ModuleAblator.pyrolysisLossFactor"><para>Factor to the ablator&amp;apos;s specific heat to use for the pyrolysis flux</para></member><member name="F:ModuleAblator.reentryConductivity"><para>When our bottom is unoccluded, assume reentry and lower conductivity</para><remarks>- Governs the internal&lt;-&gt;internal heat conduction behavior of a part with ModuleAblator while the part's bottom node is unoccupied. Note that this *hard overrides* all other internals based heat conduction fields, such as heatConductivity or bulkheadProfiles - at all times, not just during actual reentry! (Beware if you try to use ModuleAblator to make ablatively cooled rocket engines.) It doesn't affect skin&lt;-&gt;skin conduction between parts, or the part's own skin&lt;-&gt;internal heat exchange. Default internal heat conductivity in KSP is 0.12, smaller conducts less, larger conducts more.</remarks></member><member name="F:ModuleAblator.resHandler"></member><member name="F:ModuleAblator.showUpgradesInModuleInfo"></member><member name="F:ModuleAblator.snapshot"></member><member name="F:ModuleAblator.stagingDisableText"></member><member name="F:ModuleAblator.stagingEnabled"></member><member name="F:ModuleAblator.stagingEnableText"></member><member name="F:ModuleAblator.stagingToggleEnabledEditor"></member><member name="F:ModuleAblator.stagingToggleEnabledFlight"></member><member name="F:ModuleAblator.unitsName"></member><member name="F:ModuleAblator.upgrades"></member><member name="F:ModuleAblator.upgradesApplied"></member><member name="F:ModuleAblator.upgradesApply"></member><member name="F:ModuleAblator.upgradesAsk"></member><member name="F:ModuleAblator.useAblator"></member><member name="F:ModuleAblator.useChar"><para>If true (default) will Char (burn) the IscalarModule (defined in CharModuleName) off as the ablator burns off.</para></member><member name="F:ModuleAblator.usekg"></member><member name="F:ModuleAblator.useNode"><para>Do we use the drag cube area check or do we use a node open/attached check?</para></member><member name="F:ModuleAblator.useOutput"></member><member name="P:ModuleAblator.Actions"></member><member name="P:ModuleAblator.ClassID"></member><member name="P:ModuleAblator.ClassName"></member><member name="P:ModuleAblator.enabled"></member><member name="P:ModuleAblator.Events"></member><member name="P:ModuleAblator.Fields"></member><member name="P:ModuleAblator.gameObject"></member><member name="P:ModuleAblator.GUIName"></member><member name="P:ModuleAblator.hideFlags"></member><member name="P:ModuleAblator.isActiveAndEnabled"></member><member name="P:ModuleAblator.ModuleAttributes"></member><member name="P:ModuleAblator.name"></member><member name="P:ModuleAblator.part"></member><member name="P:ModuleAblator.tag"></member><member name="P:ModuleAblator.transform"></member><member name="P:ModuleAblator.useGUILayout"></member><member name="P:ModuleAblator.vessel"></member><member name="M:ModuleAblator.AppliedUpgrades"></member><member name="M:ModuleAblator.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleAblator.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleAblator.Awake"></member><member name="M:ModuleAblator.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.BroadcastMessage(string,object)"></member><member name="M:ModuleAblator.BroadcastMessage(string)"></member><member name="M:ModuleAblator.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.CancelInvoke"></member><member name="M:ModuleAblator.CancelInvoke(string)"></member><member name="M:ModuleAblator.CompareTag(string)"></member><member name="M:ModuleAblator.Copy(PartModule)"></member><member name="M:ModuleAblator.Equals(object)"></member><member name="M:ModuleAblator.Finalize"></member><member name="M:ModuleAblator.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleAblator.FixedUpdate"><para>&amp;lt; Set conductivity based on whether stuff is occluding our bottom. If not, then we assume</para><para>&amp;lt; in units. Note we&amp;apos;re using maxAmount now, for consistent decrease.</para><para>&amp;lt; clamp</para><para>&amp;lt; get loss in kg</para></member><member name="M:ModuleAblator.GetComponent(System.Type)"></member><member name="M:ModuleAblator.GetComponent"></member><member name="M:ModuleAblator.GetComponent(string)"></member><member name="M:ModuleAblator.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAblator.GetComponentInChildren(System.Type)"></member><member name="M:ModuleAblator.GetComponentInChildren"></member><member name="M:ModuleAblator.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleAblator.GetComponentInParent(System.Type)"></member><member name="M:ModuleAblator.GetComponentInParent"></member><member name="M:ModuleAblator.GetComponents(System.Type)"></member><member name="M:ModuleAblator.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleAblator.GetComponents(List)"></member><member name="M:ModuleAblator.GetComponents"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleAblator.GetComponentsInChildren"></member><member name="M:ModuleAblator.GetComponentsInChildren(List)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Type)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleAblator.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleAblator.GetComponentsInParent"></member><member name="M:ModuleAblator.GetHashCode"></member><member name="M:ModuleAblator.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleAblator.GetInstanceID"></member><member name="M:ModuleAblator.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleAblator.GetStagingDisableText"></member><member name="M:ModuleAblator.GetStagingEnableText"></member><member name="M:ModuleAblator.GetType"></member><member name="M:ModuleAblator.GetUpgrade(string)"></member><member name="M:ModuleAblator.GetUpgradeInfo"></member><member name="M:ModuleAblator.HasUpgrades"></member><member name="M:ModuleAblator.Invoke(string,System.Single)"></member><member name="M:ModuleAblator.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleAblator.IsInvoking(string)"></member><member name="M:ModuleAblator.IsInvoking"></member><member name="M:ModuleAblator.IsStageable"></member><member name="M:ModuleAblator.IsValidContractObjective(string)"></member><member name="M:ModuleAblator.Load(ConfigNode)"></member><member name="M:ModuleAblator.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleAblator.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleAblator.MemberwiseClone"></member><member name="M:ModuleAblator.OnActive"></member><member name="M:ModuleAblator.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:ModuleAblator.OnCopy(PartModule)"></member><member name="M:ModuleAblator.OnFixedUpdate"></member><member name="M:ModuleAblator.OnIconCreate"></member><member name="M:ModuleAblator.OnInactive"></member><member name="M:ModuleAblator.OnInitialize"></member><member name="M:ModuleAblator.OnLoad(ConfigNode)"></member><member name="M:ModuleAblator.OnSave(ConfigNode)"></member><member name="M:ModuleAblator.OnStart(PartModule+StartState)"></member><member name="M:ModuleAblator.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleAblator.OnUpdate"></member><member name="M:ModuleAblator.PrintUpgrades"></member><member name="M:ModuleAblator.Save(ConfigNode)"></member><member name="M:ModuleAblator.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleAblator.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessage(string,object)"></member><member name="M:ModuleAblator.SendMessage(string)"></member><member name="M:ModuleAblator.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,object)"></member><member name="M:ModuleAblator.SendMessageUpwards(string)"></member><member name="M:ModuleAblator.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAblator.SetStaging(System.Boolean)"></member><member name="M:ModuleAblator.StagingEnabled"></member><member name="M:ModuleAblator.StagingToggleEnabledEditor"></member><member name="M:ModuleAblator.StagingToggleEnabledFlight"></member><member name="M:ModuleAblator.Start"></member><member name="M:ModuleAblator.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StartCoroutine(string,object)"></member><member name="M:ModuleAblator.StartCoroutine(string)"></member><member name="M:ModuleAblator.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StopAllCoroutines"></member><member name="M:ModuleAblator.StopCoroutine(string)"></member><member name="M:ModuleAblator.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAblator.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleAblator.ToggleStaging"></member><member name="M:ModuleAblator.ToString"></member><member name="M:ModuleAblator.Update"></member><member name="M:ModuleAblator.UpdateColor"></member><member name="M:ModuleAblator.UpdateStagingToggle"></member><member name="M:ModuleAblator.UpgradeWaitForScenarioModules"></member><member name="M:ModuleAblator.#ctor"><para>&amp;lt; Set conductivity based on whether stuff is occluding our bottom. If not, then we assume</para><para>&amp;lt; in units. Note we&amp;apos;re using maxAmount now, for consistent decrease.</para><para>&amp;lt; clamp</para><para>&amp;lt; get loss in kg</para></member><member name="T:ModuleAsteroid"><para>yes, asteroids are parts.</para><remarks>- Key module in PART[PotatoRoid]   Although this module is included in the PotatoRoid config file, it is not saved  in the VESSEL trees of unvisited asteroids. The module is initialized when an asteroid  first enters physics range</remarks></member><member name="F:ModuleAsteroid.AsteroidName"><summary>Stores the original name of the asteroid, before any ships docked with it</summary></member><member name="F:ModuleAsteroid.currentState"></member><member name="F:ModuleAsteroid.density"><summary>Density of asteroid, in tons/m^3. Used to calculate part mass.</summary></member><member name="F:ModuleAsteroid.experimentUsageMask"></member><member name="F:ModuleAsteroid.forceProceduralDrag"></member><member name="F:ModuleAsteroid.isEnabled"></member><member name="F:ModuleAsteroid.maxRadiusMultiplier"><summary>Largest allowed radius relative to nominal radius for that asteroid class</summary></member><member name="F:ModuleAsteroid.minRadiusMultiplier"><summary>Smallest allowed radius relative to nominal radius for that asteroid class</summary></member><member name="F:ModuleAsteroid.moduleIsEnabled"></member><member name="F:ModuleAsteroid.moduleName"></member><member name="F:ModuleAsteroid.overrideStagingIconIfBlank"></member><member name="F:ModuleAsteroid.prefabBaseURL"><para>These names are intentionally somewhat vague. Secondary state means rarer magic boulder asteroids.</para><remarks>- Stores some kind of resource.</remarks><example>"Procedural/PA_C"</example></member><member name="F:ModuleAsteroid.resHandler"></member><member name="F:ModuleAsteroid.sampleExperimentId"><summary>The science experiment triggered by sampling this asteroid.</summary></member><member name="F:ModuleAsteroid.sampleExperimentXmitScalar"><summary>The fraction of science recovered by transmitting back to Kerbin.</summary></member><member name="F:ModuleAsteroid.secondaryRate"></member><member name="F:ModuleAsteroid.seed"><summary>Used to generate asteroid mesh</summary></member><member name="F:ModuleAsteroid.showUpgradesInModuleInfo"></member><member name="F:ModuleAsteroid.snapshot"></member><member name="F:ModuleAsteroid.stagingDisableText"></member><member name="F:ModuleAsteroid.stagingEnabled"></member><member name="F:ModuleAsteroid.stagingEnableText"></member><member name="F:ModuleAsteroid.stagingToggleEnabledEditor"></member><member name="F:ModuleAsteroid.stagingToggleEnabledFlight"></member><member name="F:ModuleAsteroid.upgrades"></member><member name="F:ModuleAsteroid.upgradesApplied"></member><member name="F:ModuleAsteroid.upgradesApply"></member><member name="F:ModuleAsteroid.upgradesAsk"></member><member name="P:ModuleAsteroid.Actions"></member><member name="P:ModuleAsteroid.ClassID"></member><member name="P:ModuleAsteroid.ClassName"></member><member name="P:ModuleAsteroid.enabled"></member><member name="P:ModuleAsteroid.Events"></member><member name="P:ModuleAsteroid.Fields"></member><member name="P:ModuleAsteroid.gameObject"></member><member name="P:ModuleAsteroid.GUIName"></member><member name="P:ModuleAsteroid.hideFlags"></member><member name="P:ModuleAsteroid.isActiveAndEnabled"></member><member name="P:ModuleAsteroid.ModuleAttributes"></member><member name="P:ModuleAsteroid.name"></member><member name="P:ModuleAsteroid.part"></member><member name="P:ModuleAsteroid.tag"></member><member name="P:ModuleAsteroid.transform"></member><member name="P:ModuleAsteroid.useGUILayout"></member><member name="P:ModuleAsteroid.vessel"></member><member name="M:ModuleAsteroid.AppliedUpgrades"></member><member name="M:ModuleAsteroid.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleAsteroid.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleAsteroid.Awake"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,object)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string)"></member><member name="M:ModuleAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.CancelInvoke"></member><member name="M:ModuleAsteroid.CancelInvoke(string)"></member><member name="M:ModuleAsteroid.CompareTag(string)"></member><member name="M:ModuleAsteroid.Copy(PartModule)"></member><member name="M:ModuleAsteroid.Equals(object)"></member><member name="M:ModuleAsteroid.Finalize"></member><member name="M:ModuleAsteroid.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleAsteroid.GetComponent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponent"></member><member name="M:ModuleAsteroid.GetComponent(string)"></member><member name="M:ModuleAsteroid.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentInChildren"></member><member name="M:ModuleAsteroid.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentInParent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentInParent"></member><member name="M:ModuleAsteroid.GetComponents(System.Type)"></member><member name="M:ModuleAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleAsteroid.GetComponents(List)"></member><member name="M:ModuleAsteroid.GetComponents"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleAsteroid.GetComponentsInChildren"></member><member name="M:ModuleAsteroid.GetComponentsInChildren(List)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleAsteroid.GetComponentsInParent"></member><member name="M:ModuleAsteroid.GetHashCode"></member><member name="M:ModuleAsteroid.GetInfo"></member><member name="M:ModuleAsteroid.GetInstanceID"></member><member name="M:ModuleAsteroid.GetModuleDisplayName"></member><member name="M:ModuleAsteroid.GetModuleMass(System.Single,ModifierStagingSituation)"><para>Return the amount to modify the original part&amp;apos;s dry mass by. Returned values are added to the base mass. (0 means no effect)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleAsteroid.GetModuleMassChangeWhen"><para>Return under which circumstances the modulemass changes</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleAsteroid.GetStagingDisableText"></member><member name="M:ModuleAsteroid.GetStagingEnableText"></member><member name="M:ModuleAsteroid.GetType"></member><member name="M:ModuleAsteroid.GetUpgrade(string)"></member><member name="M:ModuleAsteroid.GetUpgradeInfo"></member><member name="M:ModuleAsteroid.GetVesselName"><summary>Returns asteroid name</summary><returns>The original asteroid name, not that of any docked ships</returns><remarks>Implements IVesselAutoRename</remarks></member><member name="M:ModuleAsteroid.GetVesselType"><summary>Returns the ship class</summary><returns>Returns VesselType.SpaceObject</returns><remarks>Implements IVesselAutoRename</remarks></member><member name="M:ModuleAsteroid.HasUpgrades"></member><member name="M:ModuleAsteroid.Invoke(string,System.Single)"></member><member name="M:ModuleAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleAsteroid.IsInvoking(string)"></member><member name="M:ModuleAsteroid.IsInvoking"></member><member name="M:ModuleAsteroid.IsStageable"></member><member name="M:ModuleAsteroid.IsValidContractObjective(string)"></member><member name="M:ModuleAsteroid.Load(ConfigNode)"></member><member name="M:ModuleAsteroid.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleAsteroid.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleAsteroid.MakeTarget"><summary>Called when the player selects the asteroid's center of mass as their target</summary></member><member name="M:ModuleAsteroid.MemberwiseClone"></member><member name="M:ModuleAsteroid.OnActive"></member><member name="M:ModuleAsteroid.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:ModuleAsteroid.OnCopy(PartModule)"></member><member name="M:ModuleAsteroid.OnDestroy"></member><member name="M:ModuleAsteroid.OnFixedUpdate"></member><member name="M:ModuleAsteroid.OnIconCreate"></member><member name="M:ModuleAsteroid.OnInactive"></member><member name="M:ModuleAsteroid.OnInitialize"></member><member name="M:ModuleAsteroid.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleAsteroid.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleAsteroid.OnStart(PartModule+StartState)"><summary>Initializes the asteroid</summary></member><member name="M:ModuleAsteroid.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleAsteroid.OnUpdate"></member><member name="M:ModuleAsteroid.PostInit"></member><member name="M:ModuleAsteroid.PrintUpgrades"></member><member name="M:ModuleAsteroid.Rangefinder(UnityEngine.Transform)"></member><member name="M:ModuleAsteroid.RenameAsteroidEvent"><summary>Called when the player manually renames the asteroid</summary></member><member name="M:ModuleAsteroid.Save(ConfigNode)"></member><member name="M:ModuleAsteroid.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessage(string,object)"></member><member name="M:ModuleAsteroid.SendMessage(string)"></member><member name="M:ModuleAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,object)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string)"></member><member name="M:ModuleAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleAsteroid.SetAsteroidMass(System.Single)"></member><member name="M:ModuleAsteroid.SetStaging(System.Boolean)"></member><member name="M:ModuleAsteroid.StagingEnabled"></member><member name="M:ModuleAsteroid.StagingToggleEnabledEditor"></member><member name="M:ModuleAsteroid.StagingToggleEnabledFlight"></member><member name="M:ModuleAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StartCoroutine(string,object)"></member><member name="M:ModuleAsteroid.StartCoroutine(string)"></member><member name="M:ModuleAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StopAllCoroutines"></member><member name="M:ModuleAsteroid.StopCoroutine(string)"></member><member name="M:ModuleAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleAsteroid.TakeSampleEVAEvent"><summary>Called when the player takes a surface sample</summary></member><member name="M:ModuleAsteroid.ToggleStaging"></member><member name="M:ModuleAsteroid.ToString"></member><member name="M:ModuleAsteroid.UpdateDragCube"><para>&amp;lt; somehow this gets unset sometimes</para></member><member name="M:ModuleAsteroid.UpdateStagingToggle"></member><member name="M:ModuleAsteroid.UpgradeWaitForScenarioModules"></member><member name="M:ModuleAsteroid.#ctor"><para>Return under which circumstances the modulemass changes</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="T:ModuleDataTransmitter"><summary>Implement science data transmission mechanics.</summary></member><member name="F:ModuleDataTransmitter.animationModuleIndex"></member><member name="F:ModuleDataTransmitter.antennaCombinable"></member><member name="F:ModuleDataTransmitter.antennaCombinableExponent"><summary>How well multiple identical antennas stack their antenna powers. If undefined, defaults to 0.75.</summary></member><member name="F:ModuleDataTransmitter.antennaPower"></member><member name="F:ModuleDataTransmitter.antennaType"></member><member name="F:ModuleDataTransmitter.busy"></member><member name="F:ModuleDataTransmitter.capacitorCharge"></member><member name="F:ModuleDataTransmitter.commStream"></member><member name="F:ModuleDataTransmitter.consumedResources"></member><member name="F:ModuleDataTransmitter.DeployFxModuleIndices"><summary>If one or more animations must be played before transmission start, and again in reverse after transmission end or is aborted, this array will store the indexes in the part modules array of the ModuleAnimateGeneric that should be used to play them.</summary></member><member name="F:ModuleDataTransmitter.deployFxModules"></member><member name="F:ModuleDataTransmitter.deployFxModuleStartPosition"></member><member name="F:ModuleDataTransmitter.errorMessage"></member><member name="F:ModuleDataTransmitter.errorStr"></member><member name="F:ModuleDataTransmitter.isEnabled"></member><member name="F:ModuleDataTransmitter.moduleIsEnabled"></member><member name="F:ModuleDataTransmitter.moduleName"></member><member name="F:ModuleDataTransmitter.overrideStagingIconIfBlank"></member><member name="F:ModuleDataTransmitter.packetInterval"><summary>The time between packets, in seconds.</summary></member><member name="F:ModuleDataTransmitter.packetResourceCost"><summary>How much requiredResource it cost to send a single packet.</summary></member><member name="F:ModuleDataTransmitter.packetSize"><summary>The data size of a packet, in Mbit.</summary></member><member name="F:ModuleDataTransmitter.powerText"></member><member name="F:ModuleDataTransmitter.ProgressFxModuleIndices"><summary>If one or more animations must be played during transmission, this array will store the indexes in the part modules array of the ModuleAnimateGeneric that should be used to play them.</summary></member><member name="F:ModuleDataTransmitter.progressFxModules"></member><member name="F:ModuleDataTransmitter.progressMessage"></member><member name="F:ModuleDataTransmitter.rangeCurve"></member><member name="F:ModuleDataTransmitter.requiredResource"><summary>The resource consumed by the data transmission. It default to ElectricCharge.</summary></member><member name="F:ModuleDataTransmitter.resHandler"></member><member name="F:ModuleDataTransmitter.scienceCurve"></member><member name="F:ModuleDataTransmitter.showUpgradesInModuleInfo"></member><member name="F:ModuleDataTransmitter.snapshot"></member><member name="F:ModuleDataTransmitter.stagingDisableText"></member><member name="F:ModuleDataTransmitter.stagingEnabled"></member><member name="F:ModuleDataTransmitter.stagingEnableText"></member><member name="F:ModuleDataTransmitter.stagingToggleEnabledEditor"></member><member name="F:ModuleDataTransmitter.stagingToggleEnabledFlight"></member><member name="F:ModuleDataTransmitter.statusMessage"></member><member name="F:ModuleDataTransmitter.statusText"></member><member name="F:ModuleDataTransmitter.transmissionQueue"><para>references to modules on this part which we can send values to</para></member><member name="F:ModuleDataTransmitter.upgrades"></member><member name="F:ModuleDataTransmitter.upgradesApplied"></member><member name="F:ModuleDataTransmitter.upgradesApply"></member><member name="F:ModuleDataTransmitter.upgradesAsk"></member><member name="F:ModuleDataTransmitter.xmitAborted"></member><member name="F:ModuleDataTransmitter.xmitIncomplete"><summary>This flag determine the behaviour in case an individual ScienceData transmission is interrupted for lack of requiredResource. If this is set to true, the partial data transmitted is credited in the science system and the ScienceData lost. If this is set to false, no data is credited in the science system and the ScienceData is returned to the first ModuleScienceContainer with space available in the vessel.</summary></member><member name="F:ModuleDataTransmitter.xmitOnHold"></member><member name="P:ModuleDataTransmitter.Actions"></member><member name="P:ModuleDataTransmitter.ClassID"></member><member name="P:ModuleDataTransmitter.ClassName"></member><member name="P:ModuleDataTransmitter.CommCombinable"></member><member name="P:ModuleDataTransmitter.CommCombinableExponent"></member><member name="P:ModuleDataTransmitter.CommPower"></member><member name="P:ModuleDataTransmitter.CommRangeCurve"></member><member name="P:ModuleDataTransmitter.CommScienceCurve"></member><member name="P:ModuleDataTransmitter.CommType"></member><member name="P:ModuleDataTransmitter.DataRate"></member><member name="P:ModuleDataTransmitter.DataResourceCost"></member><member name="P:ModuleDataTransmitter.enabled"></member><member name="P:ModuleDataTransmitter.Events"></member><member name="P:ModuleDataTransmitter.Fields"></member><member name="P:ModuleDataTransmitter.gameObject"></member><member name="P:ModuleDataTransmitter.GUIName"></member><member name="P:ModuleDataTransmitter.hideFlags"></member><member name="P:ModuleDataTransmitter.isActiveAndEnabled"></member><member name="P:ModuleDataTransmitter.ModuleAttributes"></member><member name="P:ModuleDataTransmitter.name"></member><member name="P:ModuleDataTransmitter.part"></member><member name="P:ModuleDataTransmitter.tag"></member><member name="P:ModuleDataTransmitter.transform"></member><member name="P:ModuleDataTransmitter.useGUILayout"></member><member name="P:ModuleDataTransmitter.vessel"></member><member name="M:ModuleDataTransmitter.AbortTransmission(string)"></member><member name="M:ModuleDataTransmitter.AppliedUpgrades"></member><member name="M:ModuleDataTransmitter.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleDataTransmitter.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleDataTransmitter.Awake"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,object)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string)"></member><member name="M:ModuleDataTransmitter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.CancelInvoke"></member><member name="M:ModuleDataTransmitter.CancelInvoke(string)"></member><member name="M:ModuleDataTransmitter.CanComm"><para>Is currently active</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.CanCommUnloaded(ProtoPartModuleSnapshot)"><para>Is active, but called when the vessel is unloaded. This is called on the prefab module on the part prefab and passed the &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt; on the relevant unloaded vessel.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mSnap&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The &lt;ref refid='class_proto_part_module_snapshot' kindref='compound'&gt;ProtoPartModuleSnapshot&lt;/ref&gt; of the partmodule on the relevant vessel</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleDataTransmitter.CanScienceTo(System.Boolean,System.Double,System.Double)"><para>Can this antenna transmit to a node of the given strength at the given distance (NOTE: Squared distance)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;combined&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Is the active comm of this vessel combined mode?</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;bPower&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the strength of the other comm node&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;sqrDistance&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the square of the magnitude of the displacement between the two nodes, i.e. distance*distance&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleDataTransmitter.CanSetFXModules(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.CanTransmit"><para>Must check, if commnet is enabled, whether the connection is valid and goes to Home</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.CheckContractObjectiveValidity"><para>Whether this particular module is valid for this objective. For example, leg wheels versus rover wheels.</para><para>&lt;simplesect kind='return'&gt;<para>If the module is valid.</para>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.CommPowerUnloaded(ProtoPartModuleSnapshot)"><para>Called to get antenna power when unloaded</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;mSnap&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleDataTransmitter.CompareTag(string)"></member><member name="M:ModuleDataTransmitter.Copy(PartModule)"></member><member name="M:ModuleDataTransmitter.Equals(object)"></member><member name="M:ModuleDataTransmitter.EvaluateScienceMultiplier(System.Double)"></member><member name="M:ModuleDataTransmitter.Finalize"></member><member name="M:ModuleDataTransmitter.findFxModules(int[],System.Boolean)"></member><member name="M:ModuleDataTransmitter.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleDataTransmitter.GetComponent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponent"></member><member name="M:ModuleDataTransmitter.GetComponent(string)"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren"></member><member name="M:ModuleDataTransmitter.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentInParent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentInParent"></member><member name="M:ModuleDataTransmitter.GetComponents(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.GetComponents(List)"></member><member name="M:ModuleDataTransmitter.GetComponents"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren"></member><member name="M:ModuleDataTransmitter.GetComponentsInChildren(List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDataTransmitter.GetComponentsInParent"></member><member name="M:ModuleDataTransmitter.GetConsumedResources"></member><member name="M:ModuleDataTransmitter.GetContractObjectiveType"><para>Gets the string identifier for this contract type. Stock contracts use ContractDefs constants, but could be used for non-stock contracts.</para><para>&lt;simplesect kind='return'&gt;<para>A string identifier for this type of objective.</para>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.GetDrawModulePanelCallback"><para>Return a method delegate to draw a custom panel, or null if not necessary.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleDataTransmitter.GetFxModuleScalar(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.GetHashCode"></member><member name="M:ModuleDataTransmitter.GetInfo"><para>return a simple string for the module info. Supports rich-text syntax.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.GetInstanceID"></member><member name="M:ModuleDataTransmitter.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.GetModulesScalarMax(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.GetModulesScalarMin(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.GetModuleTitle"><para>Return a string title for your module.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.GetPrimaryField"><para>Return a string to be displayed in the main information box on the tooltip, or null if nothing is that important to be up there.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDataTransmitter.GetStagingDisableText"></member><member name="M:ModuleDataTransmitter.GetStagingEnableText"></member><member name="M:ModuleDataTransmitter.GetType"></member><member name="M:ModuleDataTransmitter.GetUpgrade(string)"></member><member name="M:ModuleDataTransmitter.GetUpgradeInfo"></member><member name="M:ModuleDataTransmitter.GetVesselSignalStrength"></member><member name="M:ModuleDataTransmitter.HasUpgrades"></member><member name="M:ModuleDataTransmitter.Invoke(string,System.Single)"></member><member name="M:ModuleDataTransmitter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDataTransmitter.IsBusy"></member><member name="M:ModuleDataTransmitter.IsInvoking(string)"></member><member name="M:ModuleDataTransmitter.IsInvoking"></member><member name="M:ModuleDataTransmitter.IsStageable"></member><member name="M:ModuleDataTransmitter.IsValidContractObjective(string)"></member><member name="M:ModuleDataTransmitter.Load(ConfigNode)"></member><member name="M:ModuleDataTransmitter.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleDataTransmitter.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleDataTransmitter.MemberwiseClone"></member><member name="M:ModuleDataTransmitter.OnActive"></member><member name="M:ModuleDataTransmitter.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:ModuleDataTransmitter.OnCopy(PartModule)"></member><member name="M:ModuleDataTransmitter.OnFixedUpdate"></member><member name="M:ModuleDataTransmitter.OnIconCreate"></member><member name="M:ModuleDataTransmitter.OnInactive"></member><member name="M:ModuleDataTransmitter.OnInitialize"></member><member name="M:ModuleDataTransmitter.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleDataTransmitter.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; stores &amp;quot;can transmit&amp;quot; value for unloaded checking.</para></member><member name="M:ModuleDataTransmitter.OnStart(PartModule+StartState)"></member><member name="M:ModuleDataTransmitter.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleDataTransmitter.onStartTransmission(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.OnUpdate"></member><member name="M:ModuleDataTransmitter.PrintUpgrades"></member><member name="M:ModuleDataTransmitter.queueVesselData(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.ReturnDataToContainer(ScienceData)"></member><member name="M:ModuleDataTransmitter.Save(ConfigNode)"></member><member name="M:ModuleDataTransmitter.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,object)"></member><member name="M:ModuleDataTransmitter.SendMessage(string)"></member><member name="M:ModuleDataTransmitter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,object)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string)"></member><member name="M:ModuleDataTransmitter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDataTransmitter.SetFXModules(System.Collections.Generic.List,System.Single)"></member><member name="M:ModuleDataTransmitter.SetFXModulesUI(System.Collections.Generic.List,System.Boolean,System.Boolean)"></member><member name="M:ModuleDataTransmitter.SetStaging(System.Boolean)"></member><member name="M:ModuleDataTransmitter.StagingEnabled"></member><member name="M:ModuleDataTransmitter.StagingToggleEnabledEditor"></member><member name="M:ModuleDataTransmitter.StagingToggleEnabledFlight"></member><member name="M:ModuleDataTransmitter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StartCoroutine(string,object)"></member><member name="M:ModuleDataTransmitter.StartCoroutine(string)"></member><member name="M:ModuleDataTransmitter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StartTransmission"></member><member name="M:ModuleDataTransmitter.StartTransmissionAction(KSPActionParam)"></member><member name="M:ModuleDataTransmitter.StopAllCoroutines"></member><member name="M:ModuleDataTransmitter.StopCoroutine(string)"></member><member name="M:ModuleDataTransmitter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDataTransmitter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDataTransmitter.StopTransmission"></member><member name="M:ModuleDataTransmitter.ToggleStaging"></member><member name="M:ModuleDataTransmitter.ToString"></member><member name="M:ModuleDataTransmitter.TransmitData(System.Collections.Generic.List)"></member><member name="M:ModuleDataTransmitter.TransmitData(System.Collections.Generic.List,Callback)"></member><member name="M:ModuleDataTransmitter.TransmitIncompleteToggle"></member><member name="M:ModuleDataTransmitter.transmitQueuedData(System.Single,System.Single,Callback,System.Boolean)"><para>&amp;lt; accumulate energy until there is enough to send a package</para><para>&amp;lt; Check if anything got added to the queue while the animation was playing</para></member><member name="M:ModuleDataTransmitter.UpdateStagingToggle"></member><member name="M:ModuleDataTransmitter.UpgradeWaitForScenarioModules"></member><member name="M:ModuleDataTransmitter.WaitForFixedSeconds(System.Single)"></member><member name="M:ModuleDataTransmitter.#ctor"><para>Is currently active</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="T:ModuleDeployableSolarPanel"><summary>Implement solar panel mechanics.</summary></member><member name="F:ModuleDeployableSolarPanel._distMult"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel._efficMult"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel._flowRate"><summary>Used internally. This is an implementation detail that somehow got exposed to the public API. Do not change nor rely on its value.</summary></member><member name="F:ModuleDeployableSolarPanel.alignType"></member><member name="F:ModuleDeployableSolarPanel.anim"></member><member name="F:ModuleDeployableSolarPanel.animationName"></member><member name="F:ModuleDeployableSolarPanel.applyShielding"></member><member name="F:ModuleDeployableSolarPanel.applyShieldingExtend"></member><member name="F:ModuleDeployableSolarPanel.blockingObject"></member><member name="F:ModuleDeployableSolarPanel.chargeRate"><summary>The ElectricCharge per second this panel will generate when in direct sunlight, perfectly aligned with the sun direction and at a distance from the Sun center equal to the major axis of the home body.</summary></member><member name="F:ModuleDeployableSolarPanel.currentRotation"></member><member name="F:ModuleDeployableSolarPanel.defaultLayerMask"></member><member name="F:ModuleDeployableSolarPanel.deployState"></member><member name="F:ModuleDeployableSolarPanel.editorAnimationSpeedMult"></member><member name="F:ModuleDeployableSolarPanel.efficiencyMult"></member><member name="F:ModuleDeployableSolarPanel.eventsInSymmwtryAlways"></member><member name="F:ModuleDeployableSolarPanel.eventsInSymmwtryEditor"></member><member name="F:ModuleDeployableSolarPanel.extendActionName"></member><member name="F:ModuleDeployableSolarPanel.extendpanelsActionName"></member><member name="F:ModuleDeployableSolarPanel.flowFormat"></member><member name="F:ModuleDeployableSolarPanel.flowMult"></member><member name="F:ModuleDeployableSolarPanel.flowRate"></member><member name="F:ModuleDeployableSolarPanel.flowUnits"></member><member name="F:ModuleDeployableSolarPanel.flowUnitsUseSpace"></member><member name="F:ModuleDeployableSolarPanel.gResistance"></member><member name="F:ModuleDeployableSolarPanel.hasPivot"></member><member name="F:ModuleDeployableSolarPanel.hit"><para>for debugging</para><remarks>- Store the results of the last raycast from the solar panel position toward the Sun.</remarks></member><member name="F:ModuleDeployableSolarPanel.impactResistance"></member><member name="F:ModuleDeployableSolarPanel.isBreakable"></member><member name="F:ModuleDeployableSolarPanel.isEnabled"></member><member name="F:ModuleDeployableSolarPanel.isTracking"></member><member name="F:ModuleDeployableSolarPanel.launchUT"></member><member name="F:ModuleDeployableSolarPanel.moduleID"></member><member name="F:ModuleDeployableSolarPanel.moduleIsEnabled"></member><member name="F:ModuleDeployableSolarPanel.moduleName"></member><member name="F:ModuleDeployableSolarPanel.originalRotation"></member><member name="F:ModuleDeployableSolarPanel.overrideStagingIconIfBlank"></member><member name="F:ModuleDeployableSolarPanel.overrideUIWriteState"></member><member name="F:ModuleDeployableSolarPanel.panelDrag"></member><member name="F:ModuleDeployableSolarPanel.panelRotationTransform"></member><member name="F:ModuleDeployableSolarPanel.panelType"></member><member name="F:ModuleDeployableSolarPanel.partType"></member><member name="F:ModuleDeployableSolarPanel.pivotName"></member><member name="F:ModuleDeployableSolarPanel.planetLayerMask"></member><member name="F:ModuleDeployableSolarPanel.powerCurve"><summary>This is evaluated and the result used as multiplier for the chargeRate, if useCurve is set to true.</summary></member><member name="F:ModuleDeployableSolarPanel.raycastOffset"><para>distance in m from raycast transform to start raycasting, used for parts/terrain</para></member><member name="F:ModuleDeployableSolarPanel.raycastTransformName"></member><member name="F:ModuleDeployableSolarPanel.resHandler"></member><member name="F:ModuleDeployableSolarPanel.resMultForGetInfo"><summary>a multiplier for the output in the GetInfo call (eg. if charge rate = 2 and reMult = 3, it will show a charge rate of 6 in VAB/SPH but will only charge 2 when launched</summary></member><member name="F:ModuleDeployableSolarPanel.resourceName"></member><member name="F:ModuleDeployableSolarPanel.retractable"></member><member name="F:ModuleDeployableSolarPanel.retractActionName"></member><member name="F:ModuleDeployableSolarPanel.runOnce"></member><member name="F:ModuleDeployableSolarPanel.secondaryTransform"></member><member name="F:ModuleDeployableSolarPanel.secondaryTransformName"></member><member name="F:ModuleDeployableSolarPanel.showInfo"></member><member name="F:ModuleDeployableSolarPanel.showStatus"></member><member name="F:ModuleDeployableSolarPanel.showUpgradesInModuleInfo"></member><member name="F:ModuleDeployableSolarPanel.snapshot"></member><member name="F:ModuleDeployableSolarPanel.stagingDisableText"></member><member name="F:ModuleDeployableSolarPanel.stagingEnabled"></member><member name="F:ModuleDeployableSolarPanel.stagingEnableText"></member><member name="F:ModuleDeployableSolarPanel.stagingToggleEnabledEditor"></member><member name="F:ModuleDeployableSolarPanel.stagingToggleEnabledFlight"></member><member name="F:ModuleDeployableSolarPanel.status"></member><member name="F:ModuleDeployableSolarPanel.stopAnimation"></member><member name="F:ModuleDeployableSolarPanel.storedAnimationSpeed"></member><member name="F:ModuleDeployableSolarPanel.storedAnimationTime"></member><member name="F:ModuleDeployableSolarPanel.subPartMass"></member><member name="F:ModuleDeployableSolarPanel.subPartName"></member><member name="F:ModuleDeployableSolarPanel.sunAOA"></member><member name="F:ModuleDeployableSolarPanel.sunTracking"><summary>If this value is true, the ElectricCharge calculations will assume the panel is able to allineate itself toward the Sun direction, inasmuch as its pivot permit.</summary></member><member name="F:ModuleDeployableSolarPanel.sunTransform"><summary>Cache the Sun transform locally, to avoid some computations. This really should have made private.</summary></member><member name="F:ModuleDeployableSolarPanel.temperatureEfficCurve"><summary>This FloatCurve is evaluated with the current part temperature in Kelvin, and the result used as multiplier with chargeRate.</summary></member><member name="F:ModuleDeployableSolarPanel.timeEfficCurve"><summary>This floatCurve was perhaps meant to make the panels degrade over time. It is evalued and the result multiplied with chargeRate, but no part specify it and it default to a 'flat curve' returning 1.0.</summary></member><member name="F:ModuleDeployableSolarPanel.TrackingAlignmentOffset"></member><member name="F:ModuleDeployableSolarPanel.trackingBody"></member><member name="F:ModuleDeployableSolarPanel.trackingDotTransform"></member><member name="F:ModuleDeployableSolarPanel.trackingLOS"></member><member name="F:ModuleDeployableSolarPanel.trackingMode"></member><member name="F:ModuleDeployableSolarPanel.trackingSpeed"></member><member name="F:ModuleDeployableSolarPanel.trackingTransformLocal"></member><member name="F:ModuleDeployableSolarPanel.trackingTransformScaled"></member><member name="F:ModuleDeployableSolarPanel.trackingVessel"></member><member name="F:ModuleDeployableSolarPanel.upgrades"></member><member name="F:ModuleDeployableSolarPanel.upgradesApplied"></member><member name="F:ModuleDeployableSolarPanel.upgradesApply"></member><member name="F:ModuleDeployableSolarPanel.upgradesAsk"></member><member name="F:ModuleDeployableSolarPanel.useAnimation"></member><member name="F:ModuleDeployableSolarPanel.useCurve"><summary>If this value is true, the solar panel will evaluate the FloatCurve powerCurve to determine a multiplier for the chargeRate. If, instead, this value is false then chargeRate will be multiplied using the current solar flux normalized against the solar flux at the home body.</summary></member><member name="F:ModuleDeployableSolarPanel.useRaycastForTrackingDot"></member><member name="F:ModuleDeployableSolarPanel.vesselID"></member><member name="F:ModuleDeployableSolarPanel.windResistance"></member><member name="P:ModuleDeployableSolarPanel.Actions"></member><member name="P:ModuleDeployableSolarPanel.CanMove"></member><member name="P:ModuleDeployableSolarPanel.ClassID"></member><member name="P:ModuleDeployableSolarPanel.ClassName"></member><member name="P:ModuleDeployableSolarPanel.enabled"></member><member name="P:ModuleDeployableSolarPanel.Events"></member><member name="P:ModuleDeployableSolarPanel.Fields"></member><member name="P:ModuleDeployableSolarPanel.gameObject"></member><member name="P:ModuleDeployableSolarPanel.GetScalar"></member><member name="P:ModuleDeployableSolarPanel.GUIName"></member><member name="P:ModuleDeployableSolarPanel.hideFlags"></member><member name="P:ModuleDeployableSolarPanel.isActiveAndEnabled"></member><member name="P:ModuleDeployableSolarPanel.IsMultipleCubesActive"></member><member name="P:ModuleDeployableSolarPanel.MinAoAForQCheck"></member><member name="P:ModuleDeployableSolarPanel.ModuleAttributes"></member><member name="P:ModuleDeployableSolarPanel.name"></member><member name="P:ModuleDeployableSolarPanel.OnMoving"></member><member name="P:ModuleDeployableSolarPanel.OnStop"></member><member name="P:ModuleDeployableSolarPanel.part"></member><member name="P:ModuleDeployableSolarPanel.ScalarModuleID"></member><member name="P:ModuleDeployableSolarPanel.tag"></member><member name="P:ModuleDeployableSolarPanel.transform"></member><member name="P:ModuleDeployableSolarPanel.useGUILayout"></member><member name="P:ModuleDeployableSolarPanel.vessel"></member><member name="M:ModuleDeployableSolarPanel.AppliedUpgrades"></member><member name="M:ModuleDeployableSolarPanel.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleDeployableSolarPanel.AssumeDragCubePosition(string)"></member><member name="M:ModuleDeployableSolarPanel.Awake"></member><member name="M:ModuleDeployableSolarPanel.breakNotifications(string,string)"></member><member name="M:ModuleDeployableSolarPanel.breakPanels"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,object)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string)"></member><member name="M:ModuleDeployableSolarPanel.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.CalculateTracking"></member><member name="M:ModuleDeployableSolarPanel.CalculateTrackingLOS(UnityEngine.Vector3,string&amp;)"></member><member name="M:ModuleDeployableSolarPanel.CancelInvoke"></member><member name="M:ModuleDeployableSolarPanel.CancelInvoke(string)"></member><member name="M:ModuleDeployableSolarPanel.CheckContractObjectiveValidity"><para>Whether this particular module is valid for this objective. For example, leg wheels versus rover wheels.</para><para>&lt;simplesect kind='return'&gt;<para>If the module is valid.</para>&lt;/simplesect&gt;</para></member><member name="M:ModuleDeployableSolarPanel.CompareTag(string)"></member><member name="M:ModuleDeployableSolarPanel.Copy(PartModule)"></member><member name="M:ModuleDeployableSolarPanel.DoExtend"></member><member name="M:ModuleDeployableSolarPanel.DoRetract"></member><member name="M:ModuleDeployableSolarPanel.Equals(object)"></member><member name="M:ModuleDeployableSolarPanel.Extend"></member><member name="M:ModuleDeployableSolarPanel.ExtendAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.ExtendPanelsAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.Finalize"></member><member name="M:ModuleDeployableSolarPanel.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.FixedUpdate"></member><member name="M:ModuleDeployableSolarPanel.GetComponent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponent"></member><member name="M:ModuleDeployableSolarPanel.GetComponent(string)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInParent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentInParent"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents(List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponents"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInChildren(List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDeployableSolarPanel.GetComponentsInParent"></member><member name="M:ModuleDeployableSolarPanel.GetContractObjectiveType"><para>Gets the string identifier for this contract type. Stock contracts use ContractDefs constants, but could be used for non-stock contracts.</para><para>&lt;simplesect kind='return'&gt;<para>A string identifier for this type of objective.</para>&lt;/simplesect&gt;</para></member><member name="M:ModuleDeployableSolarPanel.GetDragCubeNames"></member><member name="M:ModuleDeployableSolarPanel.GetHashCode"></member><member name="M:ModuleDeployableSolarPanel.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDeployableSolarPanel.GetInstanceID"></member><member name="M:ModuleDeployableSolarPanel.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleDeployableSolarPanel.GetStagingDisableText"></member><member name="M:ModuleDeployableSolarPanel.GetStagingEnableText"></member><member name="M:ModuleDeployableSolarPanel.GetTrackingBodyTransforms"></member><member name="M:ModuleDeployableSolarPanel.GetType"></member><member name="M:ModuleDeployableSolarPanel.GetUpgrade(string)"></member><member name="M:ModuleDeployableSolarPanel.GetUpgradeInfo"></member><member name="M:ModuleDeployableSolarPanel.HasUpgrades"></member><member name="M:ModuleDeployableSolarPanel.Invoke(string,System.Single)"></member><member name="M:ModuleDeployableSolarPanel.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDeployableSolarPanel.IsInvoking(string)"></member><member name="M:ModuleDeployableSolarPanel.IsInvoking"></member><member name="M:ModuleDeployableSolarPanel.IsMoving"></member><member name="M:ModuleDeployableSolarPanel.IsStageable"></member><member name="M:ModuleDeployableSolarPanel.IsValidContractObjective(string)"></member><member name="M:ModuleDeployableSolarPanel.LateUpdate"></member><member name="M:ModuleDeployableSolarPanel.Load(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.MemberwiseClone"></member><member name="M:ModuleDeployableSolarPanel.OnActive"></member><member name="M:ModuleDeployableSolarPanel.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para><para>&amp;lt; Check decoupled bits (fairings), terrain, buildings, and DefaultLayer (EVA, etc)</para><para>&amp;lt; Store the original Quaternion</para><para>&amp;lt; set current to original</para></member><member name="M:ModuleDeployableSolarPanel.OnCollisionEnter(UnityEngine.Collision)"></member><member name="M:ModuleDeployableSolarPanel.OnCopy(PartModule)"></member><member name="M:ModuleDeployableSolarPanel.OnFixedUpdate"></member><member name="M:ModuleDeployableSolarPanel.OnIconCreate"></member><member name="M:ModuleDeployableSolarPanel.OnInactive"></member><member name="M:ModuleDeployableSolarPanel.OnInitialize"></member><member name="M:ModuleDeployableSolarPanel.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; For backwards compatibility //#autoLOC_234583</para></member><member name="M:ModuleDeployableSolarPanel.OnSave(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.OnStart(PartModule+StartState)"><para>Called when the part starts. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleDeployableSolarPanel.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleDeployableSolarPanel.OnUpdate"></member><member name="M:ModuleDeployableSolarPanel.PostCalculateTracking(System.Boolean,UnityEngine.Vector3)"><para>Once tracking is complete, this is called to perform any additional actions</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;trackingLOS&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;trackingDirection&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; No power when blocked, otherwise we get some phantom voltage. - Rob</para></member><member name="M:ModuleDeployableSolarPanel.PostFSMUpdate"></member><member name="M:ModuleDeployableSolarPanel.PrintUpgrades"></member><member name="M:ModuleDeployableSolarPanel.recurse(UnityEngine.Transform)"></member><member name="M:ModuleDeployableSolarPanel.Retract"></member><member name="M:ModuleDeployableSolarPanel.RetractAction(KSPActionParam)"></member><member name="M:ModuleDeployableSolarPanel.Save(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,object)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string)"></member><member name="M:ModuleDeployableSolarPanel.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,object)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string)"></member><member name="M:ModuleDeployableSolarPanel.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDeployableSolarPanel.SetScalar(System.Single)"></member><member name="M:ModuleDeployableSolarPanel.SetStaging(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.SetUIRead(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.SetUIWrite(System.Boolean)"></member><member name="M:ModuleDeployableSolarPanel.ShouldBreakFromG"></member><member name="M:ModuleDeployableSolarPanel.ShouldBreakFromPressure"></member><member name="M:ModuleDeployableSolarPanel.StagingEnabled"></member><member name="M:ModuleDeployableSolarPanel.StagingToggleEnabledEditor"></member><member name="M:ModuleDeployableSolarPanel.StagingToggleEnabledFlight"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(string,object)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine(string)"></member><member name="M:ModuleDeployableSolarPanel.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.startFSM"></member><member name="M:ModuleDeployableSolarPanel.StopAllCoroutines"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(string)"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDeployableSolarPanel.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDeployableSolarPanel.ToggleStaging"></member><member name="M:ModuleDeployableSolarPanel.ToString"></member><member name="M:ModuleDeployableSolarPanel.updateFSM"></member><member name="M:ModuleDeployableSolarPanel.UpdateStagingToggle"></member><member name="M:ModuleDeployableSolarPanel.UpgradeWaitForScenarioModules"></member><member name="M:ModuleDeployableSolarPanel.UsesProceduralDragCubes"></member><member name="M:ModuleDeployableSolarPanel.#ctor"><para>Whether this particular module is valid for this objective. For example, leg wheels versus rover wheels.</para><para>&lt;simplesect kind='return'&gt;<para>If the module is valid.</para>&lt;/simplesect&gt;</para></member><member name="T:ModuleDragModifier"></member><member name="F:ModuleDragModifier.dragCubeName"><summary>Some parts, like parachutes or cargo bays, have multiple drag cubes to reflect their deployment states.</summary></member><member name="F:ModuleDragModifier.dragModifier"><summary>Changes the amount of drag a part produces. Typical application is modifying the amount of slowing a parachute creates. Unsure if it modifies the physical size of the drag cube, or only its drag.</summary></member><member name="F:ModuleDragModifier.isEnabled"></member><member name="F:ModuleDragModifier.moduleIsEnabled"></member><member name="F:ModuleDragModifier.moduleName"></member><member name="F:ModuleDragModifier.overrideStagingIconIfBlank"></member><member name="F:ModuleDragModifier.resHandler"></member><member name="F:ModuleDragModifier.showUpgradesInModuleInfo"></member><member name="F:ModuleDragModifier.snapshot"></member><member name="F:ModuleDragModifier.stagingDisableText"></member><member name="F:ModuleDragModifier.stagingEnabled"></member><member name="F:ModuleDragModifier.stagingEnableText"></member><member name="F:ModuleDragModifier.stagingToggleEnabledEditor"></member><member name="F:ModuleDragModifier.stagingToggleEnabledFlight"></member><member name="F:ModuleDragModifier.upgrades"></member><member name="F:ModuleDragModifier.upgradesApplied"></member><member name="F:ModuleDragModifier.upgradesApply"></member><member name="F:ModuleDragModifier.upgradesAsk"></member><member name="P:ModuleDragModifier.Actions"></member><member name="P:ModuleDragModifier.ClassID"></member><member name="P:ModuleDragModifier.ClassName"></member><member name="P:ModuleDragModifier.enabled"></member><member name="P:ModuleDragModifier.Events"></member><member name="P:ModuleDragModifier.Fields"></member><member name="P:ModuleDragModifier.gameObject"></member><member name="P:ModuleDragModifier.GUIName"></member><member name="P:ModuleDragModifier.hideFlags"></member><member name="P:ModuleDragModifier.isActiveAndEnabled"></member><member name="P:ModuleDragModifier.ModuleAttributes"></member><member name="P:ModuleDragModifier.name"></member><member name="P:ModuleDragModifier.part"></member><member name="P:ModuleDragModifier.tag"></member><member name="P:ModuleDragModifier.transform"></member><member name="P:ModuleDragModifier.useGUILayout"></member><member name="P:ModuleDragModifier.vessel"></member><member name="M:ModuleDragModifier.AppliedUpgrades"></member><member name="M:ModuleDragModifier.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleDragModifier.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleDragModifier.Awake"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,object)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string)"></member><member name="M:ModuleDragModifier.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.CancelInvoke"></member><member name="M:ModuleDragModifier.CancelInvoke(string)"></member><member name="M:ModuleDragModifier.CompareTag(string)"></member><member name="M:ModuleDragModifier.Copy(PartModule)"></member><member name="M:ModuleDragModifier.Equals(object)"></member><member name="M:ModuleDragModifier.Finalize"></member><member name="M:ModuleDragModifier.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleDragModifier.GetComponent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponent"></member><member name="M:ModuleDragModifier.GetComponent(string)"></member><member name="M:ModuleDragModifier.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentInChildren(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentInChildren"></member><member name="M:ModuleDragModifier.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentInParent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentInParent"></member><member name="M:ModuleDragModifier.GetComponents(System.Type)"></member><member name="M:ModuleDragModifier.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleDragModifier.GetComponents(List)"></member><member name="M:ModuleDragModifier.GetComponents"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleDragModifier.GetComponentsInChildren"></member><member name="M:ModuleDragModifier.GetComponentsInChildren(List)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Type)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleDragModifier.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleDragModifier.GetComponentsInParent"></member><member name="M:ModuleDragModifier.GetHashCode"></member><member name="M:ModuleDragModifier.GetInfo"></member><member name="M:ModuleDragModifier.GetInstanceID"></member><member name="M:ModuleDragModifier.GetModuleDisplayName"></member><member name="M:ModuleDragModifier.GetStagingDisableText"></member><member name="M:ModuleDragModifier.GetStagingEnableText"></member><member name="M:ModuleDragModifier.GetType"></member><member name="M:ModuleDragModifier.GetUpgrade(string)"></member><member name="M:ModuleDragModifier.GetUpgradeInfo"></member><member name="M:ModuleDragModifier.HasUpgrades"></member><member name="M:ModuleDragModifier.Invoke(string,System.Single)"></member><member name="M:ModuleDragModifier.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleDragModifier.IsInvoking(string)"></member><member name="M:ModuleDragModifier.IsInvoking"></member><member name="M:ModuleDragModifier.IsStageable"></member><member name="M:ModuleDragModifier.IsValidContractObjective(string)"></member><member name="M:ModuleDragModifier.Load(ConfigNode)"></member><member name="M:ModuleDragModifier.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleDragModifier.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleDragModifier.MemberwiseClone"></member><member name="M:ModuleDragModifier.OnActive"></member><member name="M:ModuleDragModifier.OnAwake"></member><member name="M:ModuleDragModifier.OnCopy(PartModule)"></member><member name="M:ModuleDragModifier.OnFixedUpdate"></member><member name="M:ModuleDragModifier.OnIconCreate"></member><member name="M:ModuleDragModifier.OnInactive"></member><member name="M:ModuleDragModifier.OnInitialize"></member><member name="M:ModuleDragModifier.OnLoad(ConfigNode)"></member><member name="M:ModuleDragModifier.OnSave(ConfigNode)"></member><member name="M:ModuleDragModifier.OnStart(PartModule+StartState)"></member><member name="M:ModuleDragModifier.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleDragModifier.OnUpdate"></member><member name="M:ModuleDragModifier.PrintUpgrades"></member><member name="M:ModuleDragModifier.Save(ConfigNode)"></member><member name="M:ModuleDragModifier.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleDragModifier.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessage(string,object)"></member><member name="M:ModuleDragModifier.SendMessage(string)"></member><member name="M:ModuleDragModifier.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,object)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string)"></member><member name="M:ModuleDragModifier.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleDragModifier.SetStaging(System.Boolean)"></member><member name="M:ModuleDragModifier.StagingEnabled"></member><member name="M:ModuleDragModifier.StagingToggleEnabledEditor"></member><member name="M:ModuleDragModifier.StagingToggleEnabledFlight"></member><member name="M:ModuleDragModifier.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StartCoroutine(string,object)"></member><member name="M:ModuleDragModifier.StartCoroutine(string)"></member><member name="M:ModuleDragModifier.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StopAllCoroutines"></member><member name="M:ModuleDragModifier.StopCoroutine(string)"></member><member name="M:ModuleDragModifier.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleDragModifier.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleDragModifier.ToggleStaging"></member><member name="M:ModuleDragModifier.ToString"></member><member name="M:ModuleDragModifier.UpdateStagingToggle"></member><member name="M:ModuleDragModifier.UpgradeWaitForScenarioModules"></member><member name="M:ModuleDragModifier.#ctor"></member><member name="T:ModuleEngines"><summary>A PartModule that can be configured to behave like many different kinds of engines. All stock propulsion systems except for RCS are implemented through ModuleEngines (or ModuleEnginesFX, which is an extension of this module that can do more).</summary></member><member name="F:ModuleEngines.allowRestart"><para>By default allow restart.</para><remarks>- Whether the engine can be restarted after it was shut down. Defaults to True.</remarks></member><member name="F:ModuleEngines.allowShutdown"><para>By default allow shutdown.</para><remarks>- Whether the engine can be shut down at all. Typically set False for solid boosters. Defaults to True.</remarks></member><member name="F:ModuleEngines.atmChangeFlow"><para>Atmospheric density will change fuel flow (and thus thrust)</para></member><member name="F:ModuleEngines.atmCurve"><para>Normally thrust is proportional to density, but we allow tuning. Tuning is especially needed because there&amp;apos;s no stratosphere, so temperature keeps decreasing and thus speed of sound keeps decreasing.</para><remarks>- Used for air-breathing engines, usually together with useAtmCurve, velCurve, and useVelCurve. Defines a thrust curve based on atmospheric pressure. Thrust reduction or increase applied by this curve does not change fuel flow. This means engines using this curve only need one static Isp value inside atmosphereCurve, as fuel efficiency is instead defined by how much thrust you're getting at your current altitude (and airspeed, if also using velCurve).

key = pressure,mandatory  thrustMultiplier,mandatory  tangentAngleIn,optional  tangentAngleOut,optional

Pressure is 0 in space, 1 at kerbin sea level, and can be higher elsewhere.</remarks></member><member name="F:ModuleEngines.atmCurveIsp"><para>Same as atmCurve, but changes Isp not flow</para></member><member name="F:ModuleEngines.atmosphereCurve"><para>a curve to determine loss or gain of thrust due to changes in atmosphere vs vacuum values are based on ISP to ATM Pressure</para><remarks>- Represents the specific impulse (Isp) of the engine as a function of atmospheric pressure. To get the Isp at a certain height h (in meters), use</remarks><code>atmosphereCurve.Evaluate(h)</code><remarks>.

key = pressure,mandatory  Isp,mandatory  tangentAngleIn,optional  tangentAngleOut,optional

Pressure is 0 in space, 1 at kerbin sea level, and can be higher elsewhere.</remarks></member><member name="F:ModuleEngines.autoPositionFX"></member><member name="F:ModuleEngines.CLAMP"><para>tunable clamp. The flow multiplier will never go below this.</para></member><member name="F:ModuleEngines.clampPropReceived"><para>do we clamp the return percent to the min ratio (and never request more on followups) or do we request all always, and average?</para></member><member name="F:ModuleEngines.clampPropReceivedMinLowerAmount"></member><member name="F:ModuleEngines.consumedResources"></member><member name="F:ModuleEngines.currentThrottle"><summary>The current *internal* throttle of the engine, which may be different from the current throttle set by the player if</summary><c>useEngineResponseTime</c><remarks>is true.</remarks></member><member name="F:ModuleEngines.disableUnderwater"><para>Temp and module values.</para><remarks>- Whether the engine can run when submerged in liquid.</remarks></member><member name="F:ModuleEngines.disengageGroup"></member><member name="F:ModuleEngines.engageGroup"></member><member name="F:ModuleEngines.engineAccelerationSpeed"><summary>How quickly the engine spools up when the user-set throttle is higher than</summary><c>currentThrottle</c><remarks>.    Each frame, if the user throttle is higher than the engine's</remarks><c>currentThrottle</c><remarks>,</remarks><c>currentThrottle</c><remarks>is updated according to the formula</remarks><code>currentThrottle += (user throttle - currentThrottle) * engineAccelerationSpeed * dt</code><c>engineAccelerationSpeed</c><remarks>has units of inverse seconds.</remarks></member><member name="F:ModuleEngines.engineDecelerationSpeed"><summary>How quickly the engine spools down when the user-set throttle is higher than</summary><c>currentThrottle</c><remarks>.    Each frame, if the user throttle is lower than the engine's</remarks><c>currentThrottle</c><remarks>,</remarks><c>currentThrottle</c><remarks>is updated according to the formula</remarks><code>currentThrottle += (user throttle - currentThrottle) * engineDecelerationSpeed * dt</code><c>engineDecelerationSpeed</c><remarks>has units of inverse seconds.</remarks></member><member name="F:ModuleEngines.engineID"></member><member name="F:ModuleEngines.EngineIgnited"><summary>Whether the engine has ever been turned on?</summary></member><member name="F:ModuleEngines.engineShutdown"></member><member name="F:ModuleEngines.engineType"></member><member name="F:ModuleEngines.exhaustDamage"><summary>Whether the engine's exhaust will damage parts that it hits. A ray is cast back along the engine's thrust vector and if that ray hits a part then that part gets heated up, and may explode if it exceeds its maximum temperature.</summary></member><member name="F:ModuleEngines.exhaustDamageDistanceOffset"></member><member name="F:ModuleEngines.exhaustDamageFalloffPower"></member><member name="F:ModuleEngines.exhaustDamageLogEvent"></member><member name="F:ModuleEngines.exhaustDamageMaxMutliplier"></member><member name="F:ModuleEngines.exhaustDamageMaxRange"></member><member name="F:ModuleEngines.exhaustDamageMultiplier"></member><member name="F:ModuleEngines.exhaustDamageSplashbackFallofPower"></member><member name="F:ModuleEngines.exhaustDamageSplashbackMaxMutliplier"></member><member name="F:ModuleEngines.exhaustDamageSplashbackMult"></member><member name="F:ModuleEngines.exhaustSplashbackDamage"></member><member name="F:ModuleEngines.finalThrust"></member><member name="F:ModuleEngines.flameout"></member><member name="F:ModuleEngines.flameoutBar"><para>When the flow multiplier goes below this, we &amp;quot;flameout&amp;quot; the engine. NOTE: THIS FIXES ASYMMETRIC FLAMEOUTS.</para></member><member name="F:ModuleEngines.flameoutGroup"></member><member name="F:ModuleEngines.flameoutGroups"></member><member name="F:ModuleEngines.flowMultCap"><para>cap beyond which increases to flow multiplier aren&amp;apos;t fully felt (start to taper off)</para></member><member name="F:ModuleEngines.flowMultCapSharpness"><para>Sharpness of the tapering off of flow increase beyond cap</para></member><member name="F:ModuleEngines.flowMultiplier"></member><member name="F:ModuleEngines.fuelFlowGui"><para>Used to display fuel flow to the UI Look into better ways of displaying this perhaps.</para></member><member name="F:ModuleEngines.fxGroupPrefix"></member><member name="F:ModuleEngines.fxOffset"></member><member name="F:ModuleEngines.g"></member><member name="F:ModuleEngines.heatProduction"><para>KSp fields!</para><remarks>- How much internal flux is created when the engine runs. This should be seen more as a multiplier than an absolute value; actual production ingame depends on current thrust output.</remarks></member><member name="F:ModuleEngines.hit"></member><member name="F:ModuleEngines.ignitionThreshold"></member><member name="F:ModuleEngines.isEnabled"></member><member name="F:ModuleEngines.machHeatMult"><para>heat multiplier for &amp;quot;over-mach&amp;quot; heat</para></member><member name="F:ModuleEngines.machLimit"><para>Thermal limit, in Mach, for the engine. Defaults to VERYHIGH. This is not when the engine blows up, but merely when it starts generating more heat than &amp;apos;usual&amp;apos;.</para></member><member name="F:ModuleEngines.manuallyOverridden"></member><member name="F:ModuleEngines.maxFuelFlow"></member><member name="F:ModuleEngines.maxThrust"><summary>The thrust this engine produces at maximum throttle.</summary></member><member name="F:ModuleEngines.minFuelFlow"></member><member name="F:ModuleEngines.minThrust"><summary>The thrust this engine produces at minimum throttle.</summary></member><member name="F:ModuleEngines.mixtureDensity"><para>What is the density of the mixture.</para></member><member name="F:ModuleEngines.mixtureDensityRecip"></member><member name="F:ModuleEngines.moduleIsEnabled"></member><member name="F:ModuleEngines.moduleName"></member><member name="F:ModuleEngines.multFlow"><para>Multiplier to final flow as calculated</para></member><member name="F:ModuleEngines.multIsp"><para>Multiplier to final Isp as calculated</para></member><member name="F:ModuleEngines.normalizeHeatForFlow"><para>Do we divide the heat produced by the flow multiplier to get the final flux? I.e. do we always produce the same heat for the same throttle setting?</para></member><member name="F:ModuleEngines.overrideStagingIconIfBlank"></member><member name="F:ModuleEngines.powerGroup"></member><member name="F:ModuleEngines.powerGroups"></member><member name="F:ModuleEngines.powerSfx"></member><member name="F:ModuleEngines.PropellantGauges"></member><member name="F:ModuleEngines.propellantReqMet"><para>How much of our requirement was met. Starts hidden, shown on activate.</para></member><member name="F:ModuleEngines.propellants"><para>The resources used by this engine, and their relative ratios.</para></member><member name="F:ModuleEngines.ratioSum"></member><member name="F:ModuleEngines.realIsp"><summary>The current specific impulse of this engine, in seconds.</summary></member><member name="F:ModuleEngines.requestedMassFlow"></member><member name="F:ModuleEngines.requestedThrottle"></member><member name="F:ModuleEngines.resHandler"></member><member name="F:ModuleEngines.resultingThrust"></member><member name="F:ModuleEngines.runningGroup"></member><member name="F:ModuleEngines.runningGroups"></member><member name="F:ModuleEngines.shieldedCanActivate"></member><member name="F:ModuleEngines.showUpgradesInModuleInfo"></member><member name="F:ModuleEngines.snapshot"></member><member name="F:ModuleEngines.staged"></member><member name="F:ModuleEngines.stagingDisableText"></member><member name="F:ModuleEngines.stagingEnabled"></member><member name="F:ModuleEngines.stagingEnableText"></member><member name="F:ModuleEngines.stagingToggleEnabledEditor"></member><member name="F:ModuleEngines.stagingToggleEnabledFlight"></member><member name="F:ModuleEngines.status"></member><member name="F:ModuleEngines.statusL2"></member><member name="F:ModuleEngines.statusL2Field"></member><member name="F:ModuleEngines.throttleIgniteLevelMult"></member><member name="F:ModuleEngines.throttleInstant"></member><member name="F:ModuleEngines.throttleInstantShutdown"></member><member name="F:ModuleEngines.throttleIspCurve"><para>Modifies Isp based on throttle. time is throttle, value is multiplier to Isp</para><para>tracking fields for it (default non-displaying)</para></member><member name="F:ModuleEngines.throttleIspCurveAtmStrength"><para>Modifies Isp based on throttle. time is pressure in atm, value is how much throttling affects Isp (i.e. Isp = input * Lerp(1, throttleIspCurve, throttleIspCurveAtmStrength)</para></member><member name="F:ModuleEngines.throttleLocked"><summary>Whether this engine always produces maximum thrust once activated (like solid rocket boosters).</summary></member><member name="F:ModuleEngines.throttleMin"></member><member name="F:ModuleEngines.throttleResponseRate"></member><member name="F:ModuleEngines.throttleShutdownMult"></member><member name="F:ModuleEngines.throttleStartedMult"></member><member name="F:ModuleEngines.throttleStartupMult"></member><member name="F:ModuleEngines.throttleUseAlternate"></member><member name="F:ModuleEngines.throttlingBaseClamp"></member><member name="F:ModuleEngines.throttlingBaseDivisor"><para>Thrust Vector.</para></member><member name="F:ModuleEngines.throttlingBaseRate"></member><member name="F:ModuleEngines.thrustCurve"><para>The curve to use</para></member><member name="F:ModuleEngines.thrustCurveDisplay"></member><member name="F:ModuleEngines.thrustCurveRatio"></member><member name="F:ModuleEngines.thrustPercentage"></member><member name="F:ModuleEngines.thrustTransformMultipliers"><para>Gui Fields.</para></member><member name="F:ModuleEngines.thrustTransforms"><summary>These transforms store the locations and directions at which the thrust this engine generates is applied to the part. Which component of the transform rotation gives the thrust vector? (Not 100% sure but I think it is evenly split between the transforms. So if there are two transforms, each emits 50% of the total thrust of the part.)</summary></member><member name="F:ModuleEngines.thrustVectorTransformName"></member><member name="F:ModuleEngines.upgrades"></member><member name="F:ModuleEngines.upgradesApplied"></member><member name="F:ModuleEngines.upgradesApply"></member><member name="F:ModuleEngines.upgradesAsk"></member><member name="F:ModuleEngines.useAtmCurve"><para>Do we use the atm curve? If not, and atmChangeFlow is true, just use atm linearly.</para><remarks>- Used for air-breathing engines. Defaults to False, must be set to True to make the engine obey an atmCurve.</remarks></member><member name="F:ModuleEngines.useAtmCurveIsp"></member><member name="F:ModuleEngines.useEngineResponseTime"><summary>Whether the engine has a nonzero spool-up and spool-down time.   If</summary><c>useEngineResponseTime</c><remarks>is true, then the engine does not spool up or down instantly when the throttle changes, but uses the</remarks><c>engineAccelerationSpeed</c><remarks>and</remarks><c>engineDecelerationSpeed</c><remarks>variables.</remarks></member><member name="F:ModuleEngines.useThrottleIspCurve"></member><member name="F:ModuleEngines.useThrustCurve"><para>should we use a thrust curve (based on resource remaining) ?</para></member><member name="F:ModuleEngines.useVelCurve"><para>If false, we don&amp;apos;t use the new velCurve.</para><remarks>- Used for air-breathing engines. Defaults to False, must be set to True to make the engine obey a velCurve.</remarks></member><member name="F:ModuleEngines.useVelCurveIsp"></member><member name="F:ModuleEngines.velCurve"><para>replacement for the existing module&amp;apos;s velocityCurve. Note that its x value is Mach, not m/s velocity. High-bypass turbofans will see thrust decrease steadily from static. Low-bypass turbofans and turbojets will see thrust decrease slightly up to about 0.2 Mach then increase steadily until the limit is reached (both in terms of heat, and incoming compression vs compressor compression). Ramjets have 0 static thrust, and do not light until 0.3 Mach or so, but once lit have steadily increasing thrust until Mach 5, when the incoming air can no longer be slowed to subsonic (combustion must be subsonic for ramjets). Thermal limits also apply, of course. For heat limits, see machLimit, below.</para><remarks>- Used for air-breathing engines, usually together with useAtmCurve, atmCurve, and useVelCurve. Defines a thrust curve based on mach number. Thrust reduction or increase applied by this curve does not change fuel flow, which has similar implications on Isp as atmCurve does.

key = machNumber,mandatory  thrustMultiplier,mandatory  tangentAngleIn,optional  tangentAngleOut,optional</remarks></member><member name="F:ModuleEngines.velCurveIsp"><para>Same as velCurve but changes Isp not flow</para></member><member name="F:ModuleEngines.damageLayerMask"></member><member name="P:ModuleEngines.Actions"></member><member name="P:ModuleEngines.ClassID"></member><member name="P:ModuleEngines.ClassName"></member><member name="P:ModuleEngines.enabled"></member><member name="P:ModuleEngines.engineName"></member><member name="P:ModuleEngines.Events"></member><member name="P:ModuleEngines.Fields"></member><member name="P:ModuleEngines.gameObject"></member><member name="P:ModuleEngines.getFlameoutState"><summary>If this is true, the engine is not producing thrust because it can't get enough resources.</summary></member><member name="P:ModuleEngines.getIgnitionState"></member><member name="P:ModuleEngines.GUIName"></member><member name="P:ModuleEngines.hideFlags"></member><member name="P:ModuleEngines.isActiveAndEnabled"></member><member name="P:ModuleEngines.isOperational"></member><member name="P:ModuleEngines.ModuleAttributes"></member><member name="P:ModuleEngines.name"></member><member name="P:ModuleEngines.normalizedOutput"></member><member name="P:ModuleEngines.normalizedThrustOutput"></member><member name="P:ModuleEngines.part"></member><member name="P:ModuleEngines.tag"></member><member name="P:ModuleEngines.throttleSetting"></member><member name="P:ModuleEngines.transform"></member><member name="P:ModuleEngines.useGUILayout"></member><member name="P:ModuleEngines.vessel"></member><member name="M:ModuleEngines.Activate"><para>&amp;lt; If the engines were shutdown previously and restarting is not allowed, prevent restart of engines</para><para>&amp;lt; activate any gimbals on this part.</para></member><member name="M:ModuleEngines.ActivateAction(KSPActionParam)"></member><member name="M:ModuleEngines.ActivatePowerFX"></member><member name="M:ModuleEngines.ActivateRunningFX"></member><member name="M:ModuleEngines.AppliedUpgrades"></member><member name="M:ModuleEngines.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleEngines.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleEngines.AutoPlaceFXGroup(FXGroup,UnityEngine.Transform)"></member><member name="M:ModuleEngines.Awake"></member><member name="M:ModuleEngines.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.BroadcastMessage(string,object)"></member><member name="M:ModuleEngines.BroadcastMessage(string)"></member><member name="M:ModuleEngines.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.BurstFlameoutGroups"></member><member name="M:ModuleEngines.CalculateThrust"><para>&amp;lt; Check if flow multiplier is too low, if so flameout.</para><para>&amp;lt; Request a mass of propellant and see what percentage of that was returned</para><para>&amp;lt; Multipy the thrust by the normalized amount of propellant we recieved</para><para>&amp;lt; Display the fuel flow to gui</para></member><member name="M:ModuleEngines.CancelInvoke"></member><member name="M:ModuleEngines.CancelInvoke(string)"></member><member name="M:ModuleEngines.CheckDeprived(System.Double,string&amp;)"></member><member name="M:ModuleEngines.CheckTransformsUnderwater"></member><member name="M:ModuleEngines.CompareTag(string)"></member><member name="M:ModuleEngines.Copy(PartModule)"></member><member name="M:ModuleEngines.DeactivateLoopingFX"></member><member name="M:ModuleEngines.DeactivatePowerFX"></member><member name="M:ModuleEngines.DeactivateRunningFX"></member><member name="M:ModuleEngines.EngineExhaustDamage"><para>&amp;lt; roughly 1 watt/Newton base, times the multiplier</para></member><member name="M:ModuleEngines.Equals(object)"></member><member name="M:ModuleEngines.Finalize"></member><member name="M:ModuleEngines.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleEngines.FixedUpdate"><para>&amp;lt; Update the condition of the propellants.</para></member><member name="M:ModuleEngines.Flameout(string,System.Boolean,System.Boolean)"><para>Sets flameout true and, if the first time, plays FX. Sets status messages as appropriate.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;message&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The message to display</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;statusOnly&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;For use in &lt;ref refid='class_module_engines_f_x_1a6596aadb2b0beb3702f27c857deec25e' kindref='member'&gt;ModuleEnginesFX.CanStart()&lt;/ref&gt;&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleEngines.FXReset"></member><member name="M:ModuleEngines.FXUpdate"></member><member name="M:ModuleEngines.GetComponent(System.Type)"></member><member name="M:ModuleEngines.GetComponent"></member><member name="M:ModuleEngines.GetComponent(string)"></member><member name="M:ModuleEngines.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleEngines.GetComponentInChildren(System.Type)"></member><member name="M:ModuleEngines.GetComponentInChildren"></member><member name="M:ModuleEngines.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleEngines.GetComponentInParent(System.Type)"></member><member name="M:ModuleEngines.GetComponentInParent"></member><member name="M:ModuleEngines.GetComponents(System.Type)"></member><member name="M:ModuleEngines.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleEngines.GetComponents(List)"></member><member name="M:ModuleEngines.GetComponents"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleEngines.GetComponentsInChildren"></member><member name="M:ModuleEngines.GetComponentsInChildren(List)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Type)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleEngines.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleEngines.GetComponentsInParent"></member><member name="M:ModuleEngines.GetConsumedResources"></member><member name="M:ModuleEngines.GetCurrentThrust"></member><member name="M:ModuleEngines.GetDrawModulePanelCallback"><para>Return a method delegate to draw a custom panel, or null if not necessary.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleEngines.GetEngineThrust(System.Single,System.Single)"></member><member name="M:ModuleEngines.GetEngineType"></member><member name="M:ModuleEngines.getExhaustVelocity(System.Single)"></member><member name="M:ModuleEngines.GetHashCode"></member><member name="M:ModuleEngines.GetInfo"><para>return a simple string for the module info. Supports rich-text syntax.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleEngines.GetInfoThrust(System.Boolean)"><para>&amp;lt; get the max mult, and thus report maximum thrust possible.</para></member><member name="M:ModuleEngines.GetInstanceID"></member><member name="M:ModuleEngines.getMaxFuelFlow(Propellant)"><para>Get the fuel flow in units/sec for the given propellant</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;p&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleEngines.GetMaxThrust"></member><member name="M:ModuleEngines.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleEngines.GetModuleTitle"><para>Return a string title for your module.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleEngines.GetPrimaryField"><para>Return a string to be displayed in the main information box on the tooltip, or null if nothing is that important to be up there.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><para>&amp;lt; report static thrust</para></member><member name="M:ModuleEngines.GetStagingDisableText"></member><member name="M:ModuleEngines.GetStagingEnableText"></member><member name="M:ModuleEngines.GetThrottlingMult(System.Single,System.Single)"></member><member name="M:ModuleEngines.GetType"></member><member name="M:ModuleEngines.GetUpgrade(string)"></member><member name="M:ModuleEngines.GetUpgradeInfo"></member><member name="M:ModuleEngines.HasUpgrades"></member><member name="M:ModuleEngines.HijackFX(FXGroup,string)"></member><member name="M:ModuleEngines.InitializeFX"></member><member name="M:ModuleEngines.Invoke(string,System.Single)"></member><member name="M:ModuleEngines.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleEngines.IsInvoking(string)"></member><member name="M:ModuleEngines.IsInvoking"></member><member name="M:ModuleEngines.IsStageable"><para>Should this module be counted when seeing whether to have a stack icon present? Override in a module for custom behavior; otherwise returns true if the module (or something the module inherits from above &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt; itself) overrides &lt;ref refid='class_module_engines_1a57f858c5fb9f722d6f47cfd4b4fe7005' kindref='member'&gt;OnActive()&lt;/ref&gt;</para></member><member name="M:ModuleEngines.IsValidContractObjective(string)"></member><member name="M:ModuleEngines.Load(ConfigNode)"></member><member name="M:ModuleEngines.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleEngines.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleEngines.MemberwiseClone"></member><member name="M:ModuleEngines.ModifyFlow"><para>Returns a multiplier to fuel flow (and thus thrust). Will only do so if atmChangeFlow is true (in which case flow is modified by atmsopheric density, either linearly or via a curve, that&amp;apos;s toggled by useAtmCurve) and/or if useVelCurve is true, in which case it&amp;apos;s modified by mach finally, it&amp;apos;s clamped to CLAMP so it never quite goes to 0. If neither situation obtains, we just return 1.0.</para><para>&lt;simplesect kind='return'&gt;<para>fuel flow multiplier</para>&lt;/simplesect&gt;</para><para>&amp;lt; First get density (normalized to 1.0 = sea level)</para></member><member name="M:ModuleEngines.OnAction(KSPActionParam)"></member><member name="M:ModuleEngines.OnActive"><para>Called when the part is set active (after unpacking etc)</para></member><member name="M:ModuleEngines.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:ModuleEngines.OnCenterOfThrustQuery(CenterOfThrustQuery)"></member><member name="M:ModuleEngines.OnCopy(PartModule)"></member><member name="M:ModuleEngines.OnFixedUpdate"></member><member name="M:ModuleEngines.OnIconCreate"></member><member name="M:ModuleEngines.OnInactive"></member><member name="M:ModuleEngines.OnInitialize"></member><member name="M:ModuleEngines.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; are we overriding the portion of thrust per transform?</para><para>&amp;lt; to catch the case where the last is left unspecified</para></member><member name="M:ModuleEngines.OnSave(ConfigNode)"></member><member name="M:ModuleEngines.OnStart(PartModule+StartState)"></member><member name="M:ModuleEngines.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleEngines.OnUpdate"></member><member name="M:ModuleEngines.PlayEngageFX"></member><member name="M:ModuleEngines.PlayFlameoutFX(System.Boolean)"><para>plays Flameout FX</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;flamingOut&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;use True if flaming out, false if un-flaming-out</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:ModuleEngines.PlayShutdownFX"></member><member name="M:ModuleEngines.PrintUpgrades"></member><member name="M:ModuleEngines.RequestPropellant(System.Double)"><para>&amp;lt; How many units of propellant do we need to get our mass</para><para>&amp;lt; not requesting any propellant, so just return 0</para><para>&amp;lt; How much fuel did we get?</para><para>&amp;lt; How much fuel did we get?</para><para>&amp;lt; Store propellant fractions recieved for final normalization of thrust</para><para>&amp;lt; From 0 to 1, how much of our request did we get.</para></member><member name="M:ModuleEngines.RequiredPropellantMass(System.Single)"><para>&amp;lt; Apply flow (i.e. atm/vel) multipliers</para></member><member name="M:ModuleEngines.Save(ConfigNode)"></member><member name="M:ModuleEngines.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleEngines.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessage(string,object)"></member><member name="M:ModuleEngines.SendMessage(string)"></member><member name="M:ModuleEngines.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,object)"></member><member name="M:ModuleEngines.SendMessageUpwards(string)"></member><member name="M:ModuleEngines.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleEngines.SetListener"></member><member name="M:ModuleEngines.SetPowerGroupsActive(System.Boolean)"></member><member name="M:ModuleEngines.SetRunningGroupsActive(System.Boolean)"></member><member name="M:ModuleEngines.SetStaging(System.Boolean)"></member><member name="M:ModuleEngines.SetupFXGroups"></member><member name="M:ModuleEngines.SetupPropellant"><para>&amp;lt; Debug.Log(&amp;quot;Propellant ID: &amp;quot; + p.id);</para></member><member name="M:ModuleEngines.Shutdown"><para>&amp;lt; If engine cannot be shutdown. Ignore the event.</para></member><member name="M:ModuleEngines.ShutdownAction(KSPActionParam)"></member><member name="M:ModuleEngines.StagingEnabled"></member><member name="M:ModuleEngines.StagingToggleEnabledEditor"></member><member name="M:ModuleEngines.StagingToggleEnabledFlight"></member><member name="M:ModuleEngines.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StartCoroutine(string,object)"></member><member name="M:ModuleEngines.StartCoroutine(string)"></member><member name="M:ModuleEngines.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StopAllCoroutines"></member><member name="M:ModuleEngines.StopCoroutine(string)"></member><member name="M:ModuleEngines.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleEngines.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleEngines.ThrustUpdate"><para>&amp;lt; Get the amount of actual thrust the engines are producing</para><para>&amp;lt; calculate heat multiplier, starting at 1.0</para><para>&amp;lt; No fuel is flowing, zero out gui values</para></member><member name="M:ModuleEngines.TimeWarping"><para>&amp;lt; Prevent engines from operating if in high warp. Seems to happen with super low thrust engines, that are below accel detection threshold (Ion Engines)</para></member><member name="M:ModuleEngines.ToggleStaging"></member><member name="M:ModuleEngines.ToString"></member><member name="M:ModuleEngines.UnFlameout(System.Boolean)"><para>Sets flameout false and, if the first time, plays FX Hides status line 2.</para></member><member name="M:ModuleEngines.UpdatePropellantGauge(Propellant)"></member><member name="M:ModuleEngines.UpdatePropellantStatus(System.Boolean)"><para>&amp;lt; Update Connected Resources first, or they&amp;apos;ll be off a frame on the guages</para><para>&amp;lt; Update the propellant guages after the connected resources</para></member><member name="M:ModuleEngines.UpdateStagingToggle"></member><member name="M:ModuleEngines.UpdateThrottle"><para>&amp;lt; This yields F-1 like curves where F-1 responserate is about 1.</para></member><member name="M:ModuleEngines.UpgradeWaitForScenarioModules"></member><member name="M:ModuleEngines.#ctor"><para>&amp;lt; If the engines were shutdown previously and restarting is not allowed, prevent restart of engines</para><para>&amp;lt; activate any gimbals on this part.</para></member><member name="T:ModuleProceduralFairing"></member><member name="F:ModuleProceduralFairing.axis"></member><member name="F:ModuleProceduralFairing.baseRadius"></member><member name="F:ModuleProceduralFairing.capRadius"></member><member name="F:ModuleProceduralFairing.ClosedColliders"></member><member name="F:ModuleProceduralFairing.coneSweepPrecision"><para>1/precision = units/frame</para></member><member name="F:ModuleProceduralFairing.coneSweepRays"><para>rays per sweep</para></member><member name="F:ModuleProceduralFairing.edgeSlide"></member><member name="F:ModuleProceduralFairing.edgeWarp"></member><member name="F:ModuleProceduralFairing.ejectionForce"></member><member name="F:ModuleProceduralFairing.FairingMaterial"></member><member name="F:ModuleProceduralFairing.fairingNode"></member><member name="F:ModuleProceduralFairing.interstageCraftID"></member><member name="F:ModuleProceduralFairing.interstageOcclusionFudge"></member><member name="F:ModuleProceduralFairing.isEnabled"></member><member name="F:ModuleProceduralFairing.maxRadius"></member><member name="F:ModuleProceduralFairing.moduleID"></member><member name="F:ModuleProceduralFairing.moduleIsEnabled"></member><member name="F:ModuleProceduralFairing.moduleName"></member><member name="F:ModuleProceduralFairing.nArcs"><summary>Sets default number of fairing sides in VAB/SPH editor</summary></member><member name="F:ModuleProceduralFairing.nCollidersPerArc"></member><member name="F:ModuleProceduralFairing.nCollidersPerXSection"></member><member name="F:ModuleProceduralFairing.noseTip"></member><member name="F:ModuleProceduralFairing.nSides"></member><member name="F:ModuleProceduralFairing.overrideStagingIconIfBlank"></member><member name="F:ModuleProceduralFairing.panelGrouping"></member><member name="F:ModuleProceduralFairing.Panels"></member><member name="F:ModuleProceduralFairing.pivot"></member><member name="F:ModuleProceduralFairing.resHandler"></member><member name="F:ModuleProceduralFairing.showUpgradesInModuleInfo"></member><member name="F:ModuleProceduralFairing.snapshot"></member><member name="F:ModuleProceduralFairing.snapThreshold"></member><member name="F:ModuleProceduralFairing.stagingDisableText"></member><member name="F:ModuleProceduralFairing.stagingEnabled"></member><member name="F:ModuleProceduralFairing.stagingEnableText"></member><member name="F:ModuleProceduralFairing.stagingToggleEnabledEditor"></member><member name="F:ModuleProceduralFairing.stagingToggleEnabledFlight"></member><member name="F:ModuleProceduralFairing.TextureURL"></member><member name="F:ModuleProceduralFairing.UnitAreaCost"><para>cost per sqr unit of paneling</para></member><member name="F:ModuleProceduralFairing.UnitAreaMass"><para>mass per square unit of paneling</para></member><member name="F:ModuleProceduralFairing.upgrades"></member><member name="F:ModuleProceduralFairing.upgradesApplied"></member><member name="F:ModuleProceduralFairing.upgradesApply"></member><member name="F:ModuleProceduralFairing.upgradesAsk"></member><member name="F:ModuleProceduralFairing.useClamshell"><summary>Toggles between clamshell or confetti fairings in VAB/SPH editor</summary></member><member name="F:ModuleProceduralFairing.xSectionHeightMax"></member><member name="F:ModuleProceduralFairing.xSectionHeightMin"></member><member name="F:ModuleProceduralFairing.xSections"></member><member name="P:ModuleProceduralFairing.Actions"></member><member name="P:ModuleProceduralFairing.CanMove"></member><member name="P:ModuleProceduralFairing.ClassID"></member><member name="P:ModuleProceduralFairing.ClassName"></member><member name="P:ModuleProceduralFairing.enabled"></member><member name="P:ModuleProceduralFairing.Events"></member><member name="P:ModuleProceduralFairing.Fields"></member><member name="P:ModuleProceduralFairing.gameObject"></member><member name="P:ModuleProceduralFairing.GetScalar"></member><member name="P:ModuleProceduralFairing.GUIName"></member><member name="P:ModuleProceduralFairing.hideFlags"></member><member name="P:ModuleProceduralFairing.isActiveAndEnabled"></member><member name="P:ModuleProceduralFairing.ModuleAttributes"></member><member name="P:ModuleProceduralFairing.name"></member><member name="P:ModuleProceduralFairing.OnMoving"></member><member name="P:ModuleProceduralFairing.OnStop"></member><member name="P:ModuleProceduralFairing.part"></member><member name="P:ModuleProceduralFairing.ScalarModuleID"></member><member name="P:ModuleProceduralFairing.tag"></member><member name="P:ModuleProceduralFairing.transform"></member><member name="P:ModuleProceduralFairing.useGUILayout"></member><member name="P:ModuleProceduralFairing.vessel"></member><member name="M:ModuleProceduralFairing.AppliedUpgrades"></member><member name="M:ModuleProceduralFairing.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleProceduralFairing.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleProceduralFairing.Awake"></member><member name="M:ModuleProceduralFairing.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.BroadcastMessage(string,object)"></member><member name="M:ModuleProceduralFairing.BroadcastMessage(string)"></member><member name="M:ModuleProceduralFairing.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.BuildFairing"></member><member name="M:ModuleProceduralFairing.CancelInvoke"></member><member name="M:ModuleProceduralFairing.CancelInvoke(string)"></member><member name="M:ModuleProceduralFairing.CompareTag(string)"></member><member name="M:ModuleProceduralFairing.Copy(PartModule)"></member><member name="M:ModuleProceduralFairing.DeleteFairing"></member><member name="M:ModuleProceduralFairing.DeployFairing"></member><member name="M:ModuleProceduralFairing.DeployFairingAction(KSPActionParam)"></member><member name="M:ModuleProceduralFairing.EditFairing"></member><member name="M:ModuleProceduralFairing.Equals(object)"></member><member name="M:ModuleProceduralFairing.Finalize"></member><member name="M:ModuleProceduralFairing.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleProceduralFairing.GetComponent(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponent"></member><member name="M:ModuleProceduralFairing.GetComponent(string)"></member><member name="M:ModuleProceduralFairing.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentInChildren(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponentInChildren"></member><member name="M:ModuleProceduralFairing.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentInParent(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponentInParent"></member><member name="M:ModuleProceduralFairing.GetComponents(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleProceduralFairing.GetComponents(List)"></member><member name="M:ModuleProceduralFairing.GetComponents"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren"></member><member name="M:ModuleProceduralFairing.GetComponentsInChildren(List)"></member><member name="M:ModuleProceduralFairing.GetComponentsInParent(System.Type)"></member><member name="M:ModuleProceduralFairing.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleProceduralFairing.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleProceduralFairing.GetComponentsInParent"></member><member name="M:ModuleProceduralFairing.GetDrawModulePanelCallback"><para>Return a method delegate to draw a custom panel, or null if not necessary.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;rect&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleProceduralFairing.GetFairingArea"><para>The total area (in sq units) of all panels in the fairing</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetHashCode"></member><member name="M:ModuleProceduralFairing.GetInfo"><para>return a simple string for the module info. Supports rich-text syntax.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetInstanceID"></member><member name="M:ModuleProceduralFairing.GetModuleCost(System.Single,ModifierStagingSituation)"><para>Return the amount to modify the original part&amp;apos;s dry cost by. Returned values are added to the base cost. (0 means no effect)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetModuleCostChangeWhen"><para>Return under which circumstances the modulecost changes</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetModuleMass(System.Single,ModifierStagingSituation)"><para>Return the amount to modify the original part&amp;apos;s dry mass by. Returned values are added to the base mass. (0 means no effect)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetModuleMassChangeWhen"><para>Return under which circumstances the modulemass changes</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetModuleSize(UnityEngine.Vector3,ModifierStagingSituation)"></member><member name="M:ModuleProceduralFairing.GetModuleSizeChangeWhen"></member><member name="M:ModuleProceduralFairing.GetModuleTitle"><para>Return a string title for your module.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetPrimaryField"><para>Return a string to be displayed in the main information box on the tooltip, or null if nothing is that important to be up there.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleProceduralFairing.GetStagingDisableText"></member><member name="M:ModuleProceduralFairing.GetStagingEnableText"></member><member name="M:ModuleProceduralFairing.GetType"></member><member name="M:ModuleProceduralFairing.GetUpgrade(string)"></member><member name="M:ModuleProceduralFairing.GetUpgradeInfo"></member><member name="M:ModuleProceduralFairing.HasUpgrades"></member><member name="M:ModuleProceduralFairing.Invoke(string,System.Single)"></member><member name="M:ModuleProceduralFairing.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleProceduralFairing.IsInvoking(string)"></member><member name="M:ModuleProceduralFairing.IsInvoking"></member><member name="M:ModuleProceduralFairing.IsMoving"></member><member name="M:ModuleProceduralFairing.IsStageable"></member><member name="M:ModuleProceduralFairing.IsValidContractObjective(string)"></member><member name="M:ModuleProceduralFairing.Load(ConfigNode)"></member><member name="M:ModuleProceduralFairing.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleProceduralFairing.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleProceduralFairing.MemberwiseClone"></member><member name="M:ModuleProceduralFairing.OnActive"><para>Called when the part is set active (after unpacking etc)</para></member><member name="M:ModuleProceduralFairing.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para><para>&amp;lt; in case it was serialized over to a clone</para></member><member name="M:ModuleProceduralFairing.OnCopy(PartModule)"></member><member name="M:ModuleProceduralFairing.OnFixedUpdate"></member><member name="M:ModuleProceduralFairing.OnIconCreate"></member><member name="M:ModuleProceduralFairing.OnInactive"></member><member name="M:ModuleProceduralFairing.OnInitialize"></member><member name="M:ModuleProceduralFairing.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleProceduralFairing.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleProceduralFairing.OnStart(PartModule+StartState)"></member><member name="M:ModuleProceduralFairing.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleProceduralFairing.OnUpdate"></member><member name="M:ModuleProceduralFairing.PayloadStrutsSetup"></member><member name="M:ModuleProceduralFairing.PrintUpgrades"></member><member name="M:ModuleProceduralFairing.ReleasePayload"></member><member name="M:ModuleProceduralFairing.Save(ConfigNode)"></member><member name="M:ModuleProceduralFairing.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleProceduralFairing.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.SendMessage(string,object)"></member><member name="M:ModuleProceduralFairing.SendMessage(string)"></member><member name="M:ModuleProceduralFairing.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.SendMessageUpwards(string,object)"></member><member name="M:ModuleProceduralFairing.SendMessageUpwards(string)"></member><member name="M:ModuleProceduralFairing.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleProceduralFairing.SetScalar(System.Single)"><para>Call to tell the module to assume the given state. Mind transition may not happen instantly. Check GetScalar for the actual state of the thing.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;s&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleProceduralFairing.SetStaging(System.Boolean)"></member><member name="M:ModuleProceduralFairing.SetUIRead(System.Boolean)"><para>Call to set whether or not the module will display its own UI. Read and Write define which kinds of information are allowed to be displayed</para></member><member name="M:ModuleProceduralFairing.SetUIWrite(System.Boolean)"><para>Call to set whether or not the module will display its own UI. Read and Write define which kinds of information are allowed to be displayed</para></member><member name="M:ModuleProceduralFairing.SetupOcclusionTest(System.Boolean)"></member><member name="M:ModuleProceduralFairing.StagingEnabled"></member><member name="M:ModuleProceduralFairing.StagingToggleEnabledEditor"></member><member name="M:ModuleProceduralFairing.StagingToggleEnabledFlight"></member><member name="M:ModuleProceduralFairing.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleProceduralFairing.StartCoroutine(string,object)"></member><member name="M:ModuleProceduralFairing.StartCoroutine(string)"></member><member name="M:ModuleProceduralFairing.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleProceduralFairing.StopAllCoroutines"></member><member name="M:ModuleProceduralFairing.StopCoroutine(string)"></member><member name="M:ModuleProceduralFairing.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleProceduralFairing.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleProceduralFairing.ToggleStaging"></member><member name="M:ModuleProceduralFairing.ToString"></member><member name="M:ModuleProceduralFairing.UpdateStagingToggle"></member><member name="M:ModuleProceduralFairing.UpgradeWaitForScenarioModules"></member><member name="M:ModuleProceduralFairing.#ctor"></member><member name="T:ModuleResourceHarvester"><summary>This part module is used by Drills to implement drilling for resources on planet surfaces.</summary></member><member name="F:ModuleResourceHarvester._displayedResFlow"></member><member name="F:ModuleResourceHarvester._isValidSituation"></member><member name="F:ModuleResourceHarvester._preCalculateEfficiency"></member><member name="F:ModuleResourceHarvester._resBroker"></member><member name="F:ModuleResourceHarvester._resConverter"></member><member name="F:ModuleResourceHarvester._resFlow"></member><member name="F:ModuleResourceHarvester._totalEfficiencyModifiers"></member><member name="F:ModuleResourceHarvester.airSpeedStatic"></member><member name="F:ModuleResourceHarvester.AlwaysActive"></member><member name="F:ModuleResourceHarvester.AutoShutdown"></member><member name="F:ModuleResourceHarvester.cachedWasNotAsteroid"></member><member name="F:ModuleResourceHarvester.CausesDepletion"></member><member name="F:ModuleResourceHarvester.ConverterName"></member><member name="F:ModuleResourceHarvester.debugCrewBon"></member><member name="F:ModuleResourceHarvester.debugDelta"></member><member name="F:ModuleResourceHarvester.debugEffBonus"></member><member name="F:ModuleResourceHarvester.debugFinBon"></member><member name="F:ModuleResourceHarvester.debugTimeFac"></member><member name="F:ModuleResourceHarvester.DefaultShutoffTemp"></member><member name="F:ModuleResourceHarvester.DepletionRate"></member><member name="F:ModuleResourceHarvester.DirtyFlag"></member><member name="F:ModuleResourceHarvester.Efficiency"></member><member name="F:ModuleResourceHarvester.EfficiencyBonus"></member><member name="F:ModuleResourceHarvester.EfficiencyModifiers"></member><member name="F:ModuleResourceHarvester.eInput"></member><member name="F:ModuleResourceHarvester.ExperienceEffect"></member><member name="F:ModuleResourceHarvester.FillAmount"></member><member name="F:ModuleResourceHarvester.GeneratesHeat"></member><member name="F:ModuleResourceHarvester.HarvesterType"></member><member name="F:ModuleResourceHarvester.HarvestThreshold"></member><member name="F:ModuleResourceHarvester.hasEInput"></member><member name="F:ModuleResourceHarvester.ImpactRange"></member><member name="F:ModuleResourceHarvester.ImpactTransform"></member><member name="F:ModuleResourceHarvester.impactTransformCache"></member><member name="F:ModuleResourceHarvester.inputList"></member><member name="F:ModuleResourceHarvester.intakeTransform"></member><member name="F:ModuleResourceHarvester.intakeTransformName"></member><member name="F:ModuleResourceHarvester.IsActivated"></member><member name="F:ModuleResourceHarvester.isEnabled"></member><member name="F:ModuleResourceHarvester.lastHeatFlux"></member><member name="F:ModuleResourceHarvester.lastTimeFactor"></member><member name="F:ModuleResourceHarvester.lastUpdateTime"></member><member name="F:ModuleResourceHarvester.moduleIsEnabled"></member><member name="F:ModuleResourceHarvester.moduleName"></member><member name="F:ModuleResourceHarvester.outputList"></member><member name="F:ModuleResourceHarvester.overrideStagingIconIfBlank"></member><member name="F:ModuleResourceHarvester.partCountCache"></member><member name="F:ModuleResourceHarvester.recipe"></member><member name="F:ModuleResourceHarvester.reqList"></member><member name="F:ModuleResourceHarvester.resHandler"></member><member name="F:ModuleResourceHarvester.ResourceName"></member><member name="F:ModuleResourceHarvester.ResourceStatus"></member><member name="F:ModuleResourceHarvester.showUpgradesInModuleInfo"></member><member name="F:ModuleResourceHarvester.snapshot"></member><member name="F:ModuleResourceHarvester.SpecialistBonusBase"></member><member name="F:ModuleResourceHarvester.SpecialistEfficiencyFactor"></member><member name="F:ModuleResourceHarvester.SpecialistHeatFactor"></member><member name="F:ModuleResourceHarvester.stagingDisableText"></member><member name="F:ModuleResourceHarvester.stagingEnabled"></member><member name="F:ModuleResourceHarvester.stagingEnableText"></member><member name="F:ModuleResourceHarvester.stagingToggleEnabledEditor"></member><member name="F:ModuleResourceHarvester.stagingToggleEnabledFlight"></member><member name="F:ModuleResourceHarvester.StartActionName"></member><member name="F:ModuleResourceHarvester.startEvt"></member><member name="F:ModuleResourceHarvester.status"></member><member name="F:ModuleResourceHarvester.statusPercent"></member><member name="F:ModuleResourceHarvester.StopActionName"></member><member name="F:ModuleResourceHarvester.stopEvt"></member><member name="F:ModuleResourceHarvester.TakeAmount"></member><member name="F:ModuleResourceHarvester.TemperatureModifier"></member><member name="F:ModuleResourceHarvester.ThermalEfficiency"></member><member name="F:ModuleResourceHarvester.ToggleActionName"></member><member name="F:ModuleResourceHarvester.upgrades"></member><member name="F:ModuleResourceHarvester.upgradesApplied"></member><member name="F:ModuleResourceHarvester.upgradesApply"></member><member name="F:ModuleResourceHarvester.upgradesAsk"></member><member name="F:ModuleResourceHarvester.UseSpecialistBonus"></member><member name="F:ModuleResourceHarvester.UseSpecialistHeatBonus"></member><member name="P:ModuleResourceHarvester.Actions"></member><member name="P:ModuleResourceHarvester.ClassID"></member><member name="P:ModuleResourceHarvester.ClassName"></member><member name="P:ModuleResourceHarvester.enabled"></member><member name="P:ModuleResourceHarvester.Events"></member><member name="P:ModuleResourceHarvester.Fields"></member><member name="P:ModuleResourceHarvester.gameObject"></member><member name="P:ModuleResourceHarvester.GUIName"></member><member name="P:ModuleResourceHarvester.hideFlags"></member><member name="P:ModuleResourceHarvester.isActiveAndEnabled"></member><member name="P:ModuleResourceHarvester.ModuleAttributes"></member><member name="P:ModuleResourceHarvester.name"></member><member name="P:ModuleResourceHarvester.part"></member><member name="P:ModuleResourceHarvester.ResBroker"></member><member name="P:ModuleResourceHarvester.ResConverter"></member><member name="P:ModuleResourceHarvester.tag"></member><member name="P:ModuleResourceHarvester.transform"></member><member name="P:ModuleResourceHarvester.useGUILayout"></member><member name="P:ModuleResourceHarvester.vessel"></member><member name="M:ModuleResourceHarvester.AppliedUpgrades"></member><member name="M:ModuleResourceHarvester.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleResourceHarvester.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleResourceHarvester.Awake"></member><member name="M:ModuleResourceHarvester.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.BroadcastMessage(string,object)"></member><member name="M:ModuleResourceHarvester.BroadcastMessage(string)"></member><member name="M:ModuleResourceHarvester.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.CancelInvoke"></member><member name="M:ModuleResourceHarvester.CancelInvoke(string)"></member><member name="M:ModuleResourceHarvester.CheckForImpact"></member><member name="M:ModuleResourceHarvester.CheckForShutdown"></member><member name="M:ModuleResourceHarvester.CompareTag(string)"></member><member name="M:ModuleResourceHarvester.ConvertRecipeToUnits(ConversionRecipe)"></member><member name="M:ModuleResourceHarvester.Copy(PartModule)"></member><member name="M:ModuleResourceHarvester.DisableModule"></member><member name="M:ModuleResourceHarvester.DisplayCoreHeat"></member><member name="M:ModuleResourceHarvester.EnableModule"></member><member name="M:ModuleResourceHarvester.Equals(object)"></member><member name="M:ModuleResourceHarvester.Finalize"></member><member name="M:ModuleResourceHarvester.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleResourceHarvester.FixedUpdate"></member><member name="M:ModuleResourceHarvester.GetBestDeltaTime(System.Double)"></member><member name="M:ModuleResourceHarvester.GetComponent(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponent"></member><member name="M:ModuleResourceHarvester.GetComponent(string)"></member><member name="M:ModuleResourceHarvester.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentInChildren(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponentInChildren"></member><member name="M:ModuleResourceHarvester.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentInParent(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponentInParent"></member><member name="M:ModuleResourceHarvester.GetComponents(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleResourceHarvester.GetComponents(List)"></member><member name="M:ModuleResourceHarvester.GetComponents"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren"></member><member name="M:ModuleResourceHarvester.GetComponentsInChildren(List)"></member><member name="M:ModuleResourceHarvester.GetComponentsInParent(System.Type)"></member><member name="M:ModuleResourceHarvester.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleResourceHarvester.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleResourceHarvester.GetComponentsInParent"></member><member name="M:ModuleResourceHarvester.GetConsumedResources"></member><member name="M:ModuleResourceHarvester.GetCoreTemperature"></member><member name="M:ModuleResourceHarvester.GetCrewEfficiencyBonus"></member><member name="M:ModuleResourceHarvester.GetCrewHeatBonus"></member><member name="M:ModuleResourceHarvester.GetDeltaTime"></member><member name="M:ModuleResourceHarvester.GetEfficiencyMultiplier"></member><member name="M:ModuleResourceHarvester.GetFlux"></member><member name="M:ModuleResourceHarvester.GetGoalTemperature"></member><member name="M:ModuleResourceHarvester.GetHashCode"></member><member name="M:ModuleResourceHarvester.GetHeatThrottle"></member><member name="M:ModuleResourceHarvester.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleResourceHarvester.GetInstanceID"></member><member name="M:ModuleResourceHarvester.GetLocationString"></member><member name="M:ModuleResourceHarvester.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleResourceHarvester.GetStagingDisableText"></member><member name="M:ModuleResourceHarvester.GetStagingEnableText"></member><member name="M:ModuleResourceHarvester.GetType"></member><member name="M:ModuleResourceHarvester.GetUpgrade(string)"></member><member name="M:ModuleResourceHarvester.GetUpgradeInfo"></member><member name="M:ModuleResourceHarvester.HasSpecialist(string)"></member><member name="M:ModuleResourceHarvester.HasUpgrades"></member><member name="M:ModuleResourceHarvester.Invoke(string,System.Single)"></member><member name="M:ModuleResourceHarvester.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleResourceHarvester.IsInvoking(string)"></member><member name="M:ModuleResourceHarvester.IsInvoking"></member><member name="M:ModuleResourceHarvester.IsOverheating"></member><member name="M:ModuleResourceHarvester.IsSituationValid"></member><member name="M:ModuleResourceHarvester.IsStageable"></member><member name="M:ModuleResourceHarvester.IsValidContractObjective(string)"></member><member name="M:ModuleResourceHarvester.Load(ConfigNode)"></member><member name="M:ModuleResourceHarvester.LoadRecipe(System.Double)"></member><member name="M:ModuleResourceHarvester.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleResourceHarvester.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleResourceHarvester.MemberwiseClone"></member><member name="M:ModuleResourceHarvester.ModuleIsActive"></member><member name="M:ModuleResourceHarvester.OnActive"></member><member name="M:ModuleResourceHarvester.OnAwake"></member><member name="M:ModuleResourceHarvester.OnCopy(PartModule)"></member><member name="M:ModuleResourceHarvester.OnFixedUpdate"></member><member name="M:ModuleResourceHarvester.OnIconCreate"></member><member name="M:ModuleResourceHarvester.OnInactive"></member><member name="M:ModuleResourceHarvester.OnInitialize"></member><member name="M:ModuleResourceHarvester.OnLoad(ConfigNode)"></member><member name="M:ModuleResourceHarvester.OnOverheat(System.Double)"></member><member name="M:ModuleResourceHarvester.OnSave(ConfigNode)"></member><member name="M:ModuleResourceHarvester.OnStart(PartModule+StartState)"><para>Called when the part starts. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleResourceHarvester.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleResourceHarvester.OnUpdate"></member><member name="M:ModuleResourceHarvester.PostProcess(ConverterResults,System.Double)"></member><member name="M:ModuleResourceHarvester.PostUpdateCleanup"></member><member name="M:ModuleResourceHarvester.PrepareRecipe(System.Double)"><summary>This method can be modified to customise the ore collecting rate. This method is called multiple times during mining. It creates the</summary><c>ConversionRecipe</c><remarks>that determines the rate of</remarks><c>ResourceName</c><remarks>gain, and</remarks><c>Electricity</c><remarks>loss (Accessible via the</remarks><c>ConversionRecipe.Outputs</c><remarks>and</remarks><c>.Inputs</c><remarks>).</remarks></member><member name="M:ModuleResourceHarvester.PreProcessing"></member><member name="M:ModuleResourceHarvester.PrintUpgrades"></member><member name="M:ModuleResourceHarvester.Save(ConfigNode)"></member><member name="M:ModuleResourceHarvester.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleResourceHarvester.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.SendMessage(string,object)"></member><member name="M:ModuleResourceHarvester.SendMessage(string)"></member><member name="M:ModuleResourceHarvester.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.SendMessageUpwards(string,object)"></member><member name="M:ModuleResourceHarvester.SendMessageUpwards(string)"></member><member name="M:ModuleResourceHarvester.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleResourceHarvester.SetEfficiencyBonus(System.Single)"></member><member name="M:ModuleResourceHarvester.SetStaging(System.Boolean)"></member><member name="M:ModuleResourceHarvester.SetupDebugging"></member><member name="M:ModuleResourceHarvester.SetupLabels"></member><member name="M:ModuleResourceHarvester.SetupModule"></member><member name="M:ModuleResourceHarvester.StagingEnabled"></member><member name="M:ModuleResourceHarvester.StagingToggleEnabledEditor"></member><member name="M:ModuleResourceHarvester.StagingToggleEnabledFlight"></member><member name="M:ModuleResourceHarvester.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleResourceHarvester.StartCoroutine(string,object)"></member><member name="M:ModuleResourceHarvester.StartCoroutine(string)"></member><member name="M:ModuleResourceHarvester.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleResourceHarvester.StartResourceConverter"></member><member name="M:ModuleResourceHarvester.StartResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleResourceHarvester.StopAllCoroutines"></member><member name="M:ModuleResourceHarvester.StopCoroutine(string)"></member><member name="M:ModuleResourceHarvester.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleResourceHarvester.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleResourceHarvester.StopResourceConverter"></member><member name="M:ModuleResourceHarvester.StopResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleResourceHarvester.TallyEfficiencyModifiers"></member><member name="M:ModuleResourceHarvester.ToggleResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleResourceHarvester.ToggleStaging"></member><member name="M:ModuleResourceHarvester.ToString"></member><member name="M:ModuleResourceHarvester.UpdateConverterStatus"></member><member name="M:ModuleResourceHarvester.UpdateDebugInfo(ConverterResults,System.Double)"></member><member name="M:ModuleResourceHarvester.UpdateStagingToggle"></member><member name="M:ModuleResourceHarvester.UpgradeWaitForScenarioModules"></member><member name="M:ModuleResourceHarvester.#ctor"></member><member name="T:ModuleScienceConverter"></member><member name="F:ModuleScienceConverter._lab"></member><member name="F:ModuleScienceConverter._preCalculateEfficiency"></member><member name="F:ModuleScienceConverter._resBroker"></member><member name="F:ModuleScienceConverter._resConverter"></member><member name="F:ModuleScienceConverter._totalEfficiencyModifiers"></member><member name="F:ModuleScienceConverter.AlwaysActive"></member><member name="F:ModuleScienceConverter.AutoShutdown"></member><member name="F:ModuleScienceConverter.ConverterName"></member><member name="F:ModuleScienceConverter.dataProcessingMultiplier"><summary>For finetuning research speed, as the researchTime field only takes integers.</summary></member><member name="F:ModuleScienceConverter.datString"><summary>Not for use in config.</summary></member><member name="F:ModuleScienceConverter.debugCrewBon"></member><member name="F:ModuleScienceConverter.debugDelta"></member><member name="F:ModuleScienceConverter.debugEffBonus"></member><member name="F:ModuleScienceConverter.debugFinBon"></member><member name="F:ModuleScienceConverter.debugTimeFac"></member><member name="F:ModuleScienceConverter.DefaultShutoffTemp"></member><member name="F:ModuleScienceConverter.DirtyFlag"></member><member name="F:ModuleScienceConverter.EfficiencyBonus"></member><member name="F:ModuleScienceConverter.EfficiencyModifiers"></member><member name="F:ModuleScienceConverter.ExperienceEffect"></member><member name="F:ModuleScienceConverter.FillAmount"></member><member name="F:ModuleScienceConverter.GeneratesHeat"></member><member name="F:ModuleScienceConverter.inputList"></member><member name="F:ModuleScienceConverter.IsActivated"></member><member name="F:ModuleScienceConverter.isEnabled"></member><member name="F:ModuleScienceConverter.lastHeatFlux"></member><member name="F:ModuleScienceConverter.lastTimeFactor"></member><member name="F:ModuleScienceConverter.lastUpdateTime"></member><member name="F:ModuleScienceConverter.moduleIsEnabled"></member><member name="F:ModuleScienceConverter.moduleName"></member><member name="F:ModuleScienceConverter.outputList"></member><member name="F:ModuleScienceConverter.overrideStagingIconIfBlank"></member><member name="F:ModuleScienceConverter.powerRequirement"><summary>Power usage in Ec per second while the converter is running.</summary></member><member name="F:ModuleScienceConverter.rateString"><summary>Not for use in config.</summary></member><member name="F:ModuleScienceConverter.reqList"></member><member name="F:ModuleScienceConverter.researchTime"><summary>How fast the process runs is dependant on this value, the dataProcessingultiplier, the scientistBonus, and the amount of data present (via ModuleScienceLab). Integers only!</summary></member><member name="F:ModuleScienceConverter.resHandler"></member><member name="F:ModuleScienceConverter.scienceCap"><summary>How much output science this module can store.</summary></member><member name="F:ModuleScienceConverter.scienceMultiplier"><summary>Experiments are converted 1:1 into data (barring some multipliers in ModuleScienceLab). This value, in turn, converts data back into science points. Integers only!</summary></member><member name="F:ModuleScienceConverter.scientistBonus"><summary>Percentage bonus to research speed (but not yield) for every star possessed by a scientist Kerbal operating this module.</summary></member><member name="F:ModuleScienceConverter.sciString"><summary>Not for use in config.</summary></member><member name="F:ModuleScienceConverter.showUpgradesInModuleInfo"></member><member name="F:ModuleScienceConverter.snapshot"></member><member name="F:ModuleScienceConverter.SpecialistBonusBase"></member><member name="F:ModuleScienceConverter.SpecialistEfficiencyFactor"></member><member name="F:ModuleScienceConverter.SpecialistHeatFactor"></member><member name="F:ModuleScienceConverter.stagingDisableText"></member><member name="F:ModuleScienceConverter.stagingEnabled"></member><member name="F:ModuleScienceConverter.stagingEnableText"></member><member name="F:ModuleScienceConverter.stagingToggleEnabledEditor"></member><member name="F:ModuleScienceConverter.stagingToggleEnabledFlight"></member><member name="F:ModuleScienceConverter.StartActionName"></member><member name="F:ModuleScienceConverter.startEvt"></member><member name="F:ModuleScienceConverter.status"></member><member name="F:ModuleScienceConverter.statusPercent"></member><member name="F:ModuleScienceConverter.StopActionName"></member><member name="F:ModuleScienceConverter.stopEvt"></member><member name="F:ModuleScienceConverter.TakeAmount"></member><member name="F:ModuleScienceConverter.TemperatureModifier"></member><member name="F:ModuleScienceConverter.ThermalEfficiency"></member><member name="F:ModuleScienceConverter.ToggleActionName"></member><member name="F:ModuleScienceConverter.upgrades"></member><member name="F:ModuleScienceConverter.upgradesApplied"></member><member name="F:ModuleScienceConverter.upgradesApply"></member><member name="F:ModuleScienceConverter.upgradesAsk"></member><member name="F:ModuleScienceConverter.UseSpecialistBonus"></member><member name="F:ModuleScienceConverter.UseSpecialistHeatBonus"></member><member name="P:ModuleScienceConverter.Actions"></member><member name="P:ModuleScienceConverter.ClassID"></member><member name="P:ModuleScienceConverter.ClassName"></member><member name="P:ModuleScienceConverter.enabled"></member><member name="P:ModuleScienceConverter.Events"></member><member name="P:ModuleScienceConverter.Fields"></member><member name="P:ModuleScienceConverter.gameObject"></member><member name="P:ModuleScienceConverter.GUIName"></member><member name="P:ModuleScienceConverter.hideFlags"></member><member name="P:ModuleScienceConverter.isActiveAndEnabled"></member><member name="P:ModuleScienceConverter.Lab"></member><member name="P:ModuleScienceConverter.ModuleAttributes"></member><member name="P:ModuleScienceConverter.name"></member><member name="P:ModuleScienceConverter.part"></member><member name="P:ModuleScienceConverter.ResBroker"></member><member name="P:ModuleScienceConverter.ResConverter"></member><member name="P:ModuleScienceConverter.tag"></member><member name="P:ModuleScienceConverter.transform"></member><member name="P:ModuleScienceConverter.useGUILayout"></member><member name="P:ModuleScienceConverter.vessel"></member><member name="M:ModuleScienceConverter.AppliedUpgrades"></member><member name="M:ModuleScienceConverter.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleScienceConverter.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleScienceConverter.Awake"></member><member name="M:ModuleScienceConverter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.BroadcastMessage(string,object)"></member><member name="M:ModuleScienceConverter.BroadcastMessage(string)"></member><member name="M:ModuleScienceConverter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.CalculateResearchTime(System.Single)"></member><member name="M:ModuleScienceConverter.CalculateScienceAmount(System.Single)"></member><member name="M:ModuleScienceConverter.CalculateScienceRate(System.Single)"></member><member name="M:ModuleScienceConverter.CancelInvoke"></member><member name="M:ModuleScienceConverter.CancelInvoke(string)"></member><member name="M:ModuleScienceConverter.CheckForShutdown"></member><member name="M:ModuleScienceConverter.CompareTag(string)"></member><member name="M:ModuleScienceConverter.ConvertRecipeToUnits(ConversionRecipe)"></member><member name="M:ModuleScienceConverter.Copy(PartModule)"></member><member name="M:ModuleScienceConverter.DataExpectationSummary(System.Single)"></member><member name="M:ModuleScienceConverter.DisableModule"></member><member name="M:ModuleScienceConverter.DisplayCoreHeat"></member><member name="M:ModuleScienceConverter.EnableModule"></member><member name="M:ModuleScienceConverter.Equals(object)"></member><member name="M:ModuleScienceConverter.Finalize"></member><member name="M:ModuleScienceConverter.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleScienceConverter.FixedUpdate"></member><member name="M:ModuleScienceConverter.GetBestDeltaTime(System.Double)"></member><member name="M:ModuleScienceConverter.GetComponent(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponent"></member><member name="M:ModuleScienceConverter.GetComponent(string)"></member><member name="M:ModuleScienceConverter.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentInChildren(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponentInChildren"></member><member name="M:ModuleScienceConverter.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentInParent(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponentInParent"></member><member name="M:ModuleScienceConverter.GetComponents(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleScienceConverter.GetComponents(List)"></member><member name="M:ModuleScienceConverter.GetComponents"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren"></member><member name="M:ModuleScienceConverter.GetComponentsInChildren(List)"></member><member name="M:ModuleScienceConverter.GetComponentsInParent(System.Type)"></member><member name="M:ModuleScienceConverter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleScienceConverter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleScienceConverter.GetComponentsInParent"></member><member name="M:ModuleScienceConverter.GetCoreTemperature"></member><member name="M:ModuleScienceConverter.GetCrewEfficiencyBonus"></member><member name="M:ModuleScienceConverter.GetCrewHeatBonus"></member><member name="M:ModuleScienceConverter.GetDeltaTime"></member><member name="M:ModuleScienceConverter.GetEfficiencyMultiplier"></member><member name="M:ModuleScienceConverter.GetFlux"></member><member name="M:ModuleScienceConverter.GetGoalTemperature"></member><member name="M:ModuleScienceConverter.GetHashCode"></member><member name="M:ModuleScienceConverter.GetHeatThrottle"></member><member name="M:ModuleScienceConverter.GetInfo"></member><member name="M:ModuleScienceConverter.GetInstanceID"></member><member name="M:ModuleScienceConverter.GetModuleDisplayName"></member><member name="M:ModuleScienceConverter.GetScientists"></member><member name="M:ModuleScienceConverter.GetStagingDisableText"></member><member name="M:ModuleScienceConverter.GetStagingEnableText"></member><member name="M:ModuleScienceConverter.GetType"></member><member name="M:ModuleScienceConverter.GetUpgrade(string)"></member><member name="M:ModuleScienceConverter.GetUpgradeInfo"></member><member name="M:ModuleScienceConverter.HasSpecialist(string)"></member><member name="M:ModuleScienceConverter.HasUpgrades"></member><member name="M:ModuleScienceConverter.Invoke(string,System.Single)"></member><member name="M:ModuleScienceConverter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleScienceConverter.IsInvoking(string)"></member><member name="M:ModuleScienceConverter.IsInvoking"></member><member name="M:ModuleScienceConverter.IsOverheating"></member><member name="M:ModuleScienceConverter.IsSituationValid"></member><member name="M:ModuleScienceConverter.IsStageable"></member><member name="M:ModuleScienceConverter.IsValidContractObjective(string)"></member><member name="M:ModuleScienceConverter.Load(ConfigNode)"></member><member name="M:ModuleScienceConverter.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleScienceConverter.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleScienceConverter.MemberwiseClone"></member><member name="M:ModuleScienceConverter.ModuleIsActive"></member><member name="M:ModuleScienceConverter.OnActive"></member><member name="M:ModuleScienceConverter.OnAwake"></member><member name="M:ModuleScienceConverter.OnCopy(PartModule)"></member><member name="M:ModuleScienceConverter.OnFixedUpdate"></member><member name="M:ModuleScienceConverter.OnIconCreate"></member><member name="M:ModuleScienceConverter.OnInactive"></member><member name="M:ModuleScienceConverter.OnInitialize"></member><member name="M:ModuleScienceConverter.OnLoad(ConfigNode)"></member><member name="M:ModuleScienceConverter.OnOverheat(System.Double)"></member><member name="M:ModuleScienceConverter.OnSave(ConfigNode)"></member><member name="M:ModuleScienceConverter.OnStart(PartModule+StartState)"><para>Called when the part starts. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleScienceConverter.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleScienceConverter.OnUpdate"></member><member name="M:ModuleScienceConverter.PostProcess(ConverterResults,System.Double)"></member><member name="M:ModuleScienceConverter.PostUpdateCleanup"></member><member name="M:ModuleScienceConverter.PrepareRecipe(System.Double)"></member><member name="M:ModuleScienceConverter.PreProcessing"></member><member name="M:ModuleScienceConverter.PrintUpgrades"></member><member name="M:ModuleScienceConverter.Save(ConfigNode)"></member><member name="M:ModuleScienceConverter.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleScienceConverter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.SendMessage(string,object)"></member><member name="M:ModuleScienceConverter.SendMessage(string)"></member><member name="M:ModuleScienceConverter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.SendMessageUpwards(string,object)"></member><member name="M:ModuleScienceConverter.SendMessageUpwards(string)"></member><member name="M:ModuleScienceConverter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceConverter.SetEfficiencyBonus(System.Single)"></member><member name="M:ModuleScienceConverter.SetStaging(System.Boolean)"></member><member name="M:ModuleScienceConverter.SetupDebugging"></member><member name="M:ModuleScienceConverter.SetupLabels"></member><member name="M:ModuleScienceConverter.SetupModule"></member><member name="M:ModuleScienceConverter.StagingEnabled"></member><member name="M:ModuleScienceConverter.StagingToggleEnabledEditor"></member><member name="M:ModuleScienceConverter.StagingToggleEnabledFlight"></member><member name="M:ModuleScienceConverter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceConverter.StartCoroutine(string,object)"></member><member name="M:ModuleScienceConverter.StartCoroutine(string)"></member><member name="M:ModuleScienceConverter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceConverter.StartResourceConverter"></member><member name="M:ModuleScienceConverter.StartResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleScienceConverter.StopAllCoroutines"></member><member name="M:ModuleScienceConverter.StopCoroutine(string)"></member><member name="M:ModuleScienceConverter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceConverter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleScienceConverter.StopResourceConverter"></member><member name="M:ModuleScienceConverter.StopResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleScienceConverter.TallyEfficiencyModifiers"></member><member name="M:ModuleScienceConverter.ToggleResourceConverterAction(KSPActionParam)"></member><member name="M:ModuleScienceConverter.ToggleStaging"></member><member name="M:ModuleScienceConverter.ToString"></member><member name="M:ModuleScienceConverter.UpdateConverterStatus"></member><member name="M:ModuleScienceConverter.UpdateDebugInfo(ConverterResults,System.Double)"></member><member name="M:ModuleScienceConverter.UpdateDisplayStrings"></member><member name="M:ModuleScienceConverter.UpdateStagingToggle"></member><member name="M:ModuleScienceConverter.UpgradeWaitForScenarioModules"></member><member name="M:ModuleScienceConverter.#ctor"></member><member name="T:ModuleScienceExperiment"><summary>Part module for initiating and describing science experiments.</summary></member><member name="F:ModuleScienceExperiment.availableShielded"></member><member name="F:ModuleScienceExperiment.collectActionName"><summary>Name for the right-click option to collect science data from the part while on EVA.</summary></member><member name="F:ModuleScienceExperiment.collectWarningText"><summary>Text for warning pop-up while collecting science data from a non-repeatable experiment while on EVA.</summary></member><member name="F:ModuleScienceExperiment.containersDirty"></member><member name="F:ModuleScienceExperiment.cooldownString"><para>the experiment is defined in R&amp;amp;D. here we just store a reference to it.</para></member><member name="F:ModuleScienceExperiment.cooldownTimer"><para>If given, must wait this many seconds between taking the data out (EVA or transmit) and</para></member><member name="F:ModuleScienceExperiment.cooldownToGo"></member><member name="F:ModuleScienceExperiment.dataIsCollectable"><summary>Is EVA science data collection available?</summary></member><member name="F:ModuleScienceExperiment.deployableSeated"></member><member name="F:ModuleScienceExperiment.Deployed"></member><member name="F:ModuleScienceExperiment.experiment"><para>the subject is given by R&amp;amp;D when deploying an experiment in some particular situation</para><remarks>- The relevant experiment based on experimentID and info from ScienceDefs file.</remarks></member><member name="F:ModuleScienceExperiment.experimentActionName"><para>Display string for the Experiment Action PAW item</para><remarks>- Right-click and action group name for initiating experiment.</remarks></member><member name="F:ModuleScienceExperiment.experimentID"><summary>Must match applicable ID field in the ScienceDefs.cfg file.</summary></member><member name="F:ModuleScienceExperiment.fxModuleIndices"><summary>Set to 1 to trigger animation in ModuleAnimateGeneric on activation.</summary></member><member name="F:ModuleScienceExperiment.hasContainer"></member><member name="F:ModuleScienceExperiment.hideFxModuleUI"></member><member name="F:ModuleScienceExperiment.hideUIwhenUnavailable"><summary>Hide right-click experiment button when experiment cannot be performed.</summary></member><member name="F:ModuleScienceExperiment.Inoperable"><summary>Can the experiment be performed? Only relevant for non-rerunnable experiments.</summary></member><member name="F:ModuleScienceExperiment.interactionRange"><summary>EVA interaction range for data collection or experiment reset.</summary></member><member name="F:ModuleScienceExperiment.isEnabled"></member><member name="F:ModuleScienceExperiment.moduleIsEnabled"></member><member name="F:ModuleScienceExperiment.moduleName"></member><member name="F:ModuleScienceExperiment.overrideStagingIconIfBlank"></member><member name="F:ModuleScienceExperiment.rerunnable"><para>Set to true if it should be possible to perform this experiment again without having to clean the experiment with the lab or a scientist on EVA.</para><para>See the &lt;ref refid='class_module_science_experiment_1a92655f600e41340af448c383f4b0ec8a' kindref='member'&gt;resourceToReset&lt;/ref&gt; and &lt;ref refid='class_module_science_experiment_1ae8411cfa9bf27be77005e3708bf9f724' kindref='member'&gt;resourceResetCost&lt;/ref&gt; variables for the cost of cleaning</para><remarks>- Can the experiment be run more than once before requiring Science Lab reset?</remarks></member><member name="F:ModuleScienceExperiment.resetActionName"><para>Display string for the Experiment Reset PAW item</para><remarks>- Right-click, action group, and EVA button name to reset the experiment, science data will be lost.</remarks></member><member name="F:ModuleScienceExperiment.resettable"><para>Whether an experiment can be reset - usually via the &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; Action Window</para><remarks>-</remarks></member><member name="F:ModuleScienceExperiment.resettableOnEVA"><para>Whether an experiment can be reset from a &lt;ref refid='class_kerbal' kindref='compound'&gt;Kerbal&lt;/ref&gt; on EVA - usually via the &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; Action Window</para><remarks>- Can the experiment be reset on EVA? Science data will be lost.</remarks></member><member name="F:ModuleScienceExperiment.resHandler"></member><member name="F:ModuleScienceExperiment.resourceResetCost"><para>Amount of &lt;ref refid='class_module_science_experiment_1a92655f600e41340af448c383f4b0ec8a' kindref='member'&gt;resourceToReset&lt;/ref&gt; Resource that will be spent when the experiment is restored to a runnable state via the lab</para><remarks>- Cost for cleaning the experiment at the science lab. Units * dataScale * baseValue?</remarks></member><member name="F:ModuleScienceExperiment.resourceToReset"><para>The Resource that will be spent when the experiment is restored to a runnable state via the lab</para><remarks>- Resource to be used for cleaning the experiment at the science lab.</remarks></member><member name="F:ModuleScienceExperiment.reviewActionName"><para>Display string for the Experiment Review PAW item</para><remarks>- Right-click and action group name for reviewing collected science data.</remarks></member><member name="F:ModuleScienceExperiment.showUpgradesInModuleInfo"></member><member name="F:ModuleScienceExperiment.snapshot"></member><member name="F:ModuleScienceExperiment.stagingDisableText"></member><member name="F:ModuleScienceExperiment.stagingEnabled"></member><member name="F:ModuleScienceExperiment.stagingEnableText"></member><member name="F:ModuleScienceExperiment.stagingToggleEnabledEditor"></member><member name="F:ModuleScienceExperiment.stagingToggleEnabledFlight"></member><member name="F:ModuleScienceExperiment.transmitWarningText"><summary>Warning displayed before transmitting data from a non-rerunnable experiment.</summary></member><member name="F:ModuleScienceExperiment.upgrades"></member><member name="F:ModuleScienceExperiment.upgradesApplied"></member><member name="F:ModuleScienceExperiment.upgradesApply"></member><member name="F:ModuleScienceExperiment.upgradesAsk"></member><member name="F:ModuleScienceExperiment.usageReqMaskExternal"></member><member name="F:ModuleScienceExperiment.usageReqMaskInternal"></member><member name="F:ModuleScienceExperiment.usageReqMessage"></member><member name="F:ModuleScienceExperiment.useActionGroups"><summary>Allow action groups to be set for the experiment, rather than right-click buttons only.</summary></member><member name="F:ModuleScienceExperiment.useCooldown"></member><member name="F:ModuleScienceExperiment.useStaging"></member><member name="F:ModuleScienceExperiment.xmitDataScalar"><summary>Percentage of data allowed to be transmitted, 1 equals the amount gained from returning the sample to Kerbin.</summary></member><member name="P:ModuleScienceExperiment.Actions"></member><member name="P:ModuleScienceExperiment.ClassID"></member><member name="P:ModuleScienceExperiment.ClassName"></member><member name="P:ModuleScienceExperiment.enabled"></member><member name="P:ModuleScienceExperiment.Events"></member><member name="P:ModuleScienceExperiment.Fields"></member><member name="P:ModuleScienceExperiment.gameObject"></member><member name="P:ModuleScienceExperiment.GUIName"></member><member name="P:ModuleScienceExperiment.hideFlags"></member><member name="P:ModuleScienceExperiment.isActiveAndEnabled"></member><member name="P:ModuleScienceExperiment.ModuleAttributes"></member><member name="P:ModuleScienceExperiment.name"></member><member name="P:ModuleScienceExperiment.part"></member><member name="P:ModuleScienceExperiment.tag"></member><member name="P:ModuleScienceExperiment.transform"></member><member name="P:ModuleScienceExperiment.useGUILayout"></member><member name="P:ModuleScienceExperiment.vessel"></member><member name="M:ModuleScienceExperiment.AppliedUpgrades"></member><member name="M:ModuleScienceExperiment.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleScienceExperiment.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleScienceExperiment.Awake"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,object)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string)"></member><member name="M:ModuleScienceExperiment.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.CancelInvoke"></member><member name="M:ModuleScienceExperiment.CancelInvoke(string)"></member><member name="M:ModuleScienceExperiment.CleanUpExperimentExternal"><para>Event Method that resets an experiment that is Inoperable until a manual reset by a scientist</para></member><member name="M:ModuleScienceExperiment.CollectDataExternalEvent"><summary>Transfers data from the part to an EVA Kerbal.</summary></member><member name="M:ModuleScienceExperiment.CompareTag(string)"></member><member name="M:ModuleScienceExperiment.Copy(PartModule)"></member><member name="M:ModuleScienceExperiment.DeployAction(KSPActionParam)"><summary>Initiates the experiment from an action group.</summary><param name="actParams"/></member><member name="M:ModuleScienceExperiment.DeployExperiment"><summary>Initiates the experiment from a right-click button.</summary></member><member name="M:ModuleScienceExperiment.DeployExperimentExternal"></member><member name="M:ModuleScienceExperiment.DumpData(ScienceData)"><para>Caleld to discard stored data on the module. Will be called right after GetData if the data was moved.</para><remarks>- Removes science data from the part, called after transmission. Implements IScienceDataContainer.</remarks><param name="data">The Science Data to be removed</param></member><member name="M:ModuleScienceExperiment.Equals(object)"></member><member name="M:ModuleScienceExperiment.Finalize"></member><member name="M:ModuleScienceExperiment.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleScienceExperiment.GetComponent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponent"></member><member name="M:ModuleScienceExperiment.GetComponent(string)"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren"></member><member name="M:ModuleScienceExperiment.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentInParent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentInParent"></member><member name="M:ModuleScienceExperiment.GetComponents(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleScienceExperiment.GetComponents(List)"></member><member name="M:ModuleScienceExperiment.GetComponents"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren"></member><member name="M:ModuleScienceExperiment.GetComponentsInChildren(List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Type)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleScienceExperiment.GetComponentsInParent"></member><member name="M:ModuleScienceExperiment.GetData"><para>Called when about to transmit data using comms equipment or when transferring data to another container. Return any gathered data or null if none, do not discard data.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- Returns all Science Data stored in the module. Implements IScienceDataContainer.</remarks><returns/></member><member name="M:ModuleScienceExperiment.GetHashCode"></member><member name="M:ModuleScienceExperiment.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleScienceExperiment.GetInstanceID"></member><member name="M:ModuleScienceExperiment.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleScienceExperiment.GetScienceCount"><para>Called to get the total count of ScienceDatas stored on this unit.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- A count of how many Science Data reports are stored in the module. Implements IScienceDataContainer.</remarks><returns/></member><member name="M:ModuleScienceExperiment.GetStagingDisableText"></member><member name="M:ModuleScienceExperiment.GetStagingEnableText"></member><member name="M:ModuleScienceExperiment.GetType"></member><member name="M:ModuleScienceExperiment.GetUpgrade(string)"></member><member name="M:ModuleScienceExperiment.GetUpgradeInfo"></member><member name="M:ModuleScienceExperiment.HasUpgrades"></member><member name="M:ModuleScienceExperiment.Invoke(string,System.Single)"></member><member name="M:ModuleScienceExperiment.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleScienceExperiment.IsInvoking(string)"></member><member name="M:ModuleScienceExperiment.IsInvoking"></member><member name="M:ModuleScienceExperiment.IsRerunnable"><summary>Is the experiment rerunnable? Refers to rerunnable field. Implements IScienceDataContainer.</summary><returns/></member><member name="M:ModuleScienceExperiment.IsStageable"><para>Should this module be counted when seeing whether to have a stack icon present? Override in a module for custom behavior; otherwise returns true if the module (or something the module inherits from above &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt; itself) overrides &lt;ref refid='class_module_science_experiment_1ac5fa7c9668d4794a894194e9a732a6e8' kindref='member'&gt;OnActive()&lt;/ref&gt;</para></member><member name="M:ModuleScienceExperiment.IsValidContractObjective(string)"></member><member name="M:ModuleScienceExperiment.Load(ConfigNode)"></member><member name="M:ModuleScienceExperiment.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleScienceExperiment.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleScienceExperiment.MemberwiseClone"></member><member name="M:ModuleScienceExperiment.OnActive"><para>Called when the part is set active (after unpacking etc)</para><remarks>-</remarks></member><member name="M:ModuleScienceExperiment.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para><remarks>-</remarks></member><member name="M:ModuleScienceExperiment.onCollectData(ModuleScienceContainer)"></member><member name="M:ModuleScienceExperiment.OnCommandSeatInteraction(KerbalEVA,System.Boolean)"></member><member name="M:ModuleScienceExperiment.OnCopy(PartModule)"></member><member name="M:ModuleScienceExperiment.OnDataTransfer(PartItemTransfer+DismissAction,Part)"></member><member name="M:ModuleScienceExperiment.OnDestroy"></member><member name="M:ModuleScienceExperiment.OnFixedUpdate"></member><member name="M:ModuleScienceExperiment.OnIconCreate"></member><member name="M:ModuleScienceExperiment.OnInactive"></member><member name="M:ModuleScienceExperiment.OnInitialize"></member><member name="M:ModuleScienceExperiment.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- Stores any Science Data in the persistent file.</remarks><param name="node"/></member><member name="M:ModuleScienceExperiment.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- Loads any Science Data stored in the persistent file.</remarks><param name="node"/></member><member name="M:ModuleScienceExperiment.OnStart(PartModule+StartState)"><para>&amp;lt; get the experiment definition</para><remarks>-</remarks></member><member name="M:ModuleScienceExperiment.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleScienceExperiment.OnUpdate"></member><member name="M:ModuleScienceExperiment.OnVesselModified(Vessel)"></member><member name="M:ModuleScienceExperiment.OnVesselSituationChange(GameEvents+HostedFromToAction)"></member><member name="M:ModuleScienceExperiment.OnVesselSituationChange(GameEvents.HostedFromToAction&lt;Vessel,Vessel.Situations&gt;)"></member><member name="M:ModuleScienceExperiment.PrintUpgrades"></member><member name="M:ModuleScienceExperiment.ResetAction(KSPActionParam)"><summary>Resets the experiment from an action group. Science Data is lost. Experiment can be re-run.</summary><param name="actParams"/></member><member name="M:ModuleScienceExperiment.ResetExperiment"><para>Event Method that resets the experiment by deleting the data and resetting the variables</para><remarks>- Resets the experiment from a right-click button. Science Data is lost. Experiment can be re-run.</remarks></member><member name="M:ModuleScienceExperiment.ResetExperimentExternal"><para>Event Method that resets the experiment by deleting the data and resetting the variables - when on EVA</para><remarks>- Resets the experiment from an EVA right-click button. Science Data is lost. Experiment can be re-run.</remarks></member><member name="M:ModuleScienceExperiment.ReturnData(ScienceData)"><para>Called when a transmission (for whatever reason) fails. Attempts to return the data back to the container that it came from.</para></member><member name="M:ModuleScienceExperiment.ReviewData"><summary>Opens experimental results dialog. Implements IScienceDataContainer.</summary></member><member name="M:ModuleScienceExperiment.ReviewDataEvent"><summary>Review stored Science Data from a right-click button.</summary></member><member name="M:ModuleScienceExperiment.ReviewDataItem(ScienceData)"><summary>Review individual Science Data reports? Implements IScienceDataContainer.</summary><param name="data"/></member><member name="M:ModuleScienceExperiment.Save(ConfigNode)"></member><member name="M:ModuleScienceExperiment.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,object)"></member><member name="M:ModuleScienceExperiment.SendMessage(string)"></member><member name="M:ModuleScienceExperiment.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,object)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string)"></member><member name="M:ModuleScienceExperiment.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceExperiment.SetInoperable"><summary>Sets the Inoperable bool, determines whether experiment can be performed again.</summary></member><member name="M:ModuleScienceExperiment.SetStaging(System.Boolean)"></member><member name="M:ModuleScienceExperiment.StagingEnabled"><para>Gets current staging status (is staging enabled for this module) Override me!</para><para>&lt;simplesect kind='return'&gt;<para>True iff staging enabled for this module</para>&lt;/simplesect&gt;</para></member><member name="M:ModuleScienceExperiment.StagingToggleEnabledEditor"></member><member name="M:ModuleScienceExperiment.StagingToggleEnabledFlight"></member><member name="M:ModuleScienceExperiment.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StartCoroutine(string,object)"></member><member name="M:ModuleScienceExperiment.StartCoroutine(string)"></member><member name="M:ModuleScienceExperiment.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StopAllCoroutines"></member><member name="M:ModuleScienceExperiment.StopCoroutine(string)"></member><member name="M:ModuleScienceExperiment.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceExperiment.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleScienceExperiment.ToggleStaging"></member><member name="M:ModuleScienceExperiment.ToString"></member><member name="M:ModuleScienceExperiment.TransferDataEvent"></member><member name="M:ModuleScienceExperiment.TransferToContainer(ModuleScienceContainer,string)"></member><member name="M:ModuleScienceExperiment.Update"></member><member name="M:ModuleScienceExperiment.UpdateStagingToggle"></member><member name="M:ModuleScienceExperiment.UpgradeWaitForScenarioModules"></member><member name="M:ModuleScienceExperiment.#ctor"><para>Event Method that resets an experiment that is Inoperable until a manual reset by a scientist</para><remarks>-</remarks></member><member name="T:ModuleScienceLab"></member><member name="F:ModuleScienceLab.canResetConnectedModules"><summary>Ability to reset single-use experiments (for example Mystery Goo) that are directly attached to the lab.</summary></member><member name="F:ModuleScienceLab.canResetNearbyModules"><summary>Ability to reset single-use experiments (for example Mystery Goo) anywhere on the vessel.</summary></member><member name="F:ModuleScienceLab.containerModuleIndex"></member><member name="F:ModuleScienceLab.ContextBonus"><summary>Additional science gained when an experiment is converted while this module is in the same sphere of influence the experiment was sourced from. Additive multiplier (0.1 means +10%).</summary></member><member name="F:ModuleScienceLab.crewsRequired"><summary>Number of scientists required present before ModuleScienceConverter can be turned on.</summary></member><member name="F:ModuleScienceLab.dataStorage"><summary>How much data is allowed to be stored. The more data is in storage, the faster ModuleScienceConverter will run.</summary></member><member name="F:ModuleScienceLab.dataStored"><summary>Not for use in config (use dataStorage instead).</summary></member><member name="F:ModuleScienceLab.ExperimentData"><summary>Not for use in config. Tracks experiments already processed by this module.</summary></member><member name="F:ModuleScienceLab.homeworldMultiplier"><summary>Multiplier used to greatly nerf conversion efficiency of experiments into data when the lab is sitting on the surface of Kerbin. Straight multiplier (0.1 means -90%).</summary></member><member name="F:ModuleScienceLab.interactionRange"></member><member name="F:ModuleScienceLab.isEnabled"></member><member name="F:ModuleScienceLab.moduleIsEnabled"></member><member name="F:ModuleScienceLab.moduleName"></member><member name="F:ModuleScienceLab.overrideStagingIconIfBlank"></member><member name="F:ModuleScienceLab.processingData"><summary>Not for use in config. Tracks whether a ModuleScienceConverter on the same part is active or not.</summary></member><member name="F:ModuleScienceLab.processResources"><para>for later: add an idleResources list, to enable a resource drain just to keep the lab operational, even while not processing data.</para></member><member name="F:ModuleScienceLab.resHandler"></member><member name="F:ModuleScienceLab.showUpgradesInModuleInfo"></member><member name="F:ModuleScienceLab.snapshot"></member><member name="F:ModuleScienceLab.stagingDisableText"></member><member name="F:ModuleScienceLab.stagingEnabled"></member><member name="F:ModuleScienceLab.stagingEnableText"></member><member name="F:ModuleScienceLab.stagingToggleEnabledEditor"></member><member name="F:ModuleScienceLab.stagingToggleEnabledFlight"></member><member name="F:ModuleScienceLab.statusText"><summary>Not for use in config.</summary></member><member name="F:ModuleScienceLab.storedScience"><summary>Not for use in config (see ModuleScienceConverter instead).</summary></member><member name="F:ModuleScienceLab.SurfaceBonus"><summary>Additional science gained if this module is sitting on the surface of a celestial body. Additive multiplier (0.1 means +10%).</summary></member><member name="F:ModuleScienceLab.upgrades"></member><member name="F:ModuleScienceLab.upgradesApplied"></member><member name="F:ModuleScienceLab.upgradesApply"></member><member name="F:ModuleScienceLab.upgradesAsk"></member><member name="P:ModuleScienceLab.Actions"></member><member name="P:ModuleScienceLab.ClassID"></member><member name="P:ModuleScienceLab.ClassName"></member><member name="P:ModuleScienceLab.Converter"></member><member name="P:ModuleScienceLab.enabled"></member><member name="P:ModuleScienceLab.Events"></member><member name="P:ModuleScienceLab.Fields"></member><member name="P:ModuleScienceLab.gameObject"></member><member name="P:ModuleScienceLab.GUIName"></member><member name="P:ModuleScienceLab.hideFlags"></member><member name="P:ModuleScienceLab.isActiveAndEnabled"></member><member name="P:ModuleScienceLab.ModuleAttributes"></member><member name="P:ModuleScienceLab.name"></member><member name="P:ModuleScienceLab.part"></member><member name="P:ModuleScienceLab.tag"></member><member name="P:ModuleScienceLab.transform"></member><member name="P:ModuleScienceLab.useGUILayout"></member><member name="P:ModuleScienceLab.vessel"></member><member name="M:ModuleScienceLab.AppliedUpgrades"></member><member name="M:ModuleScienceLab.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleScienceLab.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleScienceLab.Awake"></member><member name="M:ModuleScienceLab.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.BroadcastMessage(string,object)"></member><member name="M:ModuleScienceLab.BroadcastMessage(string)"></member><member name="M:ModuleScienceLab.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.CancelInvoke"></member><member name="M:ModuleScienceLab.CancelInvoke(string)"></member><member name="M:ModuleScienceLab.CleanModulesEvent"></member><member name="M:ModuleScienceLab.CleanUpExperiment(ModuleScienceExperiment)"></member><member name="M:ModuleScienceLab.CleanUpVesselExperiments(Vessel)"></member><member name="M:ModuleScienceLab.CompareTag(string)"></member><member name="M:ModuleScienceLab.Copy(PartModule)"></member><member name="M:ModuleScienceLab.Equals(object)"></member><member name="M:ModuleScienceLab.Finalize"></member><member name="M:ModuleScienceLab.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleScienceLab.GetComponent(System.Type)"></member><member name="M:ModuleScienceLab.GetComponent"></member><member name="M:ModuleScienceLab.GetComponent(string)"></member><member name="M:ModuleScienceLab.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentInChildren(System.Type)"></member><member name="M:ModuleScienceLab.GetComponentInChildren"></member><member name="M:ModuleScienceLab.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentInParent(System.Type)"></member><member name="M:ModuleScienceLab.GetComponentInParent"></member><member name="M:ModuleScienceLab.GetComponents(System.Type)"></member><member name="M:ModuleScienceLab.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleScienceLab.GetComponents(List)"></member><member name="M:ModuleScienceLab.GetComponents"></member><member name="M:ModuleScienceLab.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleScienceLab.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleScienceLab.GetComponentsInChildren"></member><member name="M:ModuleScienceLab.GetComponentsInChildren(List)"></member><member name="M:ModuleScienceLab.GetComponentsInParent(System.Type)"></member><member name="M:ModuleScienceLab.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleScienceLab.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleScienceLab.GetComponentsInParent"></member><member name="M:ModuleScienceLab.GetConsumedResources"></member><member name="M:ModuleScienceLab.GetHashCode"></member><member name="M:ModuleScienceLab.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleScienceLab.GetInstanceID"></member><member name="M:ModuleScienceLab.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ModuleScienceLab.GetStagingDisableText"></member><member name="M:ModuleScienceLab.GetStagingEnableText"></member><member name="M:ModuleScienceLab.GetType"></member><member name="M:ModuleScienceLab.GetUpgrade(string)"></member><member name="M:ModuleScienceLab.GetUpgradeInfo"></member><member name="M:ModuleScienceLab.HasUpgrades"></member><member name="M:ModuleScienceLab.Invoke(string,System.Single)"></member><member name="M:ModuleScienceLab.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleScienceLab.IsInvoking(string)"></member><member name="M:ModuleScienceLab.IsInvoking"></member><member name="M:ModuleScienceLab.IsOperational"></member><member name="M:ModuleScienceLab.IsStageable"></member><member name="M:ModuleScienceLab.IsStorable(ScienceData)"></member><member name="M:ModuleScienceLab.IsValidContractObjective(string)"></member><member name="M:ModuleScienceLab.Load(ConfigNode)"></member><member name="M:ModuleScienceLab.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleScienceLab.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleScienceLab.MemberwiseClone"></member><member name="M:ModuleScienceLab.OnActive"></member><member name="M:ModuleScienceLab.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para></member><member name="M:ModuleScienceLab.OnCopy(PartModule)"></member><member name="M:ModuleScienceLab.OnDestroy"></member><member name="M:ModuleScienceLab.OnFixedUpdate"></member><member name="M:ModuleScienceLab.OnIconCreate"></member><member name="M:ModuleScienceLab.OnInactive"></member><member name="M:ModuleScienceLab.OnInitialize"></member><member name="M:ModuleScienceLab.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleScienceLab.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ModuleScienceLab.OnStart(PartModule+StartState)"></member><member name="M:ModuleScienceLab.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleScienceLab.OnUpdate"></member><member name="M:ModuleScienceLab.PrintUpgrades"></member><member name="M:ModuleScienceLab.ProcessData(ScienceData,Callback)"></member><member name="M:ModuleScienceLab.Save(ConfigNode)"></member><member name="M:ModuleScienceLab.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleScienceLab.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.SendMessage(string,object)"></member><member name="M:ModuleScienceLab.SendMessage(string)"></member><member name="M:ModuleScienceLab.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.SendMessageUpwards(string,object)"></member><member name="M:ModuleScienceLab.SendMessageUpwards(string)"></member><member name="M:ModuleScienceLab.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleScienceLab.SetStaging(System.Boolean)"></member><member name="M:ModuleScienceLab.StagingEnabled"></member><member name="M:ModuleScienceLab.StagingToggleEnabledEditor"></member><member name="M:ModuleScienceLab.StagingToggleEnabledFlight"></member><member name="M:ModuleScienceLab.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceLab.StartCoroutine(string,object)"></member><member name="M:ModuleScienceLab.StartCoroutine(string)"></member><member name="M:ModuleScienceLab.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceLab.StopAllCoroutines"></member><member name="M:ModuleScienceLab.StopCoroutine(string)"></member><member name="M:ModuleScienceLab.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleScienceLab.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleScienceLab.ToggleStaging"></member><member name="M:ModuleScienceLab.ToString"></member><member name="M:ModuleScienceLab.TransmitScience"></member><member name="M:ModuleScienceLab.UpdateStagingToggle"></member><member name="M:ModuleScienceLab.UpgradeWaitForScenarioModules"></member><member name="M:ModuleScienceLab.RecoverScienceLabs(ProtoVessel,KSP.UI.Screens.MissionRecoveryDialog)"><para>Since recovery happens when this module will likely be unloaded, this needs to be directly called from R&amp;amp;D.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;protoVessel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The protovessel to recover labs from.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dialog&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The mission recovery dialog.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; We&amp;apos;re just creating a fake subject to pass to the widget so it can display the title. Nothing else is utilized. Data value will always be 1/1. &lt;/para&gt;</remarks></member><member name="M:ModuleScienceLab.#ctor"></member><member name="T:ModuleStructuralNodeToggle"></member><member name="F:ModuleStructuralNodeToggle.isEnabled"></member><member name="F:ModuleStructuralNodeToggle.MeshMenuName"></member><member name="F:ModuleStructuralNodeToggle.moduleIsEnabled"></member><member name="F:ModuleStructuralNodeToggle.moduleName"></member><member name="F:ModuleStructuralNodeToggle.NodeMenuName"></member><member name="F:ModuleStructuralNodeToggle.overrideStagingIconIfBlank"></member><member name="F:ModuleStructuralNodeToggle.resHandler"></member><member name="F:ModuleStructuralNodeToggle.showMesh"><summary>Toggles fairing truss structure on/off in VAB/SPH editor</summary></member><member name="F:ModuleStructuralNodeToggle.showNodes"><summary>Toggles fairing interstage nodes on/off in VAB/SPH editor</summary></member><member name="F:ModuleStructuralNodeToggle.showUpgradesInModuleInfo"></member><member name="F:ModuleStructuralNodeToggle.snapshot"></member><member name="F:ModuleStructuralNodeToggle.stagingDisableText"></member><member name="F:ModuleStructuralNodeToggle.stagingEnabled"></member><member name="F:ModuleStructuralNodeToggle.stagingEnableText"></member><member name="F:ModuleStructuralNodeToggle.stagingToggleEnabledEditor"></member><member name="F:ModuleStructuralNodeToggle.stagingToggleEnabledFlight"></member><member name="F:ModuleStructuralNodeToggle.upgrades"></member><member name="F:ModuleStructuralNodeToggle.upgradesApplied"></member><member name="F:ModuleStructuralNodeToggle.upgradesApply"></member><member name="F:ModuleStructuralNodeToggle.upgradesAsk"></member><member name="P:ModuleStructuralNodeToggle.Actions"></member><member name="P:ModuleStructuralNodeToggle.ClassID"></member><member name="P:ModuleStructuralNodeToggle.ClassName"></member><member name="P:ModuleStructuralNodeToggle.enabled"></member><member name="P:ModuleStructuralNodeToggle.Events"></member><member name="P:ModuleStructuralNodeToggle.Fields"></member><member name="P:ModuleStructuralNodeToggle.gameObject"></member><member name="P:ModuleStructuralNodeToggle.GUIName"></member><member name="P:ModuleStructuralNodeToggle.hideFlags"></member><member name="P:ModuleStructuralNodeToggle.isActiveAndEnabled"></member><member name="P:ModuleStructuralNodeToggle.ModuleAttributes"></member><member name="P:ModuleStructuralNodeToggle.name"></member><member name="P:ModuleStructuralNodeToggle.part"></member><member name="P:ModuleStructuralNodeToggle.tag"></member><member name="P:ModuleStructuralNodeToggle.transform"></member><member name="P:ModuleStructuralNodeToggle.useGUILayout"></member><member name="P:ModuleStructuralNodeToggle.vessel"></member><member name="M:ModuleStructuralNodeToggle.AppliedUpgrades"></member><member name="M:ModuleStructuralNodeToggle.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.ApplyUpgrades(PartModule+StartState)"></member><member name="M:ModuleStructuralNodeToggle.Awake"></member><member name="M:ModuleStructuralNodeToggle.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.BroadcastMessage(string,object)"></member><member name="M:ModuleStructuralNodeToggle.BroadcastMessage(string)"></member><member name="M:ModuleStructuralNodeToggle.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.CancelInvoke"></member><member name="M:ModuleStructuralNodeToggle.CancelInvoke(string)"></member><member name="M:ModuleStructuralNodeToggle.CompareTag(string)"></member><member name="M:ModuleStructuralNodeToggle.Copy(PartModule)"></member><member name="M:ModuleStructuralNodeToggle.Equals(object)"></member><member name="M:ModuleStructuralNodeToggle.Finalize"></member><member name="M:ModuleStructuralNodeToggle.FindUpgrades(System.Boolean,ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.GetComponent(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponent"></member><member name="M:ModuleStructuralNodeToggle.GetComponent(string)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInChildren(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInChildren"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInChildren(System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInParent(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentInParent"></member><member name="M:ModuleStructuralNodeToggle.GetComponents(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ModuleStructuralNodeToggle.GetComponents(List)"></member><member name="M:ModuleStructuralNodeToggle.GetComponents"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren(System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInChildren(List)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInParent(System.Type)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInParent(System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ModuleStructuralNodeToggle.GetComponentsInParent"></member><member name="M:ModuleStructuralNodeToggle.GetHashCode"></member><member name="M:ModuleStructuralNodeToggle.GetInfo"></member><member name="M:ModuleStructuralNodeToggle.GetInstanceID"></member><member name="M:ModuleStructuralNodeToggle.GetModuleDisplayName"></member><member name="M:ModuleStructuralNodeToggle.GetStagingDisableText"></member><member name="M:ModuleStructuralNodeToggle.GetStagingEnableText"></member><member name="M:ModuleStructuralNodeToggle.GetType"></member><member name="M:ModuleStructuralNodeToggle.GetUpgrade(string)"></member><member name="M:ModuleStructuralNodeToggle.GetUpgradeInfo"></member><member name="M:ModuleStructuralNodeToggle.HasUpgrades"></member><member name="M:ModuleStructuralNodeToggle.Invoke(string,System.Single)"></member><member name="M:ModuleStructuralNodeToggle.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ModuleStructuralNodeToggle.IsInvoking(string)"></member><member name="M:ModuleStructuralNodeToggle.IsInvoking"></member><member name="M:ModuleStructuralNodeToggle.IsStageable"></member><member name="M:ModuleStructuralNodeToggle.IsValidContractObjective(string)"></member><member name="M:ModuleStructuralNodeToggle.Load(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.LoadUpgrades(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.MemberwiseClone"></member><member name="M:ModuleStructuralNodeToggle.OnActive"></member><member name="M:ModuleStructuralNodeToggle.OnAwake"></member><member name="M:ModuleStructuralNodeToggle.OnCopy(PartModule)"></member><member name="M:ModuleStructuralNodeToggle.OnFixedUpdate"></member><member name="M:ModuleStructuralNodeToggle.OnIconCreate"></member><member name="M:ModuleStructuralNodeToggle.OnInactive"></member><member name="M:ModuleStructuralNodeToggle.OnInitialize"></member><member name="M:ModuleStructuralNodeToggle.OnLoad(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.OnSave(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.OnStart(PartModule+StartState)"></member><member name="M:ModuleStructuralNodeToggle.OnStartFinished(PartModule+StartState)"></member><member name="M:ModuleStructuralNodeToggle.OnUpdate"></member><member name="M:ModuleStructuralNodeToggle.PrintUpgrades"></member><member name="M:ModuleStructuralNodeToggle.Save(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.SaveUpgradesApplied(ConfigNode)"></member><member name="M:ModuleStructuralNodeToggle.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.SendMessage(string,object)"></member><member name="M:ModuleStructuralNodeToggle.SendMessage(string)"></member><member name="M:ModuleStructuralNodeToggle.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.SendMessageUpwards(string,object)"></member><member name="M:ModuleStructuralNodeToggle.SendMessageUpwards(string)"></member><member name="M:ModuleStructuralNodeToggle.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ModuleStructuralNodeToggle.SetStaging(System.Boolean)"></member><member name="M:ModuleStructuralNodeToggle.StagingEnabled"></member><member name="M:ModuleStructuralNodeToggle.StagingToggleEnabledEditor"></member><member name="M:ModuleStructuralNodeToggle.StagingToggleEnabledFlight"></member><member name="M:ModuleStructuralNodeToggle.Start"></member><member name="M:ModuleStructuralNodeToggle.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleStructuralNodeToggle.StartCoroutine(string,object)"></member><member name="M:ModuleStructuralNodeToggle.StartCoroutine(string)"></member><member name="M:ModuleStructuralNodeToggle.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ModuleStructuralNodeToggle.StopAllCoroutines"></member><member name="M:ModuleStructuralNodeToggle.StopCoroutine(string)"></member><member name="M:ModuleStructuralNodeToggle.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ModuleStructuralNodeToggle.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ModuleStructuralNodeToggle.ToggleStaging"></member><member name="M:ModuleStructuralNodeToggle.ToString"></member><member name="M:ModuleStructuralNodeToggle.UpdateStagingToggle"></member><member name="M:ModuleStructuralNodeToggle.UpgradeWaitForScenarioModules"></member><member name="M:ModuleStructuralNodeToggle.#ctor"></member><member name="T:MonoUtilities"></member><member name="P:MonoUtilities.enabled"></member><member name="P:MonoUtilities.gameObject"></member><member name="P:MonoUtilities.hideFlags"></member><member name="P:MonoUtilities.isActiveAndEnabled"></member><member name="P:MonoUtilities.name"></member><member name="P:MonoUtilities.tag"></member><member name="P:MonoUtilities.transform"></member><member name="P:MonoUtilities.useGUILayout"></member><member name="M:MonoUtilities.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.BroadcastMessage(string,object)"></member><member name="M:MonoUtilities.BroadcastMessage(string)"></member><member name="M:MonoUtilities.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.CancelInvoke"></member><member name="M:MonoUtilities.CancelInvoke(string)"></member><member name="M:MonoUtilities.CompareTag(string)"></member><member name="M:MonoUtilities.Equals(object)"></member><member name="M:MonoUtilities.Finalize"></member><member name="M:MonoUtilities.GetComponent(System.Type)"></member><member name="M:MonoUtilities.GetComponent"></member><member name="M:MonoUtilities.GetComponent(string)"></member><member name="M:MonoUtilities.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:MonoUtilities.GetComponentInChildren(System.Type)"></member><member name="M:MonoUtilities.GetComponentInChildren"></member><member name="M:MonoUtilities.GetComponentInChildren(System.Boolean)"></member><member name="M:MonoUtilities.GetComponentInParent(System.Type)"></member><member name="M:MonoUtilities.GetComponentInParent"></member><member name="M:MonoUtilities.GetComponents(System.Type)"></member><member name="M:MonoUtilities.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:MonoUtilities.GetComponents(List)"></member><member name="M:MonoUtilities.GetComponents"></member><member name="M:MonoUtilities.GetComponentsInChildren(System.Type)"></member><member name="M:MonoUtilities.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:MonoUtilities.GetComponentsInChildren(System.Boolean)"></member><member name="M:MonoUtilities.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:MonoUtilities.GetComponentsInChildren"></member><member name="M:MonoUtilities.GetComponentsInChildren(List)"></member><member name="M:MonoUtilities.GetComponentsInParent(System.Type)"></member><member name="M:MonoUtilities.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:MonoUtilities.GetComponentsInParent(System.Boolean)"></member><member name="M:MonoUtilities.GetComponentsInParent(System.Boolean,List)"></member><member name="M:MonoUtilities.GetComponentsInParent"></member><member name="M:MonoUtilities.GetHashCode"></member><member name="M:MonoUtilities.GetInstanceID"></member><member name="M:MonoUtilities.GetType"></member><member name="M:MonoUtilities.Invoke(string,System.Single)"></member><member name="M:MonoUtilities.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:MonoUtilities.IsInvoking(string)"></member><member name="M:MonoUtilities.IsInvoking"></member><member name="M:MonoUtilities.MemberwiseClone"></member><member name="M:MonoUtilities.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.SendMessage(string,object)"></member><member name="M:MonoUtilities.SendMessage(string)"></member><member name="M:MonoUtilities.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.SendMessageUpwards(string,object)"></member><member name="M:MonoUtilities.SendMessageUpwards(string)"></member><member name="M:MonoUtilities.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:MonoUtilities.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:MonoUtilities.StartCoroutine(string,object)"></member><member name="M:MonoUtilities.StartCoroutine(string)"></member><member name="M:MonoUtilities.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:MonoUtilities.StopAllCoroutines"></member><member name="M:MonoUtilities.StopCoroutine(string)"></member><member name="M:MonoUtilities.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:MonoUtilities.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:MonoUtilities.ToString"></member><member name="M:MonoUtilities.RefreshContextWindows(Part)"></member><member name="M:MonoUtilities.#ctor"></member><member name="T:NavWaypoint"><summary>A NavWaypoint is a point in space, relative to a celestial body.
It can be used to display an icon on the navball, pointing in its direction, relative to the current activeVessel.</summary></member><member name="P:NavWaypoint.Altitude"><summary>Altitude of the point, relative to "Body" value, in meters.</summary></member><member name="P:NavWaypoint.Body"><summary>Relative body</summary></member><member name="P:NavWaypoint.Color"><summary>Color of navball icon</summary></member><member name="P:NavWaypoint.enabled"></member><member name="P:NavWaypoint.gameObject"></member><member name="P:NavWaypoint.Height"></member><member name="P:NavWaypoint.hideFlags"></member><member name="P:NavWaypoint.IsActive"><summary>Is the NavWaypoint active (icon activated on navball) ?</summary></member><member name="P:NavWaypoint.isActiveAndEnabled"></member><member name="P:NavWaypoint.IsBlinking"><summary>Set to true to make the navball icon blink.</summary></member><member name="P:NavWaypoint.Latitude"><summary>Latitude of the point, relative to "Body" value</summary></member><member name="P:NavWaypoint.Longitude"><summary>Longitude of the point, relative to "Body" value</summary></member><member name="P:NavWaypoint.name"></member><member name="P:NavWaypoint.NavigationVector"><para>The direction the active vessel must go to reach the waypoint.</para></member><member name="P:NavWaypoint.tag"></member><member name="P:NavWaypoint.TextureID"><summary>Name of icon displayed on navball</summary></member><member name="P:NavWaypoint.transform"></member><member name="P:NavWaypoint.useGUILayout"></member><member name="P:NavWaypoint.Visual"></member><member name="P:NavWaypoint.fetch"><summary>Currently followed waypoint (may be null?)</summary></member><member name="M:NavWaypoint.Activate"><para>Turn on the indicator. (Does not apply to IVA.)</para></member><member name="M:NavWaypoint.Awake"><para>&amp;lt; Recursively search for a waypoint to copy initial mesh and shader information from.</para><para>&amp;lt; We want a duplicate, but separate material, to copy over the shaders and such.</para></member><member name="M:NavWaypoint.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.BroadcastMessage(string,object)"></member><member name="M:NavWaypoint.BroadcastMessage(string)"></member><member name="M:NavWaypoint.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.CancelInvoke"></member><member name="M:NavWaypoint.CancelInvoke(string)"></member><member name="M:NavWaypoint.Clear"><para>Sets navigation to nonsensical, impossible values. Useful when you do NOT want to match anything.</para></member><member name="M:NavWaypoint.CompareTag(string)"></member><member name="M:NavWaypoint.Deactivate"><para>Turn off the indicator. (Does not apply to IVA.)</para></member><member name="M:NavWaypoint.Equals(object)"></member><member name="M:NavWaypoint.Finalize"></member><member name="M:NavWaypoint.GetComponent(System.Type)"></member><member name="M:NavWaypoint.GetComponent"></member><member name="M:NavWaypoint.GetComponent(string)"></member><member name="M:NavWaypoint.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:NavWaypoint.GetComponentInChildren(System.Type)"></member><member name="M:NavWaypoint.GetComponentInChildren"></member><member name="M:NavWaypoint.GetComponentInChildren(System.Boolean)"></member><member name="M:NavWaypoint.GetComponentInParent(System.Type)"></member><member name="M:NavWaypoint.GetComponentInParent"></member><member name="M:NavWaypoint.GetComponents(System.Type)"></member><member name="M:NavWaypoint.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:NavWaypoint.GetComponents(List)"></member><member name="M:NavWaypoint.GetComponents"></member><member name="M:NavWaypoint.GetComponentsInChildren(System.Type)"></member><member name="M:NavWaypoint.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:NavWaypoint.GetComponentsInChildren(System.Boolean)"></member><member name="M:NavWaypoint.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:NavWaypoint.GetComponentsInChildren"></member><member name="M:NavWaypoint.GetComponentsInChildren(List)"></member><member name="M:NavWaypoint.GetComponentsInParent(System.Type)"></member><member name="M:NavWaypoint.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:NavWaypoint.GetComponentsInParent(System.Boolean)"></member><member name="M:NavWaypoint.GetComponentsInParent(System.Boolean,List)"></member><member name="M:NavWaypoint.GetComponentsInParent"></member><member name="M:NavWaypoint.GetHashCode"></member><member name="M:NavWaypoint.GetInstanceID"></member><member name="M:NavWaypoint.GetType"></member><member name="M:NavWaypoint.Invoke(string,System.Single)"></member><member name="M:NavWaypoint.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:NavWaypoint.IsInvoking(string)"></member><member name="M:NavWaypoint.IsInvoking"></member><member name="M:NavWaypoint.IsUsing(System.Double,System.Double,System.Double)"><para>If navigation is currently set to a specific set of coordinates.</para></member><member name="M:NavWaypoint.IsUsing(FinePrint.Waypoint)"><para>If navigation is currently set to a waypoint.</para></member><member name="M:NavWaypoint.IsVisible(System.Boolean)"><para>If the indicator should even be enabled right now.</para></member><member name="M:NavWaypoint.LateUpdate"></member><member name="M:NavWaypoint.MemberwiseClone"></member><member name="M:NavWaypoint.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.SendMessage(string,object)"></member><member name="M:NavWaypoint.SendMessage(string)"></member><member name="M:NavWaypoint.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.SendMessageUpwards(string,object)"></member><member name="M:NavWaypoint.SendMessageUpwards(string)"></member><member name="M:NavWaypoint.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:NavWaypoint.Setup(CelestialBody,System.Double,System.Double,System.Double,string,UnityEngine.Color)"><para>Set navigation to a specific set of coordinates, using a specific texture and color.</para></member><member name="M:NavWaypoint.Setup(FinePrint.Waypoint)"><para>Set navigation to a waypoint, using the waypoint meta data to supply texture and color for the indicator.</para></member><member name="M:NavWaypoint.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:NavWaypoint.StartCoroutine(string,object)"></member><member name="M:NavWaypoint.StartCoroutine(string)"></member><member name="M:NavWaypoint.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:NavWaypoint.StopAllCoroutines"></member><member name="M:NavWaypoint.StopCoroutine(string)"></member><member name="M:NavWaypoint.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:NavWaypoint.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:NavWaypoint.ToString"></member><member name="M:NavWaypoint.DeactivateIfWaypoint(FinePrint.Waypoint)"><para>Deactivates the indicator if it is using the specified waypoint.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;waypoint&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The specified waypoint.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:NavWaypoint.#ctor"><para>Turn on the indicator. (Does not apply to IVA.)</para></member><member name="T:Orbit"><para>An Orbit class represents a Keplerian orbit. Each Vessel and each CelestialBody has an Orbit. CelestialBodies and on-rails Vessels follow their Orbits exactly. Off-rails vessels (the active vessel and any nearby vessels)  do not follow their orbits exactly; instead their motion is computed frame-by-frame from the forces acting on them.</para><para>A patched consics trajectory consists of a series of Orbits, called patches.</para><para>This class uses multiple axes and reference frames to describe positions and velocities.<para>We call the choices of axes<list type="bullet"><item>World: world coordinates. Left-handed.</item></list></para></para><remarks>We use the concise notation {Axes, Frame} for describing the reference frame and axes used.&lt;/para&gt;</remarks></member><member name="F:Orbit.activePatch"><summary>Whether this patch actually represents a real orbit patch in the projected flight path. Often Orbit.nextPatch for the last real will not be null, but will be some sort of bogus Orbit object. You can recognize these because activePatch will be false.</summary></member><member name="F:Orbit.altitude"><para>(distance from surface)</para><remarks>-</remarks></member><member name="F:Orbit.an"></member><member name="F:Orbit.argumentOfPeriapsis"><summary>The angle between the ascending node and the periapsis, in degrees.</summary></member><member name="F:Orbit.ClAppr"></member><member name="F:Orbit.ClEctr1"></member><member name="F:Orbit.ClEctr2"></member><member name="F:Orbit.closestEncounterBody"></member><member name="F:Orbit.closestEncounterLevel"></member><member name="F:Orbit.closestEncounterPatch"></member><member name="F:Orbit.closestTgtApprUT"></member><member name="F:Orbit.CrAppr"></member><member name="F:Orbit.debug_returnFullEllipseTrajectory"></member><member name="F:Orbit.debugAN"></member><member name="F:Orbit.debugEccVec"></member><member name="F:Orbit.debugH"></member><member name="F:Orbit.debugPos"></member><member name="F:Orbit.debugVel"></member><member name="F:Orbit.E"></member><member name="F:Orbit.eccentricAnomaly"><summary>A quantity used in the math describing Keplerian orbits; Google it.</summary></member><member name="F:Orbit.eccentricity"><summary>The eccentricity of the orbit.</summary></member><member name="F:Orbit.eccVec"><summary>A vector that points toward periapsis, with mangitude equal to the eccentricity. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary></member><member name="F:Orbit.EndUT"><summary>The universal time at which this patch ends.</summary></member><member name="F:Orbit.epoch"><summary>A special UT at which the parameters of the Orbit are defined. See meanAnomalyAtEpoch.</summary></member><member name="F:Orbit.FEVp"></member><member name="F:Orbit.FEVs"></member><member name="F:Orbit.fromE"></member><member name="F:Orbit.fromV"></member><member name="F:Orbit.h"><summary>The specific orbital angular momentum</summary></member><member name="F:Orbit.inclination"><summary>The inclination of this orbit with respect to the equator of the central body in degrees</summary></member><member name="F:Orbit.LAN"><summary>The longitude of the ascending node of the orbit, in degrees. The LAN is the angle between the ascending node and Planetarium.right, as viewed along Planetarium.up.</summary></member><member name="F:Orbit.mag"></member><member name="F:Orbit.meanAnomaly"><summary>Mean anomaly is the fraction of the orbit that has been completed, measured starting from the periapsis, multiplied by 2π. Look it up.</summary></member><member name="F:Orbit.meanAnomalyAtEpoch"><summary>The mean anomaly of the orbit at the special UT given by Orbit.epoch.</summary></member><member name="F:Orbit.meanMotion"></member><member name="F:Orbit.nearestTT"></member><member name="F:Orbit.nextPatch"></member><member name="F:Orbit.nextTT"></member><member name="F:Orbit.numClosePoints"></member><member name="F:Orbit.objectType"><para>secondary parameters</para><remarks>-</remarks></member><member name="F:Orbit.ObT"><para>time on this orbit (since periapsis)</para><remarks>- Time since periapsis, in seconds.</remarks></member><member name="F:Orbit.ObTAtEpoch"><summary>The value of ObT at the universal time given by epoch.</summary></member><member name="F:Orbit.orbitalEnergy"></member><member name="F:Orbit.orbitalSpeed"></member><member name="F:Orbit.OrbitFrame"><para>dynamic parameters</para></member><member name="F:Orbit.OrbitFrameX"></member><member name="F:Orbit.OrbitFrameY"></member><member name="F:Orbit.OrbitFrameZ"></member><member name="F:Orbit.orbitPercent"><para>orbit completion</para><remarks>- Equal to</remarks><code>&gt;ObT / period</code></member><member name="F:Orbit.patchEndTransition"><summary>How the next patch follows onto this one, or FINAL if there is no patch after this one.</summary></member><member name="F:Orbit.patchStartTransition"></member><member name="F:Orbit.period"><summary>The period of the orbit, in seconds.</summary></member><member name="F:Orbit.pos"><summary>The position of the orbiting object, {AliceWorld, Primary}.</summary></member><member name="F:Orbit.previousPatch"></member><member name="F:Orbit.radius"></member><member name="F:Orbit.referenceBody"><para>keplerian parameters</para><remarks>- The body orbited.</remarks></member><member name="F:Orbit.sampleInterval"></member><member name="F:Orbit.secondaryPosAtTransition1"></member><member name="F:Orbit.secondaryPosAtTransition2"><para>UT for closest approach to target, if any.</para><remarks>-</remarks></member><member name="F:Orbit.semiMajorAxis"><summary>The semi-major axis of the orbit, in meters. Equal to (PeR + ApR)/2</summary></member><member name="F:Orbit.SEVp"></member><member name="F:Orbit.SEVs"></member><member name="F:Orbit.StartUT"></member><member name="F:Orbit.timeToAp"><summary>The time until the object will reach apoapsis, in seconds.</summary></member><member name="F:Orbit.timeToPe"><summary>The time unti lthe object will reach periapsis, in seconds.</summary></member><member name="F:Orbit.timeToTransition1"></member><member name="F:Orbit.timeToTransition2"></member><member name="F:Orbit.toE"></member><member name="F:Orbit.toV"></member><member name="F:Orbit.trueAnomaly"></member><member name="F:Orbit.UTappr"></member><member name="F:Orbit.UTsoi"></member><member name="F:Orbit.V"></member><member name="F:Orbit.vel"><summary>The velocity of the orbiting object, {AliceWorld, Primary}.</summary></member><member name="F:Orbit.Deg2Rad"><para>orbit frame in fixed space (LAN=0 points along X-axis)</para></member><member name="F:Orbit.FindClosestPoints"></member><member name="F:Orbit.Rad2Deg"></member><member name="F:Orbit.SolveClosestApproach"></member><member name="F:Orbit.SolveSOI_BSP"></member><member name="P:Orbit.ApA"><summary>The apoapsis of the orbit in meters, measured from sea level.</summary></member><member name="P:Orbit.ApR"><summary>The apoapsis of the orbit in meters, measured from the center of the main body.</summary></member><member name="P:Orbit.PeA"><summary>The periapsis of the orbit in meters, measured from sea level.</summary></member><member name="P:Orbit.PeR"><summary>The periapsis of the orbit in meters, measured from the center of the main body.</summary></member><member name="P:Orbit.semiLatusRectum"><summary>A property of ellipses, parabolas and hyperbolas; Google it.</summary></member><member name="P:Orbit.semiMinorAxis"><summary>A property of ellipses; Google it.</summary></member><member name="M:Orbit.DrawOrbit"><para>&amp;lt; draw orbit ellipse</para><para>&amp;lt; draw velocity vector</para><para>&amp;lt; draw ascending node</para><para>&amp;lt; draw periapsis</para><para>&amp;lt; draw orbit plane normal</para><remarks>-</remarks></member><member name="M:Orbit.EccentricAnomalyAtObT(System.Double)"></member><member name="M:Orbit.EccentricAnomalyAtUT(System.Double)"></member><member name="M:Orbit.Equals(object)"></member><member name="M:Orbit.Finalize"></member><member name="M:Orbit.GetANVector"><para>Returns an updated ascending node vector (use instead of &lt;ref refid='class_orbit_1a64c2e5bf73afc81ae0f1ad8f3a5de3b6' kindref='member'&gt;Orbit.eccVec&lt;/ref&gt; for non-updating orbits when in a rotating ref frame)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Orbit.GetDTforTrueAnomaly(System.Double,System.Double)"><para>Get the time remaining to reach the given true anomaly on this orbit</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;tA&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The true anomaly to reach</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;wrapAfterSeconds&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The amount of seconds the time is allowed to go into the negative before wrapping around to the next orbit (doesn&amp;apos;t apply for hyperbolics)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The time remaining for that point (will be negative if on a hyperbolic orbit and already past that point)&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:Orbit.GetEccentricAnomaly(System.Double)"><para>Get the Eccentric Anomaly for the given true anomaly</para><remarks>-</remarks></member><member name="M:Orbit.GetEccVector"><para>Returns an updated eccentricity vector (use instead of &lt;ref refid='class_orbit_1a64c2e5bf73afc81ae0f1ad8f3a5de3b6' kindref='member'&gt;Orbit.eccVec&lt;/ref&gt; for non-updating orbits when in a rotating ref frame)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:Orbit.GetFrameVel"><para>get the current total velocity of the orbiting body (relative to the solar system inertial frame)</para><para>&lt;simplesect kind='return'&gt;<para>The total velocity vector, in Z-up coords.</para>&lt;/simplesect&gt;</para><remarks>- The velocity of the orbiting object, {AliceWorld, Sun}.</remarks></member><member name="M:Orbit.GetFrameVelAtUT(System.Double)"></member><member name="M:Orbit.GetHashCode"></member><member name="M:Orbit.GetMeanAnomaly(System.Double)"><para>Get the Mean Anomaly for the given Eccentric Anomaly</para></member><member name="M:Orbit.GetMeanAnomaly(System.Double,System.Double)"></member><member name="M:Orbit.GetMeanMotion(System.Double)"></member><member name="M:Orbit.getObTAtMeanAnomaly(System.Double)"></member><member name="M:Orbit.getObtAtUT(System.Double)"></member><member name="M:Orbit.GetOrbitalCurvatureAtTrueAnomaly(System.Double)"><para>&amp;lt; this will never be negative as the denominator varies from</para></member><member name="M:Orbit.getOrbitalSpeedAt(System.Double)"><para>Get the orbital velocity of the object at the specified time (velocity relative to parent body)</para><remarks>-</remarks></member><member name="M:Orbit.getOrbitalSpeedAtDistance(System.Double)"><para>Get the orbital velocity of the orbiting object at the specified distance to the body it&amp;apos;s orbiting (velocity relative to parent body)</para><remarks>-</remarks></member><member name="M:Orbit.getOrbitalSpeedAtPos(Vector3d)"><para>Get the orbital velocity of the object at the specified global position (velocity relative to parent body)</para><remarks>-</remarks></member><member name="M:Orbit.getOrbitalSpeedAtRelativePos(Vector3d)"><para>Get the orbital velocity of the object at the specified relative position (velocity relative to parent body)</para><remarks>-</remarks></member><member name="M:Orbit.GetOrbitalStateVectorsAtObT(System.Double,System.Double,Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Orbit.GetOrbitalStateVectorsAtTrueAnomaly(System.Double,System.Double,Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Orbit.GetOrbitalStateVectorsAtUT(System.Double,Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Orbit.getOrbitalVelocityAtObT(System.Double)"></member><member name="M:Orbit.getOrbitalVelocityAtTrueAnomaly(System.Double)"></member><member name="M:Orbit.getOrbitalVelocityAtUT(System.Double)"></member><member name="M:Orbit.GetOrbitNormal"><para>Returns an updated orbit normal (use instead of &lt;ref refid='class_orbit_1a956c6e129cba9ff4afcdd811d04717f6' kindref='member'&gt;Orbit.h&lt;/ref&gt; for non-updating orbits when in a rotating ref frame)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- A unit vector normal to the plane of the orbit. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</remarks><returns>A unit normal vector.</returns></member><member name="M:Orbit.GetPatchTrajectory(System.Int32)"></member><member name="M:Orbit.getPositionAtT(System.Double)"></member><member name="M:Orbit.getPositionAtUT(System.Double)"><para>Get the position of the orbiting object at the specified Universal Time (relative to the current position of the reference body);</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;UT&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:Orbit.getPositionFromEccAnomaly(System.Double)"><para>Get a global position vector from the given eccentric anomaly angle (in radians)</para><para>&amp;lt; y up</para><remarks>-</remarks></member><member name="M:Orbit.getPositionFromEccAnomalyWithSemiMinorAxis(System.Double,System.Double)"><para>Get a global position vector from the given eccentric anomaly angle (in radians) Version that request semiMinorAxis for faster repeated call</para><para>&amp;lt; y up</para></member><member name="M:Orbit.getPositionFromMeanAnomaly(System.Double)"><para>&amp;lt; y up</para><remarks>-</remarks></member><member name="M:Orbit.getPositionFromTrueAnomaly(System.Double)"><para>Get a global position vector from the given true anomaly angle (in radians)</para><para>&amp;lt; y up</para><remarks>-</remarks></member><member name="M:Orbit.getRelativePositionAtT(System.Double)"><summary>Gets the predicted displacement of the orbiting object from the center of the main body at a given time since perigee passage. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary><param name="T">Time since perigee passage (seconds)</param><returns>Position relative to the main body (YZ flipped)</returns></member><member name="M:Orbit.getRelativePositionAtUT(System.Double)"><summary>Gets the predicted displacement of the orbiting object from the center of the main body at a given universal time. NOTE: All Vector3d's returned by Orbit class functions have their y and z axes flipped. You have to flip these back to get the vectors in world coordinates.</summary><param name="UT">A univeral time.</param><returns>Position relative to the main body (YZ flipped)</returns></member><member name="M:Orbit.getRelativePositionFromEccAnomaly(System.Double)"><para>Get a ref-body-relative position vector from the given eccentric anomaly angle (in radians)</para><remarks>-</remarks></member><member name="M:Orbit.getRelativePositionFromEccAnomalyWithSemiMinorAxis(System.Double,System.Double)"><para>Get a ref-body-relative position vector from the given eccentric anomaly angle (in radians) Version that request semiMinorAxis for faster repeated call</para></member><member name="M:Orbit.getRelativePositionFromMeanAnomaly(System.Double)"><para>&amp;lt; z up</para><remarks>-</remarks></member><member name="M:Orbit.getRelativePositionFromTrueAnomaly(System.Double)"><para>Get a ref-body-relative position vector from the given true anomaly angle (in radians)</para><remarks>-</remarks></member><member name="M:Orbit.GetRelativeVel"><para>get the current velocity of the orbiting body (relative to it&amp;apos;s central body)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- The velocity of the orbiting object, {World, Primary}.</remarks></member><member name="M:Orbit.GetRotFrameVel(CelestialBody)"><para>get the velocity of the rotating reference frame, when that frame is in use</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- The velocity of a hypothetical object, located where the orbiting object is, and at rest in the ConditionallyRotating[refBody] frame, {AliceWorld, BodyCentre[refBody]}. In other words, velocity of the ConditionallyRotating[refBody] frame in the BodyCentre[refBody] frame at the position of the orbiting object (AliceWorld axes). Note: this only depends on the orbital position, not on the orbital velocity.</remarks></member><member name="M:Orbit.GetRotFrameVelAtPos(CelestialBody,Vector3d)"><para>get the velocity of the rotating reference frame with respect to a given position (when that frame is in use)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;refBody&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Orbit.GetTimeToPeriapsis"><para>Time from StartUT to periapsis on this patch</para></member><member name="M:Orbit.GetTrueAnomaly(System.Double)"></member><member name="M:Orbit.getTrueAnomaly(System.Double)"></member><member name="M:Orbit.GetTrueAnomalyOfZupVector(Vector3d)"><para>&amp;lt; find the true anomaly for the mouse position</para><remarks>-</remarks></member><member name="M:Orbit.getTruePositionAtUT(System.Double)"><para>Get the position of the orbiting object at the specified Universal Time (relative to the actual position of the reference body at the given UT);</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;UT&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:Orbit.GetType"></member><member name="M:Orbit.GetUTforTrueAnomaly(System.Double,System.Double)"><para>Get the Universal Time at which this orbit will reach the given true anomaly</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;tA&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The true anomaly to reach</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt; -</remarks></member><member name="M:Orbit.GetVel"><para>get the current velocity of the orbiting body (in scene space)</para><remarks>- The velocity of the orbiting object, {World, ActiveVesselPrimary}.</remarks></member><member name="M:Orbit.GetWorldSpaceVel"><summary>The velocity of the orbiting object, {World, ActiveVesselPrimaryConditionallyRotating}.</summary></member><member name="M:Orbit.Init"></member><member name="M:Orbit.MemberwiseClone"></member><member name="M:Orbit.RadiusAtTrueAnomaly(System.Double)"><summary>The distance the orbiting object will be from the center of the main body when it reaches the given true anomaly.</summary><param name="tA">True anomaly (in degrees)</param><returns>Distance from the main body's center, in meters</returns></member><member name="M:Orbit.SetOrbit(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,CelestialBody)"></member><member name="M:Orbit.solveEccentricAnomaly(System.Double,System.Double,System.Double,System.Int32)"></member><member name="M:Orbit.ToString"></member><member name="M:Orbit.TrueAnomalyAtRadius(System.Double)"><summary>The true anomaly at which the orbiting object will achieve the given distance from the center of the main body.</summary><param name="R">Distance from the center of the main body, in meters.</param><returns>True anomaly, in radians.</returns></member><member name="M:Orbit.TrueAnomalyAtT(System.Double)"></member><member name="M:Orbit.TrueAnomalyAtUT(System.Double)"></member><member name="M:Orbit.UpdateFromOrbitAtUT(Orbit,System.Double,CelestialBody)"></member><member name="M:Orbit.UpdateFromStateVectors(Vector3d,Vector3d,CelestialBody,System.Double)"><para>&amp;lt; this is correct even for radial trajectories as the orbit effectively bounces off the focus so long as the position is not 0</para><para>&amp;lt; both X and Y are in the fix frame, so Z will be too</para><para>&amp;lt; calculate the anomalies</para><para>&amp;lt; it takes a while to get to -1/12 via 1+2+3+4...</para><para>&amp;lt; update time of last measurement</para><remarks>- Updates this orbit to reflect the orbit that will be taken around the given body by an object with the given position and velocity at the given universal time.</remarks><param name="pos">The initial position of the object RELATIVE TO refBody at UT (YZ flipped)</param><param name="vel">The initial velocity of the object (YZ flipped)</param><param name="refBody">The main body</param><param name="UT">The universal time at which to start the orbit.</param></member><member name="M:Orbit.UpdateFromUT(System.Double)"><para>&amp;lt; it takes a while to get to -1/12 via 1+2+3+4...</para><remarks>-</remarks></member><member name="M:Orbit._FindClosestPoints(Orbit,Orbit,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit._SolveClosestApproach(Orbit,Orbit,double&amp;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit._SolveSOI_BSP(Orbit,Orbit,double&amp;,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit.CreateRandomOrbitAround(CelestialBody)"></member><member name="M:Orbit.CreateRandomOrbitAround(CelestialBody,System.Double,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitFlyBy(CelestialBody,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitFlyBy(Orbit,System.Double,System.Double,System.Double)"></member><member name="M:Orbit.CreateRandomOrbitNearby(Orbit)"></member><member name="M:Orbit.FindClosestPoints(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.FindClosestPoints_old(Orbit,Orbit,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,double&amp;,System.Double,System.Int32,int&amp;)"></member><member name="M:Orbit.PeApIntersects(Orbit,Orbit,System.Double)"><para>Tests two orbits to see if they stand any chance of encounter based on their apoapsis and periapsis distances This is the first-stage test. If a pair fails this, it can be ruled out already as the orbits will never meet. Both orbits need to share the same reference body.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;primary&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The primary orbit</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;secondary&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The secondary orbit&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;threshold&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The minimum distance to pass the test (should be higher or equal to the SOI radius or either orbit, if available)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;true if the pair passes the test (and needs further verification), false if ruled out.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt; -</remarks></member><member name="M:Orbit.SafeAcos(System.Double)"></member><member name="M:Orbit.SolveClosestApproach(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.SolveSOI_BSP(Orbit,Orbit,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)"></member><member name="M:Orbit.Swizzle(Vector3d)"><para>Swizzles the vector to and from orbital &amp;lt;-&amp;gt; worldspace</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vec&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Orbit.#ctor"><para>&amp;lt; draw orbit ellipse</para><para>&amp;lt; draw velocity vector</para><para>&amp;lt; draw ascending node</para><para>&amp;lt; draw periapsis</para><para>&amp;lt; draw orbit plane normal</para><remarks>-</remarks></member><member name="M:Orbit.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,CelestialBody)"></member><member name="M:Orbit.#ctor(Orbit)"></member><member name="T:OrbitDriver"></member><member name="F:OrbitDriver.celestialBody"></member><member name="F:OrbitDriver.drawOrbit"></member><member name="F:OrbitDriver.driverTransform"></member><member name="F:OrbitDriver.frameShift"></member><member name="F:OrbitDriver.lastMode"></member><member name="F:OrbitDriver.lastTrackUT"></member><member name="F:OrbitDriver.lowerCamVsSmaRatio"></member><member name="F:OrbitDriver.OnReferenceBodyChange"></member><member name="F:OrbitDriver.orbit"></member><member name="F:OrbitDriver.orbitColor"></member><member name="F:OrbitDriver.pos"></member><member name="F:OrbitDriver.QueuedUpdate"></member><member name="F:OrbitDriver.QueueOnce"></member><member name="F:OrbitDriver.Renderer"></member><member name="F:OrbitDriver.reverse"></member><member name="F:OrbitDriver.updateMode"></member><member name="F:OrbitDriver.upperCamVsSmaRatio"></member><member name="F:OrbitDriver.vel"></member><member name="F:OrbitDriver.vessel"></member><member name="P:OrbitDriver.enabled"></member><member name="P:OrbitDriver.gameObject"></member><member name="P:OrbitDriver.hideFlags"></member><member name="P:OrbitDriver.isActiveAndEnabled"></member><member name="P:OrbitDriver.name"></member><member name="P:OrbitDriver.referenceBody"></member><member name="P:OrbitDriver.tag"></member><member name="P:OrbitDriver.Targetable"></member><member name="P:OrbitDriver.transform"></member><member name="P:OrbitDriver.useGUILayout"></member><member name="M:OrbitDriver.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.BroadcastMessage(string,object)"></member><member name="M:OrbitDriver.BroadcastMessage(string)"></member><member name="M:OrbitDriver.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.CancelInvoke"></member><member name="M:OrbitDriver.CancelInvoke(string)"></member><member name="M:OrbitDriver.CheckDominantBody(Vector3d)"></member><member name="M:OrbitDriver.CompareTag(string)"></member><member name="M:OrbitDriver.Equals(object)"></member><member name="M:OrbitDriver.Finalize"></member><member name="M:OrbitDriver.GetComponent(System.Type)"></member><member name="M:OrbitDriver.GetComponent"></member><member name="M:OrbitDriver.GetComponent(string)"></member><member name="M:OrbitDriver.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:OrbitDriver.GetComponentInChildren(System.Type)"></member><member name="M:OrbitDriver.GetComponentInChildren"></member><member name="M:OrbitDriver.GetComponentInChildren(System.Boolean)"></member><member name="M:OrbitDriver.GetComponentInParent(System.Type)"></member><member name="M:OrbitDriver.GetComponentInParent"></member><member name="M:OrbitDriver.GetComponents(System.Type)"></member><member name="M:OrbitDriver.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:OrbitDriver.GetComponents(List)"></member><member name="M:OrbitDriver.GetComponents"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Type)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:OrbitDriver.GetComponentsInChildren"></member><member name="M:OrbitDriver.GetComponentsInChildren(List)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Type)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Boolean)"></member><member name="M:OrbitDriver.GetComponentsInParent(System.Boolean,List)"></member><member name="M:OrbitDriver.GetComponentsInParent"></member><member name="M:OrbitDriver.GetHashCode"></member><member name="M:OrbitDriver.GetInstanceID"></member><member name="M:OrbitDriver.GetType"></member><member name="M:OrbitDriver.Invoke(string,System.Single)"></member><member name="M:OrbitDriver.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:OrbitDriver.IsInvoking(string)"></member><member name="M:OrbitDriver.IsInvoking"></member><member name="M:OrbitDriver.MemberwiseClone"></member><member name="M:OrbitDriver.OnRailsSOITransition(Orbit,CelestialBody)"><para>&amp;lt; initial guess</para><para>&amp;lt; find the exact moment of SOI transition (must have happened sometime between the last frame and now)</para></member><member name="M:OrbitDriver.RecalculateOrbit(CelestialBody)"><para>&amp;lt; Unlike scenarios (progress, contracts, etc), modules won&amp;apos;t respond if unloaded. &lt;ref refid='class_module_trip_logger' kindref='compound'&gt;ModuleTripLogger&lt;/ref&gt; needs to recognize this event.</para></member><member name="M:OrbitDriver.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessage(string,object)"></member><member name="M:OrbitDriver.SendMessage(string)"></member><member name="M:OrbitDriver.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,object)"></member><member name="M:OrbitDriver.SendMessageUpwards(string)"></member><member name="M:OrbitDriver.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:OrbitDriver.SetOrbitMode(OrbitDriver+UpdateMode)"></member><member name="M:OrbitDriver.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StartCoroutine(string,object)"></member><member name="M:OrbitDriver.StartCoroutine(string)"></member><member name="M:OrbitDriver.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StopAllCoroutines"></member><member name="M:OrbitDriver.StopCoroutine(string)"></member><member name="M:OrbitDriver.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:OrbitDriver.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:OrbitDriver.ToString"></member><member name="M:OrbitDriver.TrackRigidbody(CelestialBody,System.Double)"><para>This method updates keplerian parameters from given vessel&amp;apos;s position and velocity in worldspace with respect to the reference body. It can also be passed a refbody which is &lt;emphasis&gt;not&lt;/emphasis&gt; the current referenceBody; this is for calculating new keplerian parameters when changing frames of reference. NOTE: This normally runs before PhysX integration, which means before our current velocity is applied to our position. However, when on rails, we are pushing a new position and velocity and so when &lt;ref refid='class_orbit_driver' kindref='compound'&gt;OrbitDriver&lt;/ref&gt; is running they are correct for the given UT. &lt;ref refid='class_vessel_precalculate' kindref='compound'&gt;VesselPrecalculate&lt;/ref&gt; will also at times run this &lt;emphasis&gt;after&lt;/emphasis&gt; PhysX integration runs (i.e. it will run this on its Update, and then &lt;emphasis&gt;not&lt;/emphasis&gt; run it on the following fixed frame). So we need to decide: Are we computing our orbit pre-integration or post? If we are computing pre-integration, we need to use the last frame&amp;apos;s timestamp when passing our position and velocity in.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;refBody&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the ref body to compute against (may not be current referenceBody)</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fdtOffset&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the offset to the current UT to apply when computing the orbit. Per above this may be (last frame UT - this frame UT) since the pos and vel are from the last frame&amp;apos;s UT during integration&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; convert the rigidbody vectors into the proper coordinate space (Z-up, centered at reference body)&lt;/para&gt;&lt;para&gt;&amp;lt; orbital pos wrt old reference body&lt;/para&gt;&lt;para&gt;&amp;lt; our pos and vel in this case are not set until&lt;/para&gt;&lt;para&gt;&amp;lt; convert from rot to inertial &lt;/para&gt;</remarks></member><member name="M:OrbitDriver.updateFromParameters"><para>&amp;lt; unswizzle</para><para>&amp;lt; Failsafe :: If any orbit is detected to be a NaN orbit, delete the vessel completely.</para></member><member name="M:OrbitDriver.UpdateOrbit(System.Boolean)"></member><member name="M:OrbitDriver.#ctor"></member><member name="T:PAsteroid"><summary>Stores information on an asteroid's shape</summary><see cref="ProceduralAsteroid.Generate(int,"/><remarks>for a 	factory method creating PAsteroids</remarks></member><member name="F:PAsteroid.highestPoint"><summary>The largest distance of any vertex to the mesh center</summary></member><member name="F:PAsteroid.volume"><summary>The (approximate?) volume of the asteroid mesh</summary></member><member name="P:PAsteroid.enabled"></member><member name="P:PAsteroid.gameObject"></member><member name="P:PAsteroid.hideFlags"></member><member name="P:PAsteroid.isActiveAndEnabled"></member><member name="P:PAsteroid.name"></member><member name="P:PAsteroid.tag"></member><member name="P:PAsteroid.transform"></member><member name="P:PAsteroid.useGUILayout"></member><member name="M:PAsteroid.Awake"></member><member name="M:PAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.BroadcastMessage(string,object)"></member><member name="M:PAsteroid.BroadcastMessage(string)"></member><member name="M:PAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.CancelInvoke"></member><member name="M:PAsteroid.CancelInvoke(string)"></member><member name="M:PAsteroid.CompareTag(string)"></member><member name="M:PAsteroid.Equals(object)"></member><member name="M:PAsteroid.Finalize"></member><member name="M:PAsteroid.GetComponent(System.Type)"></member><member name="M:PAsteroid.GetComponent"></member><member name="M:PAsteroid.GetComponent(string)"></member><member name="M:PAsteroid.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:PAsteroid.GetComponentInChildren"></member><member name="M:PAsteroid.GetComponentInChildren(System.Boolean)"></member><member name="M:PAsteroid.GetComponentInParent(System.Type)"></member><member name="M:PAsteroid.GetComponentInParent"></member><member name="M:PAsteroid.GetComponents(System.Type)"></member><member name="M:PAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PAsteroid.GetComponents(List)"></member><member name="M:PAsteroid.GetComponents"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PAsteroid.GetComponentsInChildren"></member><member name="M:PAsteroid.GetComponentsInChildren(List)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:PAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PAsteroid.GetComponentsInParent"></member><member name="M:PAsteroid.GetHashCode"></member><member name="M:PAsteroid.GetInstanceID"></member><member name="M:PAsteroid.GetType"></member><member name="M:PAsteroid.Invoke(string,System.Single)"></member><member name="M:PAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PAsteroid.IsInvoking(string)"></member><member name="M:PAsteroid.IsInvoking"></member><member name="M:PAsteroid.MemberwiseClone"></member><member name="M:PAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessage(string,object)"></member><member name="M:PAsteroid.SendMessage(string)"></member><member name="M:PAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SendMessageUpwards(string,object)"></member><member name="M:PAsteroid.SendMessageUpwards(string)"></member><member name="M:PAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PAsteroid.SetMaterialColor(string,UnityEngine.Color)"></member><member name="M:PAsteroid.Setup(UnityEngine.Mesh,UnityEngine.Material,string,string,UnityEngine.Mesh,UnityEngine.PhysicMaterial,string,string,UnityEngine.Mesh,UnityEngine.PhysicMaterial,string,string,System.Func,Callback)"></member><member name="M:PAsteroid.Setup(Mesh,Material,string,string,Mesh,PhysicMaterial,string,string,Mesh,PhysicMaterial,string,string)"><summary>Combines premade elements into visual, collider, and convex meshes.</summary></member><member name="M:PAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StartCoroutine(string,object)"></member><member name="M:PAsteroid.StartCoroutine(string)"></member><member name="M:PAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StopAllCoroutines"></member><member name="M:PAsteroid.StopCoroutine(string)"></member><member name="M:PAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PAsteroid.ToString"></member><member name="M:PAsteroid.#ctor"></member><member name="T:PSystem"><para>Use a &lt;ref refid='class_p_system' kindref='compound'&gt;PSystem&lt;/ref&gt; prefab to define a solar system setup starting with the root body (sun usually). The &lt;ref refid='class_p_system_manager' kindref='compound'&gt;PSystemManager&lt;/ref&gt; requires a reference to the &lt;ref refid='class_p_system' kindref='compound'&gt;PSystem&lt;/ref&gt; prefab in order to set up the system.</para><remarks>-</remarks></member><member name="F:PSystem.mainToolbarSelected"></member><member name="F:PSystem.rootBody"><para>The root body definition for this solar system</para><remarks>-</remarks></member><member name="F:PSystem.systemName"><para>Name for this solar system</para><remarks>-</remarks></member><member name="F:PSystem.systemScale"></member><member name="F:PSystem.systemTimeScale"></member><member name="P:PSystem.enabled"></member><member name="P:PSystem.gameObject"></member><member name="P:PSystem.hideFlags"></member><member name="P:PSystem.isActiveAndEnabled"></member><member name="P:PSystem.name"></member><member name="P:PSystem.tag"></member><member name="P:PSystem.transform"></member><member name="P:PSystem.useGUILayout"></member><member name="M:PSystem.AddBody(PSystemBody)"></member><member name="M:PSystem.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.BroadcastMessage(string,object)"></member><member name="M:PSystem.BroadcastMessage(string)"></member><member name="M:PSystem.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.CancelInvoke"></member><member name="M:PSystem.CancelInvoke(string)"></member><member name="M:PSystem.CompareTag(string)"></member><member name="M:PSystem.Equals(object)"></member><member name="M:PSystem.Finalize"></member><member name="M:PSystem.GetComponent(System.Type)"></member><member name="M:PSystem.GetComponent"></member><member name="M:PSystem.GetComponent(string)"></member><member name="M:PSystem.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PSystem.GetComponentInChildren(System.Type)"></member><member name="M:PSystem.GetComponentInChildren"></member><member name="M:PSystem.GetComponentInChildren(System.Boolean)"></member><member name="M:PSystem.GetComponentInParent(System.Type)"></member><member name="M:PSystem.GetComponentInParent"></member><member name="M:PSystem.GetComponents(System.Type)"></member><member name="M:PSystem.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PSystem.GetComponents(List)"></member><member name="M:PSystem.GetComponents"></member><member name="M:PSystem.GetComponentsInChildren(System.Type)"></member><member name="M:PSystem.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PSystem.GetComponentsInChildren(System.Boolean)"></member><member name="M:PSystem.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PSystem.GetComponentsInChildren"></member><member name="M:PSystem.GetComponentsInChildren(List)"></member><member name="M:PSystem.GetComponentsInParent(System.Type)"></member><member name="M:PSystem.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PSystem.GetComponentsInParent(System.Boolean)"></member><member name="M:PSystem.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PSystem.GetComponentsInParent"></member><member name="M:PSystem.GetHashCode"></member><member name="M:PSystem.GetInstanceID"></member><member name="M:PSystem.GetType"></member><member name="M:PSystem.Invoke(string,System.Single)"></member><member name="M:PSystem.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PSystem.IsInvoking(string)"></member><member name="M:PSystem.IsInvoking"></member><member name="M:PSystem.LoadDatabase"></member><member name="M:PSystem.MemberwiseClone"></member><member name="M:PSystem.Reset"></member><member name="M:PSystem.SaveDatabase"></member><member name="M:PSystem.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessage(string,object)"></member><member name="M:PSystem.SendMessage(string)"></member><member name="M:PSystem.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.SendMessageUpwards(string,object)"></member><member name="M:PSystem.SendMessageUpwards(string)"></member><member name="M:PSystem.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystem.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystem.StartCoroutine(string,object)"></member><member name="M:PSystem.StartCoroutine(string)"></member><member name="M:PSystem.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PSystem.StopAllCoroutines"></member><member name="M:PSystem.StopCoroutine(string)"></member><member name="M:PSystem.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystem.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PSystem.ToString"></member><member name="M:PSystem.#ctor"></member><member name="T:PSystemManager"><para>&lt;ref refid='class_p_system_manager' kindref='compound'&gt;PSystemManager&lt;/ref&gt; spawns a solar system defined by a &lt;ref refid='class_p_system' kindref='compound'&gt;PSystem&lt;/ref&gt; prefab. If the local and scaled parent transforms are null it will spawn its own. If the spawnPQS flag is set then it&amp;apos;ll spawn the pqs representations of planets into local space.</para><remarks>- A class for managing planetary systems. Ask the Kopernicus guys/look at their code for details.</remarks></member><member name="F:PSystemManager.localSpaceName"><para>Name of local space parent to create</para><remarks>-</remarks></member><member name="F:PSystemManager.scaledSpaceCamera"><para>The camera for scaled space</para><remarks>-</remarks></member><member name="F:PSystemManager.scaledSpaceFactor"><para>The scaled space size ratio</para><remarks>-</remarks></member><member name="F:PSystemManager.scaledSpaceName"><para>Name of scaled space parent to create</para><remarks>-</remarks></member><member name="F:PSystemManager.sun"><para>The sun light and shadows object</para><remarks>-</remarks></member><member name="F:PSystemManager.systemPrefab"><para>The &lt;ref refid='class_p_system' kindref='compound'&gt;PSystem&lt;/ref&gt; solar system prefab to use to generate the system</para><remarks>-</remarks></member><member name="F:PSystemManager.OrbitRendererDataCache"></member><member name="P:PSystemManager.enabled"></member><member name="P:PSystemManager.gameObject"></member><member name="P:PSystemManager.hideFlags"></member><member name="P:PSystemManager.isActiveAndEnabled"></member><member name="P:PSystemManager.localBodies"><para>Stored list of celestial bodies</para><remarks>-</remarks></member><member name="P:PSystemManager.name"></member><member name="P:PSystemManager.OnPSystemReady"></member><member name="P:PSystemManager.scaledBodies"><para>Stored list of scaled bodies</para><remarks>-</remarks></member><member name="P:PSystemManager.tag"></member><member name="P:PSystemManager.transform"></member><member name="P:PSystemManager.useGUILayout"></member><member name="P:PSystemManager.Instance"><para>Static singleton reference</para><remarks>-</remarks></member><member name="M:PSystemManager.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.BroadcastMessage(string,object)"></member><member name="M:PSystemManager.BroadcastMessage(string)"></member><member name="M:PSystemManager.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.CancelInvoke"></member><member name="M:PSystemManager.CancelInvoke(string)"></member><member name="M:PSystemManager.CompareTag(string)"></member><member name="M:PSystemManager.Equals(object)"></member><member name="M:PSystemManager.Finalize"></member><member name="M:PSystemManager.GetComponent(System.Type)"></member><member name="M:PSystemManager.GetComponent"></member><member name="M:PSystemManager.GetComponent(string)"></member><member name="M:PSystemManager.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PSystemManager.GetComponentInChildren(System.Type)"></member><member name="M:PSystemManager.GetComponentInChildren"></member><member name="M:PSystemManager.GetComponentInChildren(System.Boolean)"></member><member name="M:PSystemManager.GetComponentInParent(System.Type)"></member><member name="M:PSystemManager.GetComponentInParent"></member><member name="M:PSystemManager.GetComponents(System.Type)"></member><member name="M:PSystemManager.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PSystemManager.GetComponents(List)"></member><member name="M:PSystemManager.GetComponents"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Type)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PSystemManager.GetComponentsInChildren"></member><member name="M:PSystemManager.GetComponentsInChildren(List)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Type)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Boolean)"></member><member name="M:PSystemManager.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PSystemManager.GetComponentsInParent"></member><member name="M:PSystemManager.GetHashCode"></member><member name="M:PSystemManager.GetInstanceID"></member><member name="M:PSystemManager.GetType"></member><member name="M:PSystemManager.Invoke(string,System.Single)"></member><member name="M:PSystemManager.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PSystemManager.IsInvoking(string)"></member><member name="M:PSystemManager.IsInvoking"></member><member name="M:PSystemManager.MemberwiseClone"></member><member name="M:PSystemManager.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessage(string,object)"></member><member name="M:PSystemManager.SendMessage(string)"></member><member name="M:PSystemManager.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.SendMessageUpwards(string,object)"></member><member name="M:PSystemManager.SendMessageUpwards(string)"></member><member name="M:PSystemManager.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemManager.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StartCoroutine(string,object)"></member><member name="M:PSystemManager.StartCoroutine(string)"></member><member name="M:PSystemManager.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StopAllCoroutines"></member><member name="M:PSystemManager.StopCoroutine(string)"></member><member name="M:PSystemManager.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemManager.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PSystemManager.ToString"></member><member name="M:PSystemManager.#ctor"><para>Monobehaviour Awake</para><remarks>-</remarks></member><member name="T:PSystemSetup"><summary>This class contains the SpaceCenterFacility setup for the KSC as well as controls the initial camera settings for the various scenes.</summary></member><member name="F:PSystemSetup.nextScene"><summary>the next game scene to be loaded</summary></member><member name="F:PSystemSetup.pqsToActivate"><summary>the PQS to set to active (home planet of the KSC)</summary></member><member name="F:PSystemSetup.pqsTransformToCache"><summary>the PQS transform that will be stored (home planet of the KSC)</summary></member><member name="P:PSystemSetup.enabled"></member><member name="P:PSystemSetup.gameObject"></member><member name="P:PSystemSetup.hideFlags"></member><member name="P:PSystemSetup.isActiveAndEnabled"></member><member name="P:PSystemSetup.name"></member><member name="P:PSystemSetup.SpaceCenterFacilities"></member><member name="P:PSystemSetup.tag"></member><member name="P:PSystemSetup.transform"></member><member name="P:PSystemSetup.useGUILayout"></member><member name="P:PSystemSetup.Instance"><summary>It's a singleton. This will retrieve it's instance.</summary></member><member name="M:PSystemSetup.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.BroadcastMessage(string,object)"></member><member name="M:PSystemSetup.BroadcastMessage(string)"></member><member name="M:PSystemSetup.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.CancelInvoke"></member><member name="M:PSystemSetup.CancelInvoke(string)"></member><member name="M:PSystemSetup.CompareTag(string)"></member><member name="M:PSystemSetup.Equals(object)"></member><member name="M:PSystemSetup.Finalize"></member><member name="M:PSystemSetup.GetComponent(System.Type)"></member><member name="M:PSystemSetup.GetComponent"></member><member name="M:PSystemSetup.GetComponent(string)"></member><member name="M:PSystemSetup.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PSystemSetup.GetComponentInChildren(System.Type)"></member><member name="M:PSystemSetup.GetComponentInChildren"></member><member name="M:PSystemSetup.GetComponentInChildren(System.Boolean)"></member><member name="M:PSystemSetup.GetComponentInParent(System.Type)"></member><member name="M:PSystemSetup.GetComponentInParent"></member><member name="M:PSystemSetup.GetComponents(System.Type)"></member><member name="M:PSystemSetup.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PSystemSetup.GetComponents(List)"></member><member name="M:PSystemSetup.GetComponents"></member><member name="M:PSystemSetup.GetComponentsInChildren(System.Type)"></member><member name="M:PSystemSetup.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PSystemSetup.GetComponentsInChildren(System.Boolean)"></member><member name="M:PSystemSetup.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PSystemSetup.GetComponentsInChildren"></member><member name="M:PSystemSetup.GetComponentsInChildren(List)"></member><member name="M:PSystemSetup.GetComponentsInParent(System.Type)"></member><member name="M:PSystemSetup.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PSystemSetup.GetComponentsInParent(System.Boolean)"></member><member name="M:PSystemSetup.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PSystemSetup.GetComponentsInParent"></member><member name="M:PSystemSetup.GetHashCode"></member><member name="M:PSystemSetup.GetInstanceID"></member><member name="M:PSystemSetup.GetSpaceCenterFacilities"><summary>Returns an array of all the SpaceCenter Facilities (SpaceCenterFacility class).</summary></member><member name="M:PSystemSetup.GetSpaceCenterFacility(string)"><summary>Returns a specific entry of all the SpaceCenter Facilities (SpaceCenterFacility class).</summary></member><member name="M:PSystemSetup.GetType"></member><member name="M:PSystemSetup.Invoke(string,System.Single)"></member><member name="M:PSystemSetup.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PSystemSetup.IsInvoking(string)"></member><member name="M:PSystemSetup.IsInvoking"></member><member name="M:PSystemSetup.LoadTestScene(GameScenes)"><para>Call this method to override the next scene transition and invoke the setup for a given scene type (useful for test scenes)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;scene&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PSystemSetup.MemberwiseClone"></member><member name="M:PSystemSetup.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.SendMessage(string,object)"></member><member name="M:PSystemSetup.SendMessage(string)"></member><member name="M:PSystemSetup.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.SendMessageUpwards(string,object)"></member><member name="M:PSystemSetup.SendMessageUpwards(string)"></member><member name="M:PSystemSetup.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PSystemSetup.SetPQSActive(PQS)"><summary>Sets a PQS to active and resets it (to become visible). Called to make the homeplanet visible when you return to the SpaceCenter.</summary></member><member name="M:PSystemSetup.SetPQSActive"><summary>Sets all the PQS to active and resets them. Called when entering flight mode.</summary></member><member name="M:PSystemSetup.SetPQSDisabled"><summary>Sets all the PQS to disabled. Called when a scene change is about to happen.</summary></member><member name="M:PSystemSetup.SetPQSInactive"><summary>Sets all the PQS to inactive. Called when going into the editor or returning to the main menu.</summary></member><member name="M:PSystemSetup.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemSetup.StartCoroutine(string,object)"></member><member name="M:PSystemSetup.StartCoroutine(string)"></member><member name="M:PSystemSetup.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PSystemSetup.StopAllCoroutines"></member><member name="M:PSystemSetup.StopCoroutine(string)"></member><member name="M:PSystemSetup.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PSystemSetup.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PSystemSetup.ToString"></member><member name="M:PSystemSetup.#ctor"></member><member name="T:Part"><summary>Each part on a vessel is represented by a Part object. Plugins can add new functionality to parts by defining new PartModules, which can then be added to Parts. It is also possible to define new subclasses of Part, but this is deprecated in favor of PartModules.</summary></member><member name="F:Part.absorptiveConstant"></member><member name="F:Part.ActivatesEvenIfDisconnected"><summary>Whether this part will actually activate if it is scheduled to be activated in the same stage as it is decoupled from the rocket. In particular, sepratrons must have ActivatesEvenIfDisconnected set to true if they are to function properly.</summary></member><member name="F:Part.aeroDisplayWasActive"></member><member name="F:Part.aerodynamicArea"></member><member name="F:Part.airlock"><para>noAutoEVAAny disables auto EVA always, whereas noAutoEVAMulti allows it if there is only one part on the vessel.</para></member><member name="F:Part.airstreamShields"></member><member name="F:Part.alwaysShowResourcePriority"></member><member name="F:Part.analyticInternalInsulationFactor"></member><member name="F:Part.analyticSkinInsulationFactor"></member><member name="F:Part.angularDrag"></member><member name="F:Part.angularDragByFI"></member><member name="F:Part.angVelBackup"></member><member name="F:Part.atmDensity"><para>1.0+ thermo</para></member><member name="F:Part.attached"><para>Flag for whether the part is directly attached to another (it&amp;apos;s not the same as parent != null because this is also true for root parts)</para></member><member name="F:Part.attachJoint"></member><member name="F:Part.attachMethod"></member><member name="F:Part.attachMode"><summary>Whether this part is attached to its parent via a stack AttachNode or a surface AttachNode.</summary></member><member name="F:Part.attachNodes"><summary>An AttachNode represents the link between two attached parts. attachNodes is a list of possible nodes to which other parts can be attached to this part. You can find the parts that actually are attached using AttachNode.attachedPart.</summary></member><member name="F:Part.attachRules"></member><member name="F:Part.attPos"></member><member name="F:Part.attPos0"></member><member name="F:Part.attRotation"></member><member name="F:Part.attRotation0"></member><member name="F:Part.autoStrutEnableOptionEditor"></member><member name="F:Part.autoStrutEnableOptionFlight"></member><member name="F:Part.autoStrutExcludeParent"></member><member name="F:Part.autoStrutMode"></member><member name="F:Part.blackBodyRadiationAlphaMult"></member><member name="F:Part.bodyLiftArrowPtr"></member><member name="F:Part.bodyLiftLocalPosition"></member><member name="F:Part.bodyLiftLocalVector"></member><member name="F:Part.bodyLiftMultiplier"></member><member name="F:Part.bodyLiftOnlyAttachName"></member><member name="F:Part.bodyLiftOnlyProvider"></member><member name="F:Part.bodyLiftOnlyUnattachedLift"></member><member name="F:Part.bodyLiftOnlyUnattachedLiftActual"></member><member name="F:Part.bodyLiftScalar"></member><member name="F:Part.boundsCentroidOffset"></member><member name="F:Part.boundsMultiplier"></member><member name="F:Part.breakingForce"></member><member name="F:Part.breakingTorque"></member><member name="F:Part.buoyancy"></member><member name="F:Part.buoyancyUseCubeNamed"></member><member name="F:Part.buoyancyUseSine"></member><member name="F:Part.canAimCamera"></member><member name="F:Part.CenterOfBuoyancy"></member><member name="F:Part.CenterOfDisplacement"></member><member name="F:Part.children"><summary>The parts that are children of this part in the part tree (parts that were attached to this part in the editor after this part was already part of the vessel).</summary></member><member name="F:Part.childStageOffset"></member><member name="F:Part.collider"></member><member name="F:Part.collisionEnhancer"></member><member name="F:Part.CoLOffset"></member><member name="F:Part.CoMOffset"></member><member name="F:Part.compund"><para>Flag for whether the part is able to attach to another</para></member><member name="F:Part.connected"></member><member name="F:Part.CoPOffset"></member><member name="F:Part.craftID"><para>a unique id used in the editor. Defaults to object instance id or loaded from craft data. Will not be reliable after docking</para></member><member name="F:Part.crashTolerance"></member><member name="F:Part.CrewCapacity"><summary>How many crew members this part can fit.</summary></member><member name="F:Part.crewRespawnTime"></member><member name="F:Part.crewTransferAvailable"></member><member name="F:Part.crossfeedPartSet"><para>set by the vessel!</para></member><member name="F:Part.currentCollisions"></member><member name="F:Part.customPartData"><para>A string for saving and loading custom part data. (Do not use linebreaks here. If storing multiple values, separate them with a semicolon</para></member><member name="F:Part.defaultInverseStage"></member><member name="F:Part.depth"></member><member name="F:Part.dockingPorts"><para>original position and rotation, in relation to the vessel. This is set by the vessel when it&amp;apos;s first initialized</para></member><member name="F:Part.dragArrowPtr"></member><member name="F:Part.dragModel"><summary>Unused?</summary></member><member name="F:Part.dragReferenceVector"></member><member name="F:Part.dragScalar"></member><member name="F:Part.dragVector"></member><member name="F:Part.dragVectorDir"></member><member name="F:Part.dragVectorDirLocal"></member><member name="F:Part.dragVectorMag"></member><member name="F:Part.dragVectorSqrMag"></member><member name="F:Part.dynamicPressurekPa"></member><member name="F:Part.edgeHighlightThresholdMult"></member><member name="F:Part.editorCollision"></member><member name="F:Part.editorLinks"></member><member name="F:Part.editorStarted"></member><member name="F:Part.emissiveConstant"><summary>Defines how quickly heat is radiated into space from this part's skin through blackbody radiation, depending on its skin temperature. Conversely, in high ambient heat conditions, defines how quickly the part ingests ambient heat through its skin.

A value of 1.0 would be a perfect blackbody, which (realistically speaking) is physically impossible to achieve - as is any value higher than 1.0. However, the game does let you set values higher than 1.0, if you want.

Default is 0.7.</summary></member><member name="F:Part.explosionPotential"></member><member name="F:Part.exposedArea"></member><member name="F:Part.flagURL"></member><member name="F:Part.flightID"><para>a unique id to identify this part in flight. This one is guaranteed to be unique for all parts in the simulation. Not assigned in the editor.</para><remarks>- A unique identifider for this part. Note that despite the name, each part on the same vessel will still have a different value in this field. This value is persistent and not affected by game load or docking/undocking or similar. This is the 'uid' value at the PART level of the persistent.sfs file.</remarks></member><member name="F:Part.force"></member><member name="F:Part.forces"></member><member name="F:Part.frozen"></member><member name="F:Part.fuelCrossFeed"><summary>Whether this part allows fuel crossfeed.</summary></member><member name="F:Part.fuelFlowOverlayEnabled"></member><member name="F:Part.fuelLookupTargets"><summary>In the flight scene, fuelLookupTargets is the list of fuel lines through which this part can draw fuel. Also if this part is a docking node docked to a another docking node through which it can draw fuel, then the attached docking node will also be in fuelLookupTargets.</summary></member><member name="F:Part.fxGroups"></member><member name="F:Part.gaugeThresholdMult"></member><member name="F:Part.gExplodeChance"><para>Chance per second, i.e. multiplied by fixedDeltaTime</para></member><member name="F:Part.GroundContact"></member><member name="F:Part.gTolerance"><summary>G tolerance of this part</summary></member><member name="F:Part.habitableVolume"></member><member name="F:Part.hasHeiarchyModel"></member><member name="F:Part.hasLiftModule"></member><member name="F:Part.hatchObstructionCheckInwardDistance"></member><member name="F:Part.hatchObstructionCheckInwardOffset"></member><member name="F:Part.hatchObstructionCheckOutwardDistance"></member><member name="F:Part.hatchObstructionCheckSphereRadius"></member><member name="F:Part.heatConductivity"><summary>Defines how easily heat conducts between this part's internals and the internals of parts directly attached to it. Default is 0.12; higher numbers mean more conduction. This field does not affect the thermal properties of a part's skin in any way (see skinSkinConductionMult).

Note that conductivity is further modified by the bulkheadProfiles field. Also, conduction is always between two parts, which means that the other part's heatConductivity and bulkheadProfiles also play a role in determining the total flux.</summary></member><member name="F:Part.heatConvectiveConstant"><summary>Defines how easily heat is exchanged between the part's skin and surrounding air or liquid - cooling during slow flight/swim, or heating during atmospheric reentry. Default is unknown. No stock parts explicitly set this field in their configs, not even radiators or heatshields.</summary></member><member name="F:Part.highlightColor"></member><member name="F:Part.highlightType"></member><member name="F:Part.initialVesselName"></member><member name="F:Part.initRotation"></member><member name="F:Part.inStageIndex"></member><member name="F:Part.internalModel"></member><member name="F:Part.InternalModelName"></member><member name="F:Part.inverseStage"><summary>The stage in which this part will activate, as shown in the staging display. (Possibly called inverseStage because the stages in KSP count down instead of up).</summary></member><member name="F:Part.inverseStageCarryover"><para>True when this inverseStage index should carry over to non-stageable parts.</para></member><member name="F:Part.isClone"></member><member name="F:Part.isControlSource"><para>Flag for whether this part can provide input to the vessel. (tweaked by command modules)</para><para>physical significance of the part.</para></member><member name="F:Part.isMirrored"><para>set to true if mirrorVector != Vector3.one</para></member><member name="F:Part.isPersistent"></member><member name="F:Part.isShieldedDisplay"></member><member name="F:Part.lastFuelRequestId"></member><member name="F:Part.launchID"><para>another unique number shared by all parts launched together on the same vessel</para></member><member name="F:Part.machNumber"></member><member name="F:Part.manualStageOffset"></member><member name="F:Part.mass"><summary>The DRY mass of this part, not including the mass of any resources it contains</summary></member><member name="F:Part.maxDepth"></member><member name="F:Part.maximum_drag"><summary>The drag coefficient of this part is equal to (total mass) * (maximum_drag)</summary></member><member name="F:Part.maxPressure"></member><member name="F:Part.maxTemp"><summary>The internal temperature at which this part will explode. If skinMaxTemp is not explicitly set, then maxTemp counts for skin temperature too.</summary></member><member name="F:Part.minDepth"></member><member name="F:Part.minimum_drag"><summary>Unused.</summary></member><member name="F:Part.mirrorAxis"></member><member name="F:Part.mirrorRefAxis"></member><member name="F:Part.mirrorVector"></member><member name="F:Part.missionID"><para>a unique number shared by all parts launched together on the same vessel</para><remarks>- A unique identifier assigned to the part when the vessel it is a part of is created. All parts on the vessel get the same missionID and it does not change. Splitting a vessel with a decoupler will result with two vessels whose parts have the same missionID. When two vessels spawned seperately dock, each part keeps its original missionID, undocking does not change this field either.</remarks></member><member name="F:Part.moduleSize"></member><member name="F:Part.needPrefabMass"></member><member name="F:Part.noAutoEVAAny"></member><member name="F:Part.noAutoEVAMulti"></member><member name="F:Part.NoCrossFeedNodeKey"><summary>Specifies the name of a node through which this part will NOT draw resources. See the part.cfg of the  stock tricoupler for an example of using this to prevent fuel from flowing backwards.</summary></member><member name="F:Part.OnEditorAttach"><summary>Add a function to this callback and it will be called when your part is attached to another part in the editor.</summary></member><member name="F:Part.OnEditorDestroy"><summary>Add a function to this callback and it will be called when your part is deleted in the editor.</summary></member><member name="F:Part.OnEditorDetach"><summary>Add a function to this callback and it will be called when your part is detached, or is part of a set of parts that are detached, in the editor.</summary></member><member name="F:Part.OnJustAboutToBeDestroyed"><summary>Add a function to this callback and it will be called when your part is about to be destroyed during flight.</summary></member><member name="F:Part.OnJustAboutToDie"></member><member name="F:Part.orgPos"></member><member name="F:Part.orgRot"></member><member name="F:Part.originalStage"></member><member name="F:Part.overrideSkillUpdate"></member><member name="F:Part.overrideSkillUpdateModules"></member><member name="F:Part.packed"></member><member name="F:Part.parent"><summary>The parent of this part in the part tree: the part to which this part was attached in the editor.</summary></member><member name="F:Part.partBuoyancy"></member><member name="F:Part.partInfo"><summary>Some of the part info that is displayed about this part in the editor.</summary></member><member name="F:Part.partName"><summary>Name of the part in cfg file (may be different in-game)</summary></member><member name="F:Part.partTransform"></member><member name="F:Part.PermanentGroundContact"><para>flags if part is always touching the surface, i.e. a launch clamp.</para></member><member name="F:Part.physicalSignificance"><summary>If physicalSignificance == Part.PhysicalSignificance.NONE, then this part doesn't actually have any physics. In particular, it has no mass, regardless of what its "mass" field is set to, and no drag.</summary></member><member name="F:Part.physicsMass"></member><member name="F:Part.PhysicsSignificance"><summary>Unused?</summary></member><member name="F:Part.posBackup"></member><member name="F:Part.potentialParent"></member><member name="F:Part.prefabMass"></member><member name="F:Part.prefabSize"></member><member name="F:Part.presExplodeChance"><para>Chance per second, i.e. multiplied by fixedDeltaTime</para></member><member name="F:Part.protoModuleCrew"></member><member name="F:Part.protoPartSnapshot"></member><member name="F:Part.ptd"></member><member name="F:Part.radiativeArea"></member><member name="F:Part.radiatorCritical"></member><member name="F:Part.radiatorHeadroom"></member><member name="F:Part.radiatorMax"></member><member name="F:Part.rb"></member><member name="F:Part.recheckShielding"><para>This is the local variant of AlwaysRecheckShielding. If this is false, even if AlwaysRecheckShielding is true, we won&amp;apos;t recheck shielding.</para></member><member name="F:Part.rescaleFactor"><para>This is the scale factor that&amp;apos;s applied after loading. It rescales the model and any nodes. Use to convert from model space to world space.</para></member><member name="F:Part.resourceMass"></member><member name="F:Part.resourcePriorityOffset"></member><member name="F:Part.resourcePriorityUseParentInverseStage"><para>If true, instead of our inverseStage, use parent&amp;apos;s (if not null) inverseStage when reporting res priority</para></member><member name="F:Part.resourceRequestRemainingThreshold"></member><member name="F:Part.resourceTargets"></member><member name="F:Part.resourceThermalMass"></member><member name="F:Part.ResumeState"></member><member name="F:Part.rigidAttachment"></member><member name="F:Part.scaleFactor"><para>This is the scale factor used in the mesh exporter. Use to convert from 3D scene space to model space.</para></member><member name="F:Part.separationIndex"></member><member name="F:Part.showRigidOption"></member><member name="F:Part.skinExposedArea"></member><member name="F:Part.skinExposedAreaFrac"></member><member name="F:Part.skinExposedMassMult"></member><member name="F:Part.skinInternalConductionMult"><summary>Defines how easily heat conducts between this part's skin and the skin of a part directly attached to it.

Default is probably 1.0 (untested). Higher numbers mean more conduction.</summary></member><member name="F:Part.skinMassPerArea"><summary>How much of a part's thermal mass is allocated to be skin. Higher numbers result in more skin thermal mass.

Resulting number ingame is heavily dependant on each individual part's model and thermal mass.</summary></member><member name="F:Part.skinMaxTemp"><summary>The skin temperature at which this part will explode. If this field is not explicitly defined, the skin uses maxTemp instead.</summary></member><member name="F:Part.skinSkinConductionMult"><summary>The skin equivalent of heatConductivity, though this one is a multiplier. Defines how easily heat conducts between this part's skin and the skin of a part directly attached to it.

Default is probably 1.0 (untested). Higher numbers mean more conduction.</summary></member><member name="F:Part.skinTemperature"><summary>The part's current skin temperature in Kelvin. Not a constant - don't set this in a part config file. Use skinMaxTemp instead.</summary></member><member name="F:Part.skinThermalMass"></member><member name="F:Part.skinThermalMassModifier"></member><member name="F:Part.skinThermalMassRecip"></member><member name="F:Part.skinToInternalFlux"><summary>How much heat currently flows between internals and skin. Not a constant - don't set this in a part config file. Use skinInternalConductionMult instead.</summary></member><member name="F:Part.skinUnexposedExternalTemp"><summary>The current ambient temperature around the side of a part which is facing away from the bow shock during reentry, in Kelvin. Not a constant - don't set this in a part config file.</summary></member><member name="F:Part.skinUnexposedMassMult"></member><member name="F:Part.skinUnexposedTemperature"></member><member name="F:Part.skipColliderIgnores"></member><member name="F:Part.srfAttachNode"><summary>IF this part is surface-attached to its parent, srfAttachNode is the attach node describing this connection.</summary></member><member name="F:Part.stackIcon"><summary>The sicon shown for this part in the staging display.</summary></member><member name="F:Part.stackIconGrouping"><para>flag for whether the part is connected to the command pod or not (however indirectly) [Needless to say, this is obsolete logic now)</para></member><member name="F:Part.stackPriThreshold"><para>public bool DEBUG = false;</para></member><member name="F:Part.stackSymmetry"></member><member name="F:Part.stageAfter"></member><member name="F:Part.stageBefore"></member><member name="F:Part.stageOffset"></member><member name="F:Part.stagingIcon"></member><member name="F:Part.stagingIconAlwaysShown"></member><member name="F:Part.stagingOn"></member><member name="F:Part.started"></member><member name="F:Part.state"></member><member name="F:Part.staticPressureAtm"></member><member name="F:Part.strutOffset"></member><member name="F:Part.submergedDragScalar"></member><member name="F:Part.submergedDynamicPressurekPa"></member><member name="F:Part.submergedLiftScalar"></member><member name="F:Part.submergedPortion"></member><member name="F:Part.surfaceAreas"></member><member name="F:Part.surfaceAttachGO"></member><member name="F:Part.symMethod"></member><member name="F:Part.symmetryCounterparts"></member><member name="F:Part.temperature"><summary>The part's current internal temperature in Kelvin. Not a constant - don't set this in a part config file. Use maxTemp instead.</summary></member><member name="F:Part.tempExplodeChance"><para>Chance per second, i.e. multiplied by fixedDeltaTime</para></member><member name="F:Part.terrainCollider"></member><member name="F:Part.thermalConductionFlux"></member><member name="F:Part.thermalConvectionFlux"></member><member name="F:Part.thermalExposedFlux"></member><member name="F:Part.thermalExposedFluxPrevious"></member><member name="F:Part.thermalInternalFlux"></member><member name="F:Part.thermalInternalFluxPrevious"></member><member name="F:Part.thermalMass"></member><member name="F:Part.thermalMassModifier"></member><member name="F:Part.thermalMassReciprocal"></member><member name="F:Part.thermalRadiationFlux"></member><member name="F:Part.thermalSkinFlux"></member><member name="F:Part.thermalSkinFluxPrevious"></member><member name="F:Part.topNode"></member><member name="F:Part.torque"></member><member name="F:Part.vel"></member><member name="F:Part.velBackup"></member><member name="F:Part.vessel"><summary>The vessel to which this part belongs. Beware that vessel == null in the editor.</summary></member><member name="F:Part.vesselType"></member><member name="F:Part.waterAngularDragMultiplier"></member><member name="F:Part.WaterContact"></member><member name="F:Part.allParts"><summary>Return a list of all loaded parts</summary></member><member name="F:Part.AlwaysRecheckShielding"><para>Do we force a recheck of shielding a frame after &lt;ref refid='class_part_1a5e449c9cf56759803c936b4a81ccaed9' kindref='member'&gt;Start()&lt;/ref&gt; finsihes? This is so if a shield was somehow destroyed prior to start and our state is still shielded, we don&amp;apos;t always stay shielded. This one is static, and if false, no parts will do this.</para></member><member name="F:Part.CheckPartG"></member><member name="F:Part.CheckPartPressure"></member><member name="F:Part.CheckPartTemp"></member><member name="F:Part.defaultHighlightFalloff"></member><member name="F:Part.defaultHighlightNone"></member><member name="F:Part.defaultHighlightPart"></member><member name="F:Part.fuelRequestID"></member><member name="F:Part.layerMask"></member><member name="F:Part.reflectedAttributeCache"></member><member name="F:Part.UpgradeStatsDel"></member><member name="P:Part.Actions"><summary>No longer used. Actions are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.ClassID"></member><member name="P:Part.ClassName"></member><member name="P:Part.DragCubes"></member><member name="P:Part.Effects"></member><member name="P:Part.enabled"></member><member name="P:Part.Events"><summary>No longer used. Events are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.Fields"><summary>No longer used. Fields are now part of the PartModules system and all work with them is now done there.</summary></member><member name="P:Part.gameObject"></member><member name="P:Part.hasStagingIcon"></member><member name="P:Part.hideFlags"></member><member name="P:Part.HighlightActive"></member><member name="P:Part.highlighter"></member><member name="P:Part.HighlightRenderer"></member><member name="P:Part.isActiveAndEnabled"></member><member name="P:Part.isAttachable"></member><member name="P:Part.isAttached"><para>Flag for whether the part is directly attached to another (it&amp;apos;s not the same as parent != null because this is also true for root parts)</para></member><member name="P:Part.isCompund"></member><member name="P:Part.isConnected"><summary>Obsolete since 0.14 and no longer working</summary></member><member name="P:Part.isControllable"><para>flag for wether this part will receive an input feed (use this if reading &lt;ref refid='class_flight_input_handler_1ab309a576ff6585b88866641ea108b86b' kindref='member'&gt;FlightInputHandler.state&lt;/ref&gt; directly)</para></member><member name="P:Part.Landed"></member><member name="P:Part.localRoot"></member><member name="P:Part.Modules"><summary>List of PartModules on this part.</summary></member><member name="P:Part.MouseOver"></member><member name="P:Part.name"></member><member name="P:Part.NoAutoEVA"></member><member name="P:Part.orbit"><summary>Don't use this; use Vessel.orbit instead.</summary></member><member name="P:Part.PartAttributes"></member><member name="P:Part.PartValues"></member><member name="P:Part.RecurseHighlight"></member><member name="P:Part.Resources"><summary>A list of the resources contained by this part. You can loop over them with</summary><code>foreach(PartResource resource in part.Resources) { ... }</code></member><member name="P:Part.Rigidbody"><summary>The rigidbody of this part. See the Unity documentation on rigidbodies for more information.</summary></member><member name="P:Part.RigidBodyPart"></member><member name="P:Part.ShieldedFromAirstream"></member><member name="P:Part.Splashed"></member><member name="P:Part.State"></member><member name="P:Part.tag"></member><member name="P:Part.transform"></member><member name="P:Part.useGUILayout"></member><member name="P:Part.WCoM"></member><member name="M:Part.activate(System.Int32,Vessel)"></member><member name="M:Part.AddAttachNode(ConfigNode)"></member><member name="M:Part.addChild(Part)"></member><member name="M:Part.AddCrewmember(ProtoCrewMember)"></member><member name="M:Part.AddCrewmemberAt(ProtoCrewMember,System.Int32)"></member><member name="M:Part.AddExposedThermalFlux(System.Double)"></member><member name="M:Part.AddForce(Vector3d)"><para>Adds force to the part&amp;apos;s (or parent&amp;apos;s up the tree) rb. NOTE: ForceMode == Force. If you want a different mode, convert to ForceMode.Force.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vec&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.AddForceAtPosition(Vector3d,Vector3d)"><para>Adds force to the part&amp;apos;s (or parent&amp;apos;s up the tree) rb, at the specified position. NOTE: ForceMode == Force. If you want a different mode, convert to ForceMode.Force.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vec&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.AddImpulse(Vector3d)"><para>Adds force to the part&amp;apos;s (or parent&amp;apos;s up the tree) rb as an impulse (i.e. divides force by fixedDeltaTime</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vec&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.AddInternalPart(ConfigNode)"></member><member name="M:Part.AddModule(string,System.Boolean)"></member><member name="M:Part.AddModule(ConfigNode,System.Boolean)"></member><member name="M:Part.AddModule(string)"><summary>Add a PartModule to this part. PartModules that are dynamically added to parts and don't exist in the original part.cfg will not be properly restored from persistence.</summary><param name="moduleName">The class name of the PartModule to add, as a string</param><returns>The added PartModule</returns></member><member name="M:Part.AddOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Part.AddOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Part.AddOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Part.AddResource(ConfigNode)"></member><member name="M:Part.AddShield(IAirstreamShield)"></member><member name="M:Part.AddSkinThermalFlux(System.Double)"></member><member name="M:Part.AddThermalFlux(System.Double)"></member><member name="M:Part.AddTorque(Vector3d)"><para>Adds given torque to the part&amp;apos;s (or parent&amp;apos;s up the tree) rb. NOTE: ForceMode == Force. If you want a different mode, convert to ForceMode.Force.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vec&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.AimCamera"></member><member name="M:Part.AllowAutoStruts"></member><member name="M:Part.AlreadyProcessedRequest(System.Int32)"></member><member name="M:Part.ApplyRigidAttachment"></member><member name="M:Part.Awake"><para>&amp;lt; set up modules n stuff</para><para>&amp;lt; set up human readable info</para><para>&amp;lt; set up Resources</para><para>&amp;lt; Set up effects</para><para>&amp;lt; Set up drag cube list</para><para>&amp;lt; Setup up the part highlighter</para><para>&amp;lt; find an airlock node (if any) needs to be in editor too for Engineer&amp;apos;s Report purposes</para></member><member name="M:Part.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.BroadcastMessage(string,object)"></member><member name="M:Part.BroadcastMessage(string)"></member><member name="M:Part.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.CancelInvoke"></member><member name="M:Part.CancelInvoke(string)"></member><member name="M:Part.CanCrossfeed(Part,string,ResourceFlowMode)"></member><member name="M:Part.CanCrossfeed(Part,System.Int32,ResourceFlowMode)"></member><member name="M:Part.ChangeResourcePriority(System.Int32)"></member><member name="M:Part.CheckBodyLiftAttachment"></member><member name="M:Part.CheckCollision(UnityEngine.Collision)"></member><member name="M:Part.checkLanded"></member><member name="M:Part.checkPermanentLandedAt"></member><member name="M:Part.checkSplashed"></member><member name="M:Part.CheckTransferDialog"></member><member name="M:Part.CleanSymmetryReferences"></member><member name="M:Part.CleanSymmetryVesselReferences"></member><member name="M:Part.CleanSymmetryVesselReferencesRecursively"></member><member name="M:Part.clearParent"><para>called by the editor when the selected part is cloned. Use this in stead of setParent(null) to avoid invoking &lt;ref refid='class_game_events_1ad9257e25a335c4ea9a7efd6b3e6c1b7f' kindref='member'&gt;GameEvents.onPartRemove&lt;/ref&gt; in cases where you are not actually removing a part from the ship.</para></member><member name="M:Part.CompareTag(string)"></member><member name="M:Part.Couple(Part)"><para>&amp;lt; also reset all attached and connected flags on both vessels</para><para>&amp;lt; update original positions and rotations in relation to the new vessel root</para><para>&amp;lt; set the target part as parent for old vessel</para><para>&amp;lt; recursively add the parts to the new vessel.</para><para>&amp;lt; promote old vessel to a proper vessel again</para><para>&amp;lt; remove the old vessel definition off the root part</para><para>&amp;lt; update landed status, just to be on the safe side (vessel now points to the new one)</para><para>&amp;lt; reset all collision ignores for this vessel</para></member><member name="M:Part.CreateAttachJoint(AttachModes)"></member><member name="M:Part.CreateInternalModel"></member><member name="M:Part.CycleAutoStrut"></member><member name="M:Part.deactivate"></member><member name="M:Part.decouple(System.Single)"><para>&amp;lt; this part just became a new vessel now</para><para>&amp;lt; Generate fresh UUID.</para><para>&amp;lt; inherit the old vessel&amp;apos;s control state, so if we decouple a live engine for instance, it&amp;apos;ll stay throttled up</para></member><member name="M:Part.DespawnIVA"></member><member name="M:Part.Die"><para>&amp;lt; if this part was the one in ground contact, tell the vessel to check if it&amp;apos;s still landed (through other parts maybe)</para><para>&amp;lt; or if game parameters allow respawning, set them as &amp;quot;missing&amp;quot; instead.</para><para>&amp;lt; Clean up plugin data</para><para>&amp;lt; clear off the part object after everything else is done (unless it is the vessel root, in which case the vessel will handle it)</para></member><member name="M:Part.disconnect(System.Boolean)"></member><member name="M:Part.DrainFuel(System.Single)"><summary>Deprecated. Use Part.TransferResource instead.</summary><param name="amount"/><returns/></member><member name="M:Part.drawStats"></member><member name="M:Part.Effect(string,System.Int32)"></member><member name="M:Part.Effect(string,System.Single,System.Int32)"></member><member name="M:Part.Equals(object)"></member><member name="M:Part.explode"><para>&amp;lt; TODO: Wait for &lt;ref refid='class_f_x_monger' kindref='compound'&gt;FXMonger&lt;/ref&gt; to finish. (Causes infinite loop if done in &lt;ref refid='class_f_x_monger' kindref='compound'&gt;FXMonger&lt;/ref&gt;)</para><remarks>- Calling this causes the part to explode. But you guessed that, didn't you?</remarks></member><member name="M:Part.Finalize"></member><member name="M:Part.FindAttachNode(string)"><para>returns an attachment node that matches the given id name. (a node&amp;apos;s id is the third section of it&amp;apos;s definition in the cfg, or for srfAttach nodes: &amp;apos;srfAttach&amp;apos;)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;nodeId&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The id to look for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>A reference to the attachNode, or null if none is found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.findAttachNode(string)"><summary>Find an AttachNode by its name, as a string.</summary><param name="nodeId">The name of the node to search for. The names of nodes are found in the part.cfg. For instance, node_stack_top describes a node with name "stack_top."</param><returns>The AttachNode of the given name.</returns></member><member name="M:Part.FindAttachNodeByPart(Part)"></member><member name="M:Part.findAttachNodeByPart(Part)"><summary>Given a child part of this part, find the AttachNode representing the connection between this part and that child.</summary><param name="connectedPart">A child part of this part.</param><returns>The AttachNode connecting this part to the given child.</returns></member><member name="M:Part.FindAttachNodes(string)"><para>returns an array of attachNodes, whose ids CONTAIN the given id string. (use this one to get multiple nodes at once, when they have similar ids, like node_stack_top1, node_stack_top2...)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;partialNodeId&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The string to search for in the node ids</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>An array of all nodes found in the search, or null if none is found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.FindChildPart(string)"></member><member name="M:Part.FindChildPart(string,System.Boolean)"></member><member name="M:Part.FindChildPart"></member><member name="M:Part.FindChildPart(System.Boolean)"></member><member name="M:Part.FindChildParts"></member><member name="M:Part.FindChildParts(System.Boolean)"></member><member name="M:Part.FindFuel(Part,System.Collections.Generic.List,System.UInt32)"></member><member name="M:Part.FindFuel(Part,List&lt;Part&gt;,System.UInt32)"><summary>Obsolete - Use Part.GetConnectedResources instead.</summary></member><member name="M:Part.findFxGroup(string)"></member><member name="M:Part.FindModelAnimator(string,string)"></member><member name="M:Part.FindModelAnimator(string)"></member><member name="M:Part.FindModelAnimators(string)"></member><member name="M:Part.FindModelAnimators"></member><member name="M:Part.FindModelComponent"></member><member name="M:Part.FindModelComponent(string)"></member><member name="M:Part.FindModelComponents"></member><member name="M:Part.FindModelComponents(string)"></member><member name="M:Part.FindModelTransform(string)"></member><member name="M:Part.FindModelTransforms(string)"></member><member name="M:Part.FindModuleImplementing"><para>Returns the first ocurrence of a module in this part, if any</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.FindModulesImplementing"><para>Returns all modules of the given part type</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.FindNonPhysicslessChildren(System.Collections.Generic.List)"></member><member name="M:Part.FindNonPhysicslessParent"></member><member name="M:Part.FindPartThroughNodes(Part,Part)"><para>Finds the attachnode (if any) that leads to the given part</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;tgtPart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.FixedUpdate"></member><member name="M:Part.force_activate"><summary>Activates the part now, regardless of when it was scheduled to be activated in the staging order.</summary></member><member name="M:Part.force_activate(System.Boolean)"></member><member name="M:Part.freeze"></member><member name="M:Part.GainCameraAim"></member><member name="M:Part.GetComponent(System.Type)"></member><member name="M:Part.GetComponent"></member><member name="M:Part.GetComponent(string)"></member><member name="M:Part.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Part.GetComponentInChildren(System.Type)"></member><member name="M:Part.GetComponentInChildren"></member><member name="M:Part.GetComponentInChildren(System.Boolean)"></member><member name="M:Part.GetComponentInParent(System.Type)"></member><member name="M:Part.GetComponentInParent"></member><member name="M:Part.GetComponents(System.Type)"></member><member name="M:Part.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Part.GetComponents(List)"></member><member name="M:Part.GetComponents"></member><member name="M:Part.GetComponentsInChildren(System.Type)"></member><member name="M:Part.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Part.GetComponentsInChildren(System.Boolean)"></member><member name="M:Part.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Part.GetComponentsInChildren"></member><member name="M:Part.GetComponentsInChildren(List)"></member><member name="M:Part.GetComponentsInParent(System.Type)"></member><member name="M:Part.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Part.GetComponentsInParent(System.Boolean)"></member><member name="M:Part.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Part.GetComponentsInParent"></member><member name="M:Part.GetConnectedResourceTotals(System.Int32,double&amp;,double&amp;,System.Boolean)"></member><member name="M:Part.GetConnectedResourceTotals(System.Int32,ResourceFlowMode,double&amp;,double&amp;,System.Boolean)"></member><member name="M:Part.GetConnectedResourceTotals(System.Int32,double&amp;,double&amp;,System.Double,System.Boolean)"></member><member name="M:Part.GetConnectedResourceTotals(System.Int32,ResourceFlowMode,double&amp;,double&amp;,System.Double,System.Boolean)"></member><member name="M:Part.GetCrewCountOfExperienceEffect"><para>Will return a count of the number of crew on board the part that have the experience effect that is passed in.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_experience_1_1_experience_effect' kindref='compound'&gt;Experience.ExperienceEffect&lt;/ref&gt; you want a crew count of</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>integer count value</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.GetCrewOfExperienceEffect"><para>Will return a list of the crew on board the part that have the experience effect that is passed in.</para><para>&lt;parameterlist kind='templateparam'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;T&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_experience_1_1_experience_effect' kindref='compound'&gt;Experience.ExperienceEffect&lt;/ref&gt; you want the returned list to contain</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>A list of &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt; type</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.GetHashCode"></member><member name="M:Part.GetInstanceID"></member><member name="M:Part.GetMassivePart(Part,Part[])"></member><member name="M:Part.GetModuleCosts(System.Single,ModifierStagingSituation)"><para>Returns the sum of cost modifications from &lt;ref refid='interface_i_part_cost_modifier' kindref='compound'&gt;IPartCostModifier&lt;/ref&gt; modules.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:Part.GetModuleMass(System.Single,ModifierStagingSituation)"><para>Returns the sum of mass modifications from &lt;ref refid='interface_i_part_mass_modifier' kindref='compound'&gt;IPartMassModifier&lt;/ref&gt; modules.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:Part.GetModuleSize(UnityEngine.Vector3,ModifierStagingSituation)"><para>Returns the sum of size modifications from &lt;ref refid='interface_i_part_size_modifier' kindref='compound'&gt;IPartSizeModifier&lt;/ref&gt; modules.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:Part.GetModuleStartState"></member><member name="M:Part.GetPartColliders"></member><member name="M:Part.GetPhysicslessChildMass"></member><member name="M:Part.GetReferenceTransform"></member><member name="M:Part.GetResourceMass"><summary>The total mass of the resources held by the part. The total mass of the part is</summary><code>mass + GetResourceMass()</code><returns>Total resource mass, in tonnes</returns></member><member name="M:Part.GetResourceMass(float&amp;)"></member><member name="M:Part.GetResourceMass(double&amp;)"></member><member name="M:Part.GetResourcePriority"></member><member name="M:Part.getSymmetryCounterPart(System.Int32)"></member><member name="M:Part.GetType"></member><member name="M:Part.HandleCollision(UnityEngine.Collision)"><para>&amp;lt; first we consider impact speed only. This way very light objects just touching heavy ones won&amp;apos;t go &amp;apos;pop&amp;apos;</para></member><member name="M:Part.HasFreePivot"></member><member name="M:Part.hasIndirectChild(Part)"><para>Returns true if the target part is in the direct hierarchy of this part.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;tgtPart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The part to search for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.hasIndirectParent(Part)"><para>Returns true if the target part is in the direct hierarchy of this part.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;tgtPart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The part to search for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.HasValidContractObjective(string)"></member><member name="M:Part.HeatGaugeUpdate"></member><member name="M:Part.Highlight(System.Boolean)"><para>Manually highlights the part using default hightlighting color</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;active&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Turn hightlight on or off.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.Highlight(UnityEngine.Color)"><para>Manually highlights the part.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;highlightColor&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The highlight color. Use Color.black to unhighlight</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.HighlightRecursive(System.Boolean)"><para>Recursively highlights the part and it&amp;apos;s children (to a lesser degree)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;active&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Turn hightlight on or off.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.HighlightRecursive(UnityEngine.Color)"><para>Recursively highlights the part and it&amp;apos;s children (to a lesser degree)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;highlightColor&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The highlight color. Use Color.black to unhighlight</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.InitializeEffects"></member><member name="M:Part.InitializeModules"></member><member name="M:Part.Invoke(string,System.Single)"></member><member name="M:Part.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Part.IsInvoking(string)"></member><member name="M:Part.IsInvoking"></member><member name="M:Part.isSymmetryCounterPart(Part)"></member><member name="M:Part.LateUpdate"></member><member name="M:Part.LoadEffects(ConfigNode)"></member><member name="M:Part.LoadModule(ConfigNode,int&amp;)"></member><member name="M:Part.LoseCameraAim"></member><member name="M:Part.MemberwiseClone"></member><member name="M:Part.ModulesOnActivate"></member><member name="M:Part.ModulesOnDeactivate"></member><member name="M:Part.ModulesOnFixedUpdate"></member><member name="M:Part.ModulesOnStart"></member><member name="M:Part.ModulesOnStartFinished"></member><member name="M:Part.ModulesOnUpdate"></member><member name="M:Part.onActiveFixedUpdate"><para>called on physics update, when the part is active. use to update active parts, like engines</para></member><member name="M:Part.onActiveUpdate"><para>called on regular update, when the part is active.</para></member><member name="M:Part.onAttach(Part,System.Boolean)"><para>Called by editor logic when the part is attached to the ship. Propagates childward. (parent hierarchy is followed)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;parent&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.onBackup"><para>Called whenever a backup snapshot is created from the ship</para></member><member name="M:Part.OnCollisionEnter(UnityEngine.Collision)"><para>&amp;lt; before handling the collision, check if this collider doesn&amp;apos;t belong to a physicsless part</para></member><member name="M:Part.OnCollisionExit(UnityEngine.Collision)"></member><member name="M:Part.OnCollisionStay(UnityEngine.Collision)"></member><member name="M:Part.OnCopy(Part,System.Boolean)"></member><member name="M:Part.onCopy(Part,System.Boolean)"><para>Called when the part is instantiated as a copy, through Alt+Copy or symmetry</para></member><member name="M:Part.onCtrlUpd(FlightCtrlState)"><para>propagates downwards from the active command pod. will reach every part that is still connected</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;s&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;an object containing the state of all flight controls</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.onDecouple(System.Single)"><para>called when the part is detached from the ship assembly (breakForce &amp;gt; 0 means the part was broken off)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;breakForce&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.OnDelete"></member><member name="M:Part.onDetach(System.Boolean)"><para>Called by editor logic when the part is pulled off the ship. Propagates childward</para></member><member name="M:Part.onDisconnect"><para>called when a parent of this part was detached from the ship</para></member><member name="M:Part.OnDrawStats"><summary>Obsolete("Functional behaviour should really be happening in PartModules now. In any case, this method's been replaced with OnGetStats, where you just return the string."</summary></member><member name="M:Part.onEditorEndTweak"><para>Called when the part finishes getting tweaked in position/rotation on the editor (Mainly for struts).</para></member><member name="M:Part.onEditorStartTweak"><para>Called when the part starts getting tweaked in position/rotation on the editor (Mainly for struts).</para></member><member name="M:Part.onEditorUpdate"><para>called on physics update while the game is at the VAB.</para></member><member name="M:Part.onFlightStart"><para>called when entering flight mode.</para></member><member name="M:Part.onFlightStartAtLaunchPad"><para>called when entering flight mode as a new flight (on the launch pad).</para></member><member name="M:Part.onFlightStateLoad(System.Collections.Generic.Dictionary)"></member><member name="M:Part.onFlightStateSave(System.Collections.Generic.Dictionary)"></member><member name="M:Part.onGamePause"><para>called when the game is paused. use to store values and resume them later</para></member><member name="M:Part.onGameResume"><para>called when the game is resumed back from a pause state. use to restore values saved in onGamePause</para></member><member name="M:Part.OnGetStats"><para>Override to return part-specific stats as a string</para></member><member name="M:Part.onJointDisable"></member><member name="M:Part.onJointReset"></member><member name="M:Part.OnLiftOff"></member><member name="M:Part.OnLoad"></member><member name="M:Part.OnLoad(ConfigNode)"></member><member name="M:Part.onPack"></member><member name="M:Part.onPartActivate"><para>called when the part is activated</para></member><member name="M:Part.onPartAttach(Part)"><para>called when the part is attached to another (in the editor). When this is called all needed attachment operations are completed.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;parent&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the part it&amp;apos;s been attached to</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.onPartAwake"><para>called when the part is first instantiated. Use to overwrite part parameters if needed. Will be called at loading time, and also at each new instance.</para></member><member name="M:Part.onPartDeactivate"><para>called when the active part is deactivated, like an engine when it runs out of fuel</para></member><member name="M:Part.onPartDelete"><para>called when the part is manually deleted on the VAB</para></member><member name="M:Part.onPartDestroy"><para>called when the part&amp;apos;s gameObject is destroyed. use to remove any listeners, or destroy components</para></member><member name="M:Part.onPartDetach"><para>called when the part is detached from the ship (in the editor). When this is called all needed detachment operations are completed.</para></member><member name="M:Part.onPartExplode"><para>called when the part explodes.</para></member><member name="M:Part.onPartFixedUpdate"><para>called on every physics update. use to update passive parts that need to apply forces or use much physics, like winglets or RCS.</para></member><member name="M:Part.OnPartJointBreak(System.Single)"></member><member name="M:Part.onPartLiftOff"></member><member name="M:Part.onPartLoad"><para>called only once, when the part is first loaded into the game. Use to create components, and do stuff that only needs to be done once.</para></member><member name="M:Part.onPartSplashdown"></member><member name="M:Part.onPartStart"><para>called when the unity &lt;ref refid='class_part_1a5e449c9cf56759803c936b4a81ccaed9' kindref='member'&gt;Start()&lt;/ref&gt; method is called.</para></member><member name="M:Part.onPartTouchdown"></member><member name="M:Part.onPartUpdate"><para>Called once per frame. use to update passive parts that don&amp;apos;t affect physics, like radiators or solar panels</para></member><member name="M:Part.OnPointerClick(UnityEngine.EventSystems.PointerEventData)"></member><member name="M:Part.OnSave(ConfigNode)"></member><member name="M:Part.OnSplashDown"></member><member name="M:Part.onStartComplete"><para>called at the end of the start method in all scenes. In flight, this is after rigidbody initialization.</para></member><member name="M:Part.OnTouchDown"></member><member name="M:Part.onUnpack"></member><member name="M:Part.Pack"><para>&amp;lt; disconnected parts are sent to another layer, where they don&amp;apos;t collide with other parts on the same layer</para></member><member name="M:Part.PromoteToPhysicalPart"></member><member name="M:Part.propagateControlUpdate(FlightCtrlState)"><para>&amp;lt; let the part do something with the new control state</para><para>&amp;lt; and forward it to it&amp;apos;s children</para></member><member name="M:Part.RecheckShielding"></member><member name="M:Part.RefreshHighlighter"></member><member name="M:Part.RegisterCrew"></member><member name="M:Part.ReleaseAutoStruts"></member><member name="M:Part.RelinkPrefab"><para>&amp;lt; will only be true during part compilation</para></member><member name="M:Part.removeChild(Part)"></member><member name="M:Part.RemoveCrewmember(ProtoCrewMember)"></member><member name="M:Part.RemoveModule(PartModule)"></member><member name="M:Part.RemoveModules"></member><member name="M:Part.RemoveOnMouseDown(Part+OnActionDelegate)"></member><member name="M:Part.RemoveOnMouseEnter(Part+OnActionDelegate)"></member><member name="M:Part.RemoveOnMouseExit(Part+OnActionDelegate)"></member><member name="M:Part.RemoveResource(PartResource)"></member><member name="M:Part.RemoveResource(string)"></member><member name="M:Part.RemoveResource(System.Int32)"></member><member name="M:Part.RemoveShield(IAirstreamShield)"></member><member name="M:Part.RequestFuel(Part,System.Single,System.UInt32)"></member><member name="M:Part.RequestFuel(Part,System.Single,System.UInt32)"><summary>Deprecated - Use Part.RequestResource instead.</summary><param name="source"/><param name="amount"/><param name="reqId"/><returns/></member><member name="M:Part.RequestRCS(System.Single,System.Int32)"><summary>Deprecated - Use Part.RequestResource instead.</summary><param name="amount"/><param name="earliestStage"/><returns/></member><member name="M:Part.RequestResource(System.Int32,System.Single)"><para>Deprecated, please use double &lt;ref refid='class_part_1a2a7f539166262d87076d676b2ff5b01e' kindref='member'&gt;RequestResource(int, double)&lt;/ref&gt;. Using this may cause rounding issues with fuel flow</para></member><member name="M:Part.RequestResource(string,System.Single)"><para>Deprecated, please use double &lt;ref refid='class_part_1a10a6f20d9a95db41f73899f32e30727a' kindref='member'&gt;RequestResource(string, double)&lt;/ref&gt;. Using this may cause rounding issues with fuel flow</para><remarks>- Takes amount of "demand" from resource "resourceName" in the upper-right resource window.  A positive value of "demand" will decrease the resource, while a negative value for "demand" will increase the resource in the upper-right resource window.</remarks></member><member name="M:Part.RequestResource(System.Int32,System.Double)"></member><member name="M:Part.RequestResource(string,System.Double)"></member><member name="M:Part.RequestResource(System.Int32,System.Double,ResourceFlowMode)"></member><member name="M:Part.RequestResource(string,System.Double,ResourceFlowMode)"></member><member name="M:Part.ResetCamera"></member><member name="M:Part.ResetCollisionIgnores"></member><member name="M:Part.ResetJoints"></member><member name="M:Part.ResetPri"></member><member name="M:Part.ResumeVelocity"><para>Applies the orbital velocity to the rigidbodies on the ship, so that it continues to orbit by physics</para></member><member name="M:Part.SaveEffects(ConfigNode)"></member><member name="M:Part.ScheduleSetCollisionIgnores"></member><member name="M:Part.SendEvent(string)"></member><member name="M:Part.SendEvent(string,BaseEventDetails)"></member><member name="M:Part.SendEvent(string,BaseEventDetails,System.Int32)"></member><member name="M:Part.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessage(string,object)"></member><member name="M:Part.SendMessage(string)"></member><member name="M:Part.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SendMessageUpwards(string,object)"></member><member name="M:Part.SendMessageUpwards(string)"></member><member name="M:Part.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Part.SetCollisionIgnores"></member><member name="M:Part.SetDetectCollisions(System.Boolean)"></member><member name="M:Part.SetHierarchyRoot(Part)"><para>Sets this part as the root of the vessel hierarchy. Will flip parent-child references recursively so that this part becomes the parent for everyone.</para><para>&amp;lt; store the ref to the current parent.</para></member><member name="M:Part.SetHighlight(System.Boolean,System.Boolean)"><para>Set the highlight state manually</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;active&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;If highlight should be on or off</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.SetHighlightColor(UnityEngine.Color)"><para>Sets the highlight colour. Use no color to reset to default</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;color&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Part.SetHighlightColor"><para>Sets the highlight colour to default. Use colour parameter to set the colour.</para></member><member name="M:Part.SetHighlightDefault"><para>Sets the PartHighlight to default settings</para></member><member name="M:Part.SetHighlightType(Part+HighlightType)"><para>Sets the highlight type for this part - default is PartHighlight.HighlightType.OnMouseOver</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;type&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;PartHighlight.HighlightType</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.SetLayer(UnityEngine.GameObject,System.Int32)"></member><member name="M:Part.SetMirror(UnityEngine.Vector3)"></member><member name="M:Part.SetOpacity(System.Single)"><para>set the opacity of the part</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;highlightColor&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The highlight color. Use Color.black to unhighlight</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.setParent(Part)"><para>called by the editor when the part is attached or detached from the ship.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;p&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The parent part if the part is being attached. Null if it&amp;apos;s being detached</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.SetReferenceTransform(UnityEngine.Transform)"></member><member name="M:Part.SetResource(ConfigNode)"></member><member name="M:Part.SetupAttachNodes"></member><member name="M:Part.SetupHighlighter"></member><member name="M:Part.SetupResources"></member><member name="M:Part.SetupRigidAttachmentUI"></member><member name="M:Part.ShowUpgradeStats"></member><member name="M:Part.SpawnIVA"></member><member name="M:Part.SpawnTransferDialog"></member><member name="M:Part.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Part.StartCoroutine(string,object)"></member><member name="M:Part.StartCoroutine(string)"></member><member name="M:Part.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Part.StopAllCoroutines"></member><member name="M:Part.StopCoroutine(string)"></member><member name="M:Part.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Part.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Part.ToggleAutoStrut"><para>&amp;lt; Do not include the &amp;quot;force&amp;quot; enumerations here, we don&amp;apos;t want the user to be able to affect those.</para></member><member name="M:Part.ToggleRigidAttachment"></member><member name="M:Part.ToString"></member><member name="M:Part.TransferResource(System.Int32,System.Double)"><para>Transfer some amount of Resources in or out of this part.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;resourceID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The id of the resource to transfer</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;amount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The amount to transfer (positive for putting, negative for draining)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The amount transferred (positive if drained, negative if put)&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Part.TransferResource(PartResource,System.Double,Part)"><para>Transfer some amount of Resources in or out of this part.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;resource&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The resource to transfer</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;amount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The amount to transfer (positive for putting, negative for draining)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;other&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The other part (the one pushing or pulling)&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The amount transferred (positive if drained, negative if put)&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; return the amount requested - this preserves its precision rather than losing it when the current resource amounts are large&lt;/para&gt;&lt;para&gt;&amp;lt; return the amount requested - this preserves its precision rather than losing it when the current resource amounts are large &lt;/para&gt;</remarks></member><member name="M:Part.Undock(DockedVesselInfo)"><para>&amp;lt; check if the stored root part is still good to be the root part</para><para>&amp;lt; Generate fresh UUID.</para><para>&amp;lt; if this part was the one in ground contact, tell the vessel to check if it&amp;apos;s still landed (through other parts maybe)</para><para>&amp;lt; fallback the reference transform on the old vessel if the one it had got undocked just now.</para></member><member name="M:Part.unfreeze"></member><member name="M:Part.Unpack"></member><member name="M:Part.UnregisterCrew"></member><member name="M:Part.Update"></member><member name="M:Part.UpdateAeroDisplay"></member><member name="M:Part.UpdateAttachNodes"></member><member name="M:Part.UpdateAutoStrut"></member><member name="M:Part.UpdateMass"></member><member name="M:Part.UpdateOrgPosAndRot(Part)"></member><member name="M:Part.UpdateStageability(System.Boolean,System.Boolean)"><para>&amp;lt; does this match our prior state? Note: Default state for everything is stagingOn so</para><para>&amp;lt; notify the module (i.e. so it can change event guinames)</para><para>&amp;lt; run with propagate false, but preserving icon state</para></member><member name="M:Part.ValidateInertiaTensor"></member><member name="M:Part._CheckPartG(Part)"></member><member name="M:Part._CheckPartPressure(Part)"></member><member name="M:Part._CheckPartTemp(Part)"></member><member name="M:Part.FindChildPart(Part,string)"></member><member name="M:Part.FindChildPart(Part)"></member><member name="M:Part.FindChildParts(Part,List)"></member><member name="M:Part.FindHeirarchyTransform(UnityEngine.Transform,string)"></member><member name="M:Part.FindHeirarchyTransforms(UnityEngine.Transform,string,System.Collections.Generic.List)"></member><member name="M:Part.FindModelAnimator(UnityEngine.Transform,string,string)"></member><member name="M:Part.FindModelComponent(UnityEngine.Transform,string)"></member><member name="M:Part.FindModelComponents(UnityEngine.Transform,string,List)"></member><member name="M:Part.FindTransformInChildrenExplicit(UnityEngine.Transform,UnityEngine.Transform)"></member><member name="M:Part.FromGO(UnityEngine.GameObject)"></member><member name="M:Part.GetComponentUpwards(string,UnityEngine.GameObject)"></member><member name="M:Part.GetComponentUpwards(UnityEngine.GameObject)"></member><member name="M:Part.getFuelReqId"></member><member name="M:Part.GetPartsOutTo(Part,System.Collections.Generic.HashSet,System.Int32)"></member><member name="M:Part.GetReflectedAttributes(System.Type)"></member><member name="M:Part.NewRequestID"></member><member name="M:Part.PartToVesselSpaceDir(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"><para>Transform a direction from a part&amp;apos;s local space to vessel-relative space</para></member><member name="M:Part.PartToVesselSpacePos(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"><para>Transform a point from a part&amp;apos;s local space to vessel-relative space</para></member><member name="M:Part.PartToVesselSpaceRot(UnityEngine.Quaternion,Part,Vessel,PartSpaceMode)"><para>Transform a rotation from a part&amp;apos;s local space to vessel-relative space</para></member><member name="M:Part.VesselToPartSpaceDir(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"><para>Transform a direction from vessel-relative space to a part&amp;apos;s local space</para></member><member name="M:Part.VesselToPartSpacePos(UnityEngine.Vector3,Part,Vessel,PartSpaceMode)"><para>Transform a point from vessel-relative space to a part&amp;apos;s local space</para></member><member name="M:Part.VesselToPartSpaceRot(UnityEngine.Quaternion,Part,Vessel,PartSpaceMode)"><para>Transform a rotation from vessel-relative space to a part&amp;apos;s local space</para></member><member name="M:Part.#ctor"></member><member name="T:PartLoader"><para>Singleton class which contains compiles various game objects.</para></member><member name="F:PartLoader.internalParts"><para>List of loaded internal models</para></member><member name="F:PartLoader.internalProps"><para>List of loaded internal props</para></member><member name="F:PartLoader.loadedParts"><para>The list of loaded parts</para><remarks>- For a given part i (int) in partloader instance we can get the part Configuration ConfigNode as
PartLoader.Instance.loadedParts[i].partConfig  (type ConfigNode)
or part url as
PartLoader.Instance.loadedParts[i].partUrl  (type string)

many other methods are available in
PartLoader.Instance.loadedParts[i].
but these I would highlight.</remarks></member><member name="F:PartLoader.parts"></member><member name="P:PartLoader.enabled"></member><member name="P:PartLoader.gameObject"></member><member name="P:PartLoader.hideFlags"></member><member name="P:PartLoader.isActiveAndEnabled"></member><member name="P:PartLoader.name"></member><member name="P:PartLoader.Recompile"></member><member name="P:PartLoader.tag"></member><member name="P:PartLoader.transform"></member><member name="P:PartLoader.useGUILayout"></member><member name="P:PartLoader.Instance"><para>Singleton instance</para></member><member name="P:PartLoader.LoadedPartsList"></member><member name="M:PartLoader.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.BroadcastMessage(string,object)"></member><member name="M:PartLoader.BroadcastMessage(string)"></member><member name="M:PartLoader.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.CancelInvoke"></member><member name="M:PartLoader.CancelInvoke(string)"></member><member name="M:PartLoader.CompareTag(string)"></member><member name="M:PartLoader.Equals(object)"></member><member name="M:PartLoader.Finalize"></member><member name="M:PartLoader.GetComponent(System.Type)"></member><member name="M:PartLoader.GetComponent"></member><member name="M:PartLoader.GetComponent(string)"></member><member name="M:PartLoader.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PartLoader.GetComponentInChildren(System.Type)"></member><member name="M:PartLoader.GetComponentInChildren"></member><member name="M:PartLoader.GetComponentInChildren(System.Boolean)"></member><member name="M:PartLoader.GetComponentInParent(System.Type)"></member><member name="M:PartLoader.GetComponentInParent"></member><member name="M:PartLoader.GetComponents(System.Type)"></member><member name="M:PartLoader.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartLoader.GetComponents(List)"></member><member name="M:PartLoader.GetComponents"></member><member name="M:PartLoader.GetComponentsInChildren(System.Type)"></member><member name="M:PartLoader.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartLoader.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartLoader.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartLoader.GetComponentsInChildren"></member><member name="M:PartLoader.GetComponentsInChildren(List)"></member><member name="M:PartLoader.GetComponentsInParent(System.Type)"></member><member name="M:PartLoader.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartLoader.GetComponentsInParent(System.Boolean)"></member><member name="M:PartLoader.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartLoader.GetComponentsInParent"></member><member name="M:PartLoader.GetDatabaseConfig(Part)"><para>Finds a config in the part database for the given part</para></member><member name="M:PartLoader.GetDatabaseConfig(Part,string)"><para>Finds a config in the part database for the given part with a given subnode name</para></member><member name="M:PartLoader.GetHashCode"></member><member name="M:PartLoader.GetInstanceID"></member><member name="M:PartLoader.GetType"></member><member name="M:PartLoader.Invoke(string,System.Single)"></member><member name="M:PartLoader.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartLoader.IsInvoking(string)"></member><member name="M:PartLoader.IsInvoking"></member><member name="M:PartLoader.IsReady"></member><member name="M:PartLoader.LoadWeight"></member><member name="M:PartLoader.MemberwiseClone"></member><member name="M:PartLoader.ProgressFraction"></member><member name="M:PartLoader.ProgressTitle"></member><member name="M:PartLoader.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.SendMessage(string,object)"></member><member name="M:PartLoader.SendMessage(string)"></member><member name="M:PartLoader.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.SendMessageUpwards(string,object)"></member><member name="M:PartLoader.SendMessageUpwards(string)"></member><member name="M:PartLoader.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartLoader.SetDatabaseConfig(Part,ConfigNode)"><para>Sets a config node for the given part. If the part&amp;apos;s database entry already contains a node of that name it will get replaced.</para></member><member name="M:PartLoader.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartLoader.StartCoroutine(string,object)"></member><member name="M:PartLoader.StartCoroutine(string)"></member><member name="M:PartLoader.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartLoader.StartLoad"></member><member name="M:PartLoader.StopAllCoroutines"></member><member name="M:PartLoader.StopCoroutine(string)"></member><member name="M:PartLoader.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartLoader.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartLoader.ToString"></member><member name="M:PartLoader.ApplyPartValue(Part,ConfigNode+Value)"><para>&amp;lt; parse everything else</para><para>&amp;lt; parse fx node definitions</para><para>&amp;lt; apply sound effects on fx groups</para><para>&amp;lt; apply type-parseable parameters</para></member><member name="M:PartLoader.GetInternalPart(string)"><para>Returns an &lt;ref refid='class_internal_model' kindref='compound'&gt;InternalModel&lt;/ref&gt; by name, null if not found</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartLoader.GetInternalProp(string)"><para>Returns an &lt;ref refid='class_internal_prop' kindref='compound'&gt;InternalProp&lt;/ref&gt; by name, null if not found</para></member><member name="M:PartLoader.getPartInfoByIconPrefab(UnityEngine.GameObject)"><para>Search for an &lt;ref refid='class_available_part' kindref='compound'&gt;AvailablePart&lt;/ref&gt; reference by icon prefab</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;iconPrefab&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the icon prefab on your end</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>the availablePart object on our end, or null if none found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartLoader.getPartInfoByName(string)"><para>Search for an &lt;ref refid='class_available_part' kindref='compound'&gt;AvailablePart&lt;/ref&gt; reference by part name</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;name&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the name of the part you&amp;apos;re looking for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>the availablePart object with the given name, or null if none found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartLoader.getPartInfoByPartPrefab(UnityEngine.GameObject)"><para>Search for an &lt;ref refid='class_available_part' kindref='compound'&gt;AvailablePart&lt;/ref&gt; reference by part prefab</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;partPrefab&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the part prefab on your end</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para>the availablePart object on our end, or null if none found</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartLoader.StripComponent(UnityEngine.GameObject)"></member><member name="M:PartLoader.StripComponent(UnityEngine.GameObject,string,System.Boolean)"></member><member name="M:PartLoader.StripGameObject(UnityEngine.GameObject,string)"></member><member name="M:PartLoader.StripTaggedTransforms(UnityEngine.Transform,string)"></member><member name="M:PartLoader.#ctor"></member><member name="T:PartModule"><summary>Extending PartModule lets you add new functionality to parts. The main class of many plugins will be a subclass of PartModule. See this forum thread for the official instructions on using PartModule:</summary><para>http://forum.kerbalspaceprogram.com/showthread.php/10296-0-15-code-update-PartModule-KSPField-KSPEvent-ConfigNode-and-PartResource</para></member><member name="F:PartModule.isEnabled"></member><member name="F:PartModule.moduleIsEnabled"></member><member name="F:PartModule.moduleName"><summary>The name of the partModule as per the Class name in code. Should never be edited.</summary></member><member name="F:PartModule.overrideStagingIconIfBlank"></member><member name="F:PartModule.resHandler"></member><member name="F:PartModule.showUpgradesInModuleInfo"></member><member name="F:PartModule.snapshot"></member><member name="F:PartModule.stagingDisableText"></member><member name="F:PartModule.stagingEnabled"></member><member name="F:PartModule.stagingEnableText"></member><member name="F:PartModule.stagingToggleEnabledEditor"></member><member name="F:PartModule.stagingToggleEnabledFlight"></member><member name="F:PartModule.upgrades"></member><member name="F:PartModule.upgradesApplied"></member><member name="F:PartModule.upgradesApply"></member><member name="F:PartModule.upgradesAsk"></member><member name="F:PartModule.ApplyUpgradeNodeDel"></member><member name="F:PartModule.ApplyUpgradesDel"></member><member name="F:PartModule.ApplyUpgradesEditorAuto"></member><member name="F:PartModule.exclusives"></member><member name="F:PartModule.FindUpgradesDel"></member><member name="F:PartModule.LoadUpgradesDel"></member><member name="F:PartModule.reflectedAttributeCache"></member><member name="F:PartModule.UpgradesAvailableString"></member><member name="F:PartModule.UpgradesLockedString"></member><member name="P:PartModule.Actions"><summary>A list of KSPActions which can be added to action groups. Generated by KSP from all methods tagged [KSPAction] within the class in code.</summary></member><member name="P:PartModule.ClassID"><summary>A hash of</summary><c>ClassName</c><remarks>?</remarks></member><member name="P:PartModule.ClassName"><summary>In any subclass of PartModule,</summary><c>ClassName</c><remarks>will be the name of the subclass. It gets set by the PartModule loading process.</remarks></member><member name="P:PartModule.enabled"></member><member name="P:PartModule.Events"><summary>A list of KSPEvents, which can be triggered by code or by the user through the part's right-click menu. Generated by KSP from all methods tagged [KSPEvent] within the class in code.</summary></member><member name="P:PartModule.Fields"><summary>A list of the KSPFields which the module loads from the part.cfg file. Generated by KSP from all methods tagged [KSPField] within the class in code.</summary></member><member name="P:PartModule.gameObject"></member><member name="P:PartModule.GUIName"></member><member name="P:PartModule.hideFlags"></member><member name="P:PartModule.isActiveAndEnabled"></member><member name="P:PartModule.ModuleAttributes"></member><member name="P:PartModule.name"></member><member name="P:PartModule.part"><summary>The Part to which this PartModule is attached. Use this to reference the part from your module code.</summary></member><member name="P:PartModule.tag"></member><member name="P:PartModule.transform"></member><member name="P:PartModule.useGUILayout"></member><member name="P:PartModule.vessel"><summary>The Vessel of the Part to which this PartModule is attached.</summary></member><member name="M:PartModule.AppliedUpgrades"><para>Returns true if upgrades are applied</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PartModule.ApplyUpgradeNode(System.Collections.Generic.List,ConfigNode,System.Boolean)"></member><member name="M:PartModule.ApplyUpgrades(PartModule+StartState)"><para>Will find and apply upgrades. Called during &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt;&amp;apos;s ModulesOnStart, before a module&amp;apos;s OnStart.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks><para>&amp;lt; yeah a bit garbagey but whatever.</para></member><member name="M:PartModule.Awake"></member><member name="M:PartModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.BroadcastMessage(string,object)"></member><member name="M:PartModule.BroadcastMessage(string)"></member><member name="M:PartModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.CancelInvoke"></member><member name="M:PartModule.CancelInvoke(string)"></member><member name="M:PartModule.CompareTag(string)"></member><member name="M:PartModule.Copy(PartModule)"></member><member name="M:PartModule.Equals(object)"></member><member name="M:PartModule.Finalize"></member><member name="M:PartModule.FindUpgrades(System.Boolean,ConfigNode)"><para>Find applicable upgrades to the partmodule (isunlocked and isenabled) and add to the upgradesApplied list. Pass true if you want to add the upgrades to upgradesApplied, false if you just want to know if at least one upgrade is applicable (unlocked rather than enabled)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fillApplied&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks><para>&amp;lt; refresh upgrades list</para><para>&amp;lt; If there&amp;apos;s nothing to apply, bail out.</para></member><member name="M:PartModule.GetComponent(System.Type)"></member><member name="M:PartModule.GetComponent"></member><member name="M:PartModule.GetComponent(string)"></member><member name="M:PartModule.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PartModule.GetComponentInChildren(System.Type)"></member><member name="M:PartModule.GetComponentInChildren"></member><member name="M:PartModule.GetComponentInChildren(System.Boolean)"></member><member name="M:PartModule.GetComponentInParent(System.Type)"></member><member name="M:PartModule.GetComponentInParent"></member><member name="M:PartModule.GetComponents(System.Type)"></member><member name="M:PartModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartModule.GetComponents(List)"></member><member name="M:PartModule.GetComponents"></member><member name="M:PartModule.GetComponentsInChildren(System.Type)"></member><member name="M:PartModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartModule.GetComponentsInChildren"></member><member name="M:PartModule.GetComponentsInChildren(List)"></member><member name="M:PartModule.GetComponentsInParent(System.Type)"></member><member name="M:PartModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartModule.GetComponentsInParent(System.Boolean)"></member><member name="M:PartModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartModule.GetComponentsInParent"></member><member name="M:PartModule.GetHashCode"></member><member name="M:PartModule.GetInfo"><para>Returns formatted string of additional data for use in the VAB and SPH</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>- The return value of this function appears in the part's description in the editor.</remarks><returns>Editor info for the part</returns></member><member name="M:PartModule.GetInstanceID"></member><member name="M:PartModule.GetModuleDisplayName"><para>Override this to provide a Localized version of the PartModules Name for UI components</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PartModule.GetStagingDisableText"></member><member name="M:PartModule.GetStagingEnableText"></member><member name="M:PartModule.GetType"></member><member name="M:PartModule.GetUpgrade(string)"></member><member name="M:PartModule.GetUpgradeInfo"><para>Called by Upgrade Stats dialog</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PartModule.HasUpgrades"><para>Returns true if upgrades exist for the partmodule</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PartModule.Invoke(string,System.Single)"></member><member name="M:PartModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartModule.IsInvoking(string)"></member><member name="M:PartModule.IsInvoking"></member><member name="M:PartModule.IsStageable"><para>Should this module be counted when seeing whether to have a stack icon present? Override in a module for custom behavior; otherwise returns true if the module (or something the module inherits from above &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt; itself) overrides &lt;ref refid='class_part_module_1ac07319a028fb17f959e1b732dd6b4709' kindref='member'&gt;OnActive()&lt;/ref&gt;</para></member><member name="M:PartModule.IsValidContractObjective(string)"><para>Returns if, for example, an antenna part module qualifies as an antenna for contracts.</para></member><member name="M:PartModule.Load(ConfigNode)"><summary>Where data is loaded from the persistence file. This is the same config node that the Save method passes for retrieving data. Differences between this an OnLoad are unknown.</summary></member><member name="M:PartModule.LoadUpgrades(ConfigNode)"><para>Loads module-relevant upgrades from the partmodule confignode</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PartModule.LoadUpgradesApplied(System.Collections.Generic.List,ConfigNode)"></member><member name="M:PartModule.MemberwiseClone"></member><member name="M:PartModule.OnActive"><para>Called when the part is set active (after unpacking etc)</para><remarks>- This function is called once when the part gets activated.</remarks></member><member name="M:PartModule.OnAwake"><para>Method fires once the module has been added to the part. Use for first time setup. Module will not have loaded fully by this point</para><remarks>- This function gets called only once, during the KSP loading screen. See the Unity documentation on Awake for more information.</remarks></member><member name="M:PartModule.OnCopy(PartModule)"><para>Use OnCopy to copy any additional data from the &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fromModule&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PartModule.OnFixedUpdate"><para>Called every physics/fixed frame that the part is active</para><remarks>- This function gets called once every Unity FixedUpdate cycle (once per physics frame) once the part has been activated (staged).  If you want to be called even if the part has not been activated, define a function called</remarks><c>void FixedUpdate()</c><remarks>instead of overriding OnFixedUpdate   See the Unity documentation on FixedUpdate for more information. You can get the time between FixedUpdates from  TimeWarp.fixedDeltaTime. Do any physics stuff in OnFixedUpdate, not OnUpdate.</remarks></member><member name="M:PartModule.OnIconCreate"><para>Method fires just before components are stripped from the gameobject to make it an icon. (The part is instantiated and then various components like &lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt;, &lt;ref refid='class_part_module' kindref='compound'&gt;PartModule&lt;/ref&gt;, &lt;ref refid='class_effect_behaviour' kindref='compound'&gt;EffectBehaviour&lt;/ref&gt;, Colliders, Particles, etc are stripped and then it&amp;apos;s set as the icon prefab. This lets PartModules do stuff to the model right before that happens.</para></member><member name="M:PartModule.OnInactive"><para>Called before the part goes inactive (after packing etc)</para><remarks>- When does this get called?</remarks></member><member name="M:PartModule.OnInitialize"><para>Called on all modules after all parts are loaded but before they give the ship to the game</para></member><member name="M:PartModule.OnLoad(ConfigNode)"><para>Use OnLoad to load any additional data from the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- This function is called to initialize the part. The ConfigNode contains the parameters of the module as specified in the part.cfg file, or as you last saved them in OnSave.</remarks><param name="node">A ConfigNode containing the module's parameters from part.cfg or persistent.sfs</param></member><member name="M:PartModule.OnSave(ConfigNode)"><para>Use OnSave to serialize additional module information into the &lt;ref refid='class_config_node' kindref='compound'&gt;ConfigNode&lt;/ref&gt; provided</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- This function is called when the game is saved to let the part save persistent data. Add any data you want to persist to the ConfigNode. The ConfigNode will then be saved as part of persistent.sfs. When the game is resumed, you can then read this data back out in OnLoad.</remarks><param name="node"/></member><member name="M:PartModule.OnStart(PartModule+StartState)"><para>Called when the part starts. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- Called when the flight starts, or when the part is created in the editor. OnStart will be called before OnUpdate or OnFixedUpdate are ever called.  

Caution: Depending on which scene you are moving to/from, this method may be called before or after OnLoad, be careful of your data handling.</remarks><param name="state">Some information about what situation the vessel is starting in.</param></member><member name="M:PartModule.OnStartFinished(PartModule+StartState)"><para>Called when the part finishes starting. The StartState gives an indication of where in flight you are. All values may not be plugged in!</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;state&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PartModule.OnUpdate"><para>Called every frame that the part is active</para><remarks>- Called once per Unity Update cycle once the part has been activated (staged).  If you want to be called even if the part has not been activated, define a function called</remarks><c>void Update()</c><remarks>instead of overriding OnFixedUpdate.   See the Unity documentation on Update for more information. Poll for user input in OnUpdate, not OnFixedUpdate.</remarks></member><member name="M:PartModule.PrintUpgrades"></member><member name="M:PartModule.Save(ConfigNode)"><summary>Save data to persistence file. Difference between this method and OnSave is unknown.</summary></member><member name="M:PartModule.SaveUpgradesApplied(ConfigNode)"><para>Save the applied upgrades.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PartModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessage(string,object)"></member><member name="M:PartModule.SendMessage(string)"></member><member name="M:PartModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SendMessageUpwards(string,object)"></member><member name="M:PartModule.SendMessageUpwards(string)"></member><member name="M:PartModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartModule.SetStaging(System.Boolean)"><para>Run by the part&amp;apos;s staging toggle handler, sets staging on modules on symmetry counterparts.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;newValue&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PartModule.StagingEnabled"><para>Gets current staging status (is staging enabled for this module) Override me!</para><para>&lt;simplesect kind='return'&gt;<para>True iff staging enabled for this module</para>&lt;/simplesect&gt;</para></member><member name="M:PartModule.StagingToggleEnabledEditor"></member><member name="M:PartModule.StagingToggleEnabledFlight"></member><member name="M:PartModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartModule.StartCoroutine(string,object)"></member><member name="M:PartModule.StartCoroutine(string)"></member><member name="M:PartModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartModule.StopAllCoroutines"></member><member name="M:PartModule.StopCoroutine(string)"></member><member name="M:PartModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartModule.ToggleStaging"></member><member name="M:PartModule.ToString"></member><member name="M:PartModule.UpdateStagingToggle"><para>Updates the staging toggle</para></member><member name="M:PartModule.UpgradeWaitForScenarioModules"></member><member name="M:PartModule.GetReflectedAttributes(System.Type)"></member><member name="M:PartModule.UpgradesAvailable(Part)"><para>Returns true if at least one module on the part has at least one upgrade available (isUnlocked)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;part&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; to get stats for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;</remarks><para/><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartModule.UpgradesAvailable(Part,ConfigNode)"><para>Returns true if at least one module on the part has at least one upgrade available (isUnlocked)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;part&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; to get stats for</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Upgrades node to use - if null then use existing loaded config&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:PartModule.#ctor"></member><member name="T:PartResource"><summary>A PartResource object represents the store of a single type of resource within a Part.</summary></member><member name="F:PartResource._flowMode"></member><member name="F:PartResource._flowState"></member><member name="F:PartResource.amount"><summary>How much of the resource is in this part, in whatever units the resource uses.</summary></member><member name="F:PartResource.flowMode"></member><member name="F:PartResource.flowState"></member><member name="F:PartResource.hideFlow"></member><member name="F:PartResource.info"><summary>The definition of this type of resource, which contains all information about this resource type.</summary></member><member name="F:PartResource.isTweakable"></member><member name="F:PartResource.isVisible"></member><member name="F:PartResource.maxAmount"><summary>The maximum amount of this resource that this part can hold.</summary></member><member name="F:PartResource.part"><summary>The part whose stored resource this object represents</summary></member><member name="F:PartResource.resourceName"><summary>The name of this resource, as a string, e.g. "ElectricCharge"</summary></member><member name="P:PartResource.flowMode"></member><member name="P:PartResource.flowState"></member><member name="M:PartResource.CanProvide(System.Double)"></member><member name="M:PartResource.CanProvide(System.Boolean)"></member><member name="M:PartResource.Copy(PartResource)"></member><member name="M:PartResource.Equals(object)"></member><member name="M:PartResource.Finalize"></member><member name="M:PartResource.Flowing(System.Boolean)"></member><member name="M:PartResource.GetHashCode"></member><member name="M:PartResource.GetInfo"></member><member name="M:PartResource.GetType"></member><member name="M:PartResource.Load(ConfigNode)"><para>&amp;lt; if the part defines a tweakable setting, go with the one from the node, else go by the default of the resource definition</para><para>&amp;lt; if the part defines a visibility setting, go with the one from the node, else go by the default of the resource definition</para><remarks>-</remarks></member><member name="M:PartResource.MemberwiseClone"></member><member name="M:PartResource.Save(ConfigNode)"></member><member name="M:PartResource.SetInfo(PartResourceDefinition)"></member><member name="M:PartResource.ToString"></member><member name="M:PartResource.#ctor(Part)"></member><member name="M:PartResource.#ctor(PartResource)"></member><member name="M:PartResource.#ctor"></member><member name="T:PartResourceDefinition"><summary>A PartResourceDefinition contains the basic information defining a type of resource.

It is used by opening a RESOURCE_DEFINITION { } top level node in a config file.</summary></member><member name="P:PartResourceDefinition.abbreviation"></member><member name="P:PartResourceDefinition.color"></member><member name="P:PartResourceDefinition.Config"></member><member name="P:PartResourceDefinition.density"><summary>The mass of this resource, per "unit". This is not necessarily per unit volume, as resources don't have defined volumes. Instead resource "density" is the mass of one of this resource.</summary></member><member name="P:PartResourceDefinition.displayName"></member><member name="P:PartResourceDefinition.id"><summary>The integer ID of this resource type.</summary></member><member name="P:PartResourceDefinition.isTweakable"><summary>Whether or not the player can change in the editor how much of this resource is pre-loaded into a part. (E.g. adding ore to ore tanks which by default start empty.)</summary></member><member name="P:PartResourceDefinition.isVisible"><summary>Whether or not this resource is visible in the rightclick menu of the part at any time.</summary></member><member name="P:PartResourceDefinition.name"><summary>The string ID of this resource type. It is the thing you use everywhere else to identify this specific resource.</summary></member><member name="P:PartResourceDefinition.resourceFlowMode"><summary>How this resource does or does not flow between parts on a ship in response to resource requests by engines and the like.</summary></member><member name="P:PartResourceDefinition.resourceTransferMode"><summary>How this resource does or does not flow when using the resource transfer function?</summary></member><member name="P:PartResourceDefinition.specificHeatCapacity"></member><member name="P:PartResourceDefinition.unitCost"></member><member name="P:PartResourceDefinition.volume"><summary>Not used by stock KSP as of yet (see density), but present for modding support.</summary></member><member name="M:PartResourceDefinition.Equals(object)"></member><member name="M:PartResourceDefinition.Finalize"></member><member name="M:PartResourceDefinition.GetHashCode"></member><member name="M:PartResourceDefinition.GetShortName(System.Int32)"></member><member name="M:PartResourceDefinition.GetType"></member><member name="M:PartResourceDefinition.Load(ConfigNode)"></member><member name="M:PartResourceDefinition.MemberwiseClone"></member><member name="M:PartResourceDefinition.Save(ConfigNode)"></member><member name="M:PartResourceDefinition.ToString"></member><member name="M:PartResourceDefinition.#ctor"></member><member name="M:PartResourceDefinition.#ctor(string)"></member><member name="M:PartResourceDefinition.#ctor(string,UnityEngine.Color)"></member><member name="T:PartResourceLibrary"><summary>The PartResourceLibrary lets you retrieve information about a resource type, given its name or integer id.</summary></member><member name="F:PartResourceLibrary.resourceDefinitions"></member><member name="F:PartResourceLibrary.resourceExtension"></member><member name="F:PartResourceLibrary.resourcePath"></member><member name="F:PartResourceLibrary.ElectricityHashcode"></member><member name="P:PartResourceLibrary.enabled"></member><member name="P:PartResourceLibrary.gameObject"></member><member name="P:PartResourceLibrary.hideFlags"></member><member name="P:PartResourceLibrary.isActiveAndEnabled"></member><member name="P:PartResourceLibrary.name"></member><member name="P:PartResourceLibrary.tag"></member><member name="P:PartResourceLibrary.transform"></member><member name="P:PartResourceLibrary.useGUILayout"></member><member name="P:PartResourceLibrary.Instance"><summary>Use this instance to access the methods of this class</summary></member><member name="M:PartResourceLibrary.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string,object)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string)"></member><member name="M:PartResourceLibrary.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.CancelInvoke"></member><member name="M:PartResourceLibrary.CancelInvoke(string)"></member><member name="M:PartResourceLibrary.CompareTag(string)"></member><member name="M:PartResourceLibrary.Equals(object)"></member><member name="M:PartResourceLibrary.Finalize"></member><member name="M:PartResourceLibrary.GetComponent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponent"></member><member name="M:PartResourceLibrary.GetComponent(string)"></member><member name="M:PartResourceLibrary.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentInChildren(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentInChildren"></member><member name="M:PartResourceLibrary.GetComponentInChildren(System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentInParent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentInParent"></member><member name="M:PartResourceLibrary.GetComponents(System.Type)"></member><member name="M:PartResourceLibrary.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PartResourceLibrary.GetComponents(List)"></member><member name="M:PartResourceLibrary.GetComponents"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PartResourceLibrary.GetComponentsInChildren"></member><member name="M:PartResourceLibrary.GetComponentsInChildren(List)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Type)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Boolean)"></member><member name="M:PartResourceLibrary.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PartResourceLibrary.GetComponentsInParent"></member><member name="M:PartResourceLibrary.GetDefinition(string)"><summary>Gets information about a resource, specified by its name as a string.</summary><param name="name">The name of the resource, e.g. "ElectricCharge"</param><returns>A PartResourceDefinition, which contains all the information about the resource</returns></member><member name="M:PartResourceLibrary.GetDefinition(System.Int32)"><summary>Gets information about a resource, specified by its integer ID.</summary><param name="id">The integer ID of the resource</param><returns>A PartResourceDefinition, which contains all the information about the resource</returns></member><member name="M:PartResourceLibrary.GetHashCode"></member><member name="M:PartResourceLibrary.GetInstanceID"></member><member name="M:PartResourceLibrary.GetType"></member><member name="M:PartResourceLibrary.Invoke(string,System.Single)"></member><member name="M:PartResourceLibrary.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PartResourceLibrary.IsInvoking(string)"></member><member name="M:PartResourceLibrary.IsInvoking"></member><member name="M:PartResourceLibrary.LoadDefinitions"></member><member name="M:PartResourceLibrary.MemberwiseClone"></member><member name="M:PartResourceLibrary.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessage(string,object)"></member><member name="M:PartResourceLibrary.SendMessage(string)"></member><member name="M:PartResourceLibrary.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,object)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string)"></member><member name="M:PartResourceLibrary.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PartResourceLibrary.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StartCoroutine(string,object)"></member><member name="M:PartResourceLibrary.StartCoroutine(string)"></member><member name="M:PartResourceLibrary.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StopAllCoroutines"></member><member name="M:PartResourceLibrary.StopCoroutine(string)"></member><member name="M:PartResourceLibrary.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PartResourceLibrary.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PartResourceLibrary.ToString"></member><member name="M:PartResourceLibrary.GetDefaultFlowMode(string)"></member><member name="M:PartResourceLibrary.GetDefaultFlowMode(System.Int32)"></member><member name="M:PartResourceLibrary.#ctor"></member><member name="T:PatchedConicSolver"><summary>Each vessel has a PatchedConicSolver, which stores the predicted patched conics trajectory and any maneuver nodes that currently exist.</summary></member><member name="F:PatchedConicSolver.debug_disableEscapeCheck"></member><member name="F:PatchedConicSolver.flightPlan"></member><member name="F:PatchedConicSolver.GeoSolverIterations"></member><member name="F:PatchedConicSolver.maneuverNodes"><summary>A list of the maneuver nodes that are currently planned for this vessel.</summary></member><member name="F:PatchedConicSolver.maxGeometrySolverIterations"></member><member name="F:PatchedConicSolver.maxTimeSolverIterations"></member><member name="F:PatchedConicSolver.maxTotalPatches"></member><member name="F:PatchedConicSolver.MorePatchesAhead"></member><member name="F:PatchedConicSolver.obtDriver"></member><member name="F:PatchedConicSolver.outerReaches"></member><member name="F:PatchedConicSolver.patches"></member><member name="F:PatchedConicSolver.patchesAhead"></member><member name="F:PatchedConicSolver.targetBody"></member><member name="F:PatchedConicSolver.TimeSolverIterations1"></member><member name="F:PatchedConicSolver.TimeSolverIterations2"></member><member name="P:PatchedConicSolver.enabled"></member><member name="P:PatchedConicSolver.gameObject"></member><member name="P:PatchedConicSolver.hideFlags"></member><member name="P:PatchedConicSolver.isActiveAndEnabled"></member><member name="P:PatchedConicSolver.LastActivePatch"></member><member name="P:PatchedConicSolver.name"></member><member name="P:PatchedConicSolver.orbit"></member><member name="P:PatchedConicSolver.tag"></member><member name="P:PatchedConicSolver.transform"></member><member name="P:PatchedConicSolver.useGUILayout"></member><member name="M:PatchedConicSolver.AddManeuverNode(System.Double)"><summary>Add a maneuver node to the flight plan.</summary><param name="UT">The universal time of the maneuver node.</param><returns>A reference to the maneuver node</returns></member><member name="M:PatchedConicSolver.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string,object)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string)"></member><member name="M:PatchedConicSolver.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.CancelInvoke"></member><member name="M:PatchedConicSolver.CancelInvoke(string)"></member><member name="M:PatchedConicSolver.CompareTag(string)"></member><member name="M:PatchedConicSolver.DecreasePatchLimit"></member><member name="M:PatchedConicSolver.Equals(object)"></member><member name="M:PatchedConicSolver.Finalize"></member><member name="M:PatchedConicSolver.FindPatchContainingUT(System.Double)"></member><member name="M:PatchedConicSolver.GetComponent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponent"></member><member name="M:PatchedConicSolver.GetComponent(string)"></member><member name="M:PatchedConicSolver.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentInChildren(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentInChildren"></member><member name="M:PatchedConicSolver.GetComponentInChildren(System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentInParent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentInParent"></member><member name="M:PatchedConicSolver.GetComponents(System.Type)"></member><member name="M:PatchedConicSolver.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PatchedConicSolver.GetComponents(List)"></member><member name="M:PatchedConicSolver.GetComponents"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PatchedConicSolver.GetComponentsInChildren"></member><member name="M:PatchedConicSolver.GetComponentsInChildren(List)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Type)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Boolean)"></member><member name="M:PatchedConicSolver.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PatchedConicSolver.GetComponentsInParent"></member><member name="M:PatchedConicSolver.GetHashCode"></member><member name="M:PatchedConicSolver.GetInstanceID"></member><member name="M:PatchedConicSolver.GetType"></member><member name="M:PatchedConicSolver.IncreasePatchLimit"></member><member name="M:PatchedConicSolver.Invoke(string,System.Single)"></member><member name="M:PatchedConicSolver.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PatchedConicSolver.IsInvoking(string)"></member><member name="M:PatchedConicSolver.IsInvoking"></member><member name="M:PatchedConicSolver.Load(ConfigNode)"></member><member name="M:PatchedConicSolver.MemberwiseClone"></member><member name="M:PatchedConicSolver.RemoveManeuverNode(ManeuverNode)"><para>&amp;lt; wipe the flightplan list here if the last node was removed.</para><remarks>- Remove a maneuver node from the flight plane.</remarks><param name="node">The maneuver node to be removed.</param><remarks>As of 1.1 thios causes graphics glitches - use</remarks><see cref="ManeuverNode.RemoveSelf()"/></member><member name="M:PatchedConicSolver.Save(ConfigNode)"></member><member name="M:PatchedConicSolver.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessage(string,object)"></member><member name="M:PatchedConicSolver.SendMessage(string)"></member><member name="M:PatchedConicSolver.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,object)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string)"></member><member name="M:PatchedConicSolver.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PatchedConicSolver.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StartCoroutine(string,object)"></member><member name="M:PatchedConicSolver.StartCoroutine(string)"></member><member name="M:PatchedConicSolver.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StopAllCoroutines"></member><member name="M:PatchedConicSolver.StopCoroutine(string)"></member><member name="M:PatchedConicSolver.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PatchedConicSolver.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PatchedConicSolver.ToString"></member><member name="M:PatchedConicSolver.Update"></member><member name="M:PatchedConicSolver.UpdateFlightPlan"></member><member name="M:PatchedConicSolver.#ctor"></member><member name="T:PatchedConics"></member><member name="F:PatchedConics.CalculatePatch"></member><member name="F:PatchedConics.CheckEncounter"></member><member name="F:PatchedConics.EncountersBody"></member><member name="F:PatchedConics.GetClosestApproach"></member><member name="F:PatchedConics.ScreenCast"></member><member name="F:PatchedConics.ScreenCastWorker"></member><member name="M:PatchedConics.Equals(object)"></member><member name="M:PatchedConics.Finalize"></member><member name="M:PatchedConics.GetHashCode"></member><member name="M:PatchedConics.GetType"></member><member name="M:PatchedConics.MemberwiseClone"></member><member name="M:PatchedConics.ToString"></member><member name="M:PatchedConics._CalculatePatch(Orbit,Orbit,System.Double,PatchedConics+SolverParameters,CelestialBody)"><para>&amp;lt; open orbits have infinite periods</para></member><member name="M:PatchedConics._CheckEncounter(Orbit,Orbit,System.Double,OrbitDriver,CelestialBody,PatchedConics+SolverParameters)"><para>&amp;lt; rule out orbits without a closest passage within threshold</para></member><member name="M:PatchedConics._EncountersBody(Orbit,Orbit,Orbit,OrbitDriver,System.Double,PatchedConics+SolverParameters)"></member><member name="M:PatchedConics._GetClosestApproach(Orbit,Orbit,System.Double,System.Double,PatchedConics+SolverParameters)"></member><member name="M:PatchedConics._ScreenCast(UnityEngine.Vector3,System.Collections.Generic.List,PatchedConics+PatchCastHit&amp;,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics._ScreenCastWorker(UnityEngine.Vector3,PatchRendering,PatchedConics+PatchCastHit&amp;,System.Single,System.Boolean)"></member><member name="M:PatchedConics.AngleWrap(System.Double)"></member><member name="M:PatchedConics.CalculatePatch(Orbit,Orbit,System.Double,PatchedConics.SolverParameters,CelestialBody)"></member><member name="M:PatchedConics.ScreenCast(Vector3,List&lt;PatchRendering&gt;,PatchedConics.PatchCastHit,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.ScreenCast(Vector3,PatchRendering,PatchedConics.PatchCastHit,System.Single,System.Double,System.Boolean)"></member><member name="M:PatchedConics.TAIsWithinPatchBounds(System.Double,Orbit)"></member><member name="M:PatchedConics.#ctor"></member><member name="T:PhysicsGlobals"></member><member name="F:PhysicsGlobals.VesselRangesDefault"></member><member name="F:PhysicsGlobals.GraviticForceMultiplier"></member><member name="F:PhysicsGlobals.SurfaceCurves"></member><member name="P:PhysicsGlobals.enabled"></member><member name="P:PhysicsGlobals.gameObject"></member><member name="P:PhysicsGlobals.hideFlags"></member><member name="P:PhysicsGlobals.isActiveAndEnabled"></member><member name="P:PhysicsGlobals.name"></member><member name="P:PhysicsGlobals.tag"></member><member name="P:PhysicsGlobals.transform"></member><member name="P:PhysicsGlobals.useGUILayout"></member><member name="P:PhysicsGlobals.AeroDataDisplay"></member><member name="P:PhysicsGlobals.AeroForceDisplay"></member><member name="P:PhysicsGlobals.AeroForceDisplayScale"></member><member name="P:PhysicsGlobals.AeroFXDensityExponent1"><summary>One of four variables involved in calculating how much air density is required to get aero effects. (scalar1 * density^exponent1 + scalar2 * density^exponent2). Before messing with this one, play with AeroFXDensityFadeStart and AeroFXVelocityExponent first, and see if you can get your desired effect that way. It's way less complicated.</summary></member><member name="P:PhysicsGlobals.AeroFXDensityExponent2"><summary>See AeroFXDensityExponent1.</summary></member><member name="P:PhysicsGlobals.AeroFXDensityFadeStart"><summary>The smaller this number is, the less air density is required for reentry FX to play (starts further up in the atmosphere). Change by orders of magnitude to see a visible difference.</summary></member><member name="P:PhysicsGlobals.AeroFXDensityScalar1"><summary>See AeroFXDensityExponent1.</summary></member><member name="P:PhysicsGlobals.AeroFXDensityScalar2"><summary>See AeroFXDensityExponent1.</summary></member><member name="P:PhysicsGlobals.AeroFXFullThermalFX"><summary>The speed (as a mach number) at which condensation X (white stuff) finishes changing into plasma FX (red stuff). Increasing this will make planes less likely to be sheathed in fire during high-speed flight... but reentering spacecraft lose their plasma trail higher up.</summary></member><member name="P:PhysicsGlobals.AeroFXMachFXFadeEnd"><summary>Below this air density, you can never get any condensation FX (white stuff). You can still get plasma FX (red stuff); which is unaffected.</summary></member><member name="P:PhysicsGlobals.AeroFXMachFXFadeStart"><summary>Below this air density, condensation FX (white stuff) will begin to fade out. But only if it is still playing. Plasma FX (red stuff) is unaffected.</summary></member><member name="P:PhysicsGlobals.AeroFXStartThermalFX"><summary>The speed (as a mach number) at which condensation X (white stuff) starts changing into plasma FX (red stuff). Increasing this will make planes less likely to be sheathed in fire during high-speed flight... but reentering spacecraft lose their plasma trail higher up.</summary></member><member name="P:PhysicsGlobals.AeroFXVelocityExponent"><summary>The higher this number is, the less speed is required is required for reentry FX to show up. This is how KSP fudges a plasma trail into existence at the slow orbital velocities around its downsized planets. For upscaled planets, reduce this number. It is very sensitive - small changes have a major impact.</summary></member><member name="P:PhysicsGlobals.AeroGUIDisplay"></member><member name="P:PhysicsGlobals.AnalyticConvectionSensitivityBase"></member><member name="P:PhysicsGlobals.AnalyticConvectionSensitivityFinal"></member><member name="P:PhysicsGlobals.AnalyticLerpRateInternal"></member><member name="P:PhysicsGlobals.AnalyticLerpRateSkin"></member><member name="P:PhysicsGlobals.AngularDragMultiplier"></member><member name="P:PhysicsGlobals.ApplyDrag"></member><member name="P:PhysicsGlobals.ApplyDragToNonPhysicsParts"></member><member name="P:PhysicsGlobals.ApplyDragToNonPhysicsPartsAtParentCoM"></member><member name="P:PhysicsGlobals.AutoStrutDisplay"></member><member name="P:PhysicsGlobals.AutoStrutTechRequired"></member><member name="P:PhysicsGlobals.AvogadroConstant"></member><member name="P:PhysicsGlobals.BlackBodyRadiation"></member><member name="P:PhysicsGlobals.BlackBodyRadiationAlphaMult"></member><member name="P:PhysicsGlobals.BlackBodyRadiationMax"></member><member name="P:PhysicsGlobals.BlackBodyRadiationMin"></member><member name="P:PhysicsGlobals.BodyLiftCurve"></member><member name="P:PhysicsGlobals.BodyLiftMultiplier"></member><member name="P:PhysicsGlobals.BoltzmannConstant"></member><member name="P:PhysicsGlobals.BuildingEasingInvulnerableTime"></member><member name="P:PhysicsGlobals.BuildingImpactDamageMaxVelocityMult"></member><member name="P:PhysicsGlobals.BuildingImpactDamageUseMomentum"></member><member name="P:PhysicsGlobals.BuoyancyAngularDragMinControlSqrMag"></member><member name="P:PhysicsGlobals.BuoyancyApplyForceOnDie"></member><member name="P:PhysicsGlobals.BuoyancyCrashToleranceMult"></member><member name="P:PhysicsGlobals.BuoyancyDefaultVolume"></member><member name="P:PhysicsGlobals.BuoyancyForceOffsetLerp"></member><member name="P:PhysicsGlobals.BuoyancyKerbals"></member><member name="P:PhysicsGlobals.BuoyancyKerbalsRagdoll"></member><member name="P:PhysicsGlobals.BuoyancyMinCrashMult"></member><member name="P:PhysicsGlobals.BuoyancyRange"></member><member name="P:PhysicsGlobals.BuoyancyScalar"></member><member name="P:PhysicsGlobals.BuoyancyScaleAboveDepth"></member><member name="P:PhysicsGlobals.BuoyancyUseCoBOffset"></member><member name="P:PhysicsGlobals.BuoyancyWaterAngularDragScalar"></member><member name="P:PhysicsGlobals.BuoyancyWaterAngularDragSlow"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragExtraRBDragAboveDot"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragMinVel"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragMinVelMult"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragMinVelMultCOBOff"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragMultMinForMinDot"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragPartVelGreaterVesselMult"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragScalar"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragScalarEnd"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragScalarLerp"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragScalarLerpDotMult"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragScalarLerpDotMultBase"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragSlow"></member><member name="P:PhysicsGlobals.BuoyancyWaterDragTimer"></member><member name="P:PhysicsGlobals.BuoyancyWaterLiftScalarEnd"></member><member name="P:PhysicsGlobals.CameraDepthToUnlock"></member><member name="P:PhysicsGlobals.CelestialBodyTargetingMode"></member><member name="P:PhysicsGlobals.CommNetBlackoutThreshold"></member><member name="P:PhysicsGlobals.CommNetDensityForBlackout"></member><member name="P:PhysicsGlobals.CommNetDotForBlackoutMax"></member><member name="P:PhysicsGlobals.CommNetDotForBlackoutMin"></member><member name="P:PhysicsGlobals.CommNetQTimesVelForBlackoutMax"></member><member name="P:PhysicsGlobals.CommNetQTimesVelForBlackoutMin"></member><member name="P:PhysicsGlobals.CommNetTempForBlackout"></member><member name="P:PhysicsGlobals.ConductionFactor"></member><member name="P:PhysicsGlobals.ConvectionFactorSplashed"></member><member name="P:PhysicsGlobals.DragCubeMultiplier"></member><member name="P:PhysicsGlobals.DragCubesUseSpherical"></member><member name="P:PhysicsGlobals.DragCurveCd"></member><member name="P:PhysicsGlobals.DragCurveCdPower"></member><member name="P:PhysicsGlobals.DragCurveMultiplier"></member><member name="P:PhysicsGlobals.DragCurvePseudoReynolds"></member><member name="P:PhysicsGlobals.DragCurveSurface"></member><member name="P:PhysicsGlobals.DragCurveTail"></member><member name="P:PhysicsGlobals.DragCurveTip"></member><member name="P:PhysicsGlobals.DragMultiplier"></member><member name="P:PhysicsGlobals.DragUsesAcceleration"></member><member name="P:PhysicsGlobals.FullConvectionAreaMin"></member><member name="P:PhysicsGlobals.FullToCrossSectionLerpEnd"></member><member name="P:PhysicsGlobals.FullToCrossSectionLerpStart"></member><member name="P:PhysicsGlobals.IdealGasConstant"></member><member name="P:PhysicsGlobals.Instance"></member><member name="P:PhysicsGlobals.InternalHeatProductionFactor"></member><member name="P:PhysicsGlobals.JointBreakForceFactor"></member><member name="P:PhysicsGlobals.JointBreakTorqueFactor"></member><member name="P:PhysicsGlobals.JointForce"></member><member name="P:PhysicsGlobals.KerbalCrewMass"></member><member name="P:PhysicsGlobals.KerbalEVADragCube"></member><member name="P:PhysicsGlobals.KerbalEVADragCubeString"></member><member name="P:PhysicsGlobals.KerbalGBadMult"></member><member name="P:PhysicsGlobals.KerbalGBraveMult"></member><member name="P:PhysicsGlobals.KerbalGClamp"></member><member name="P:PhysicsGlobals.KerbalGClampGExperienced"></member><member name="P:PhysicsGlobals.KerbalGDecayPower"></member><member name="P:PhysicsGlobals.KerbalGLOCBaseTime"></member><member name="P:PhysicsGlobals.KerbalGLOCMaxTimeIncrement"></member><member name="P:PhysicsGlobals.KerbalGLOCTimeMult"></member><member name="P:PhysicsGlobals.KerbalGOffset"></member><member name="P:PhysicsGlobals.KerbalGPower"></member><member name="P:PhysicsGlobals.KerbalGThresholdLOC"></member><member name="P:PhysicsGlobals.KerbalGThresholdWarn"></member><member name="P:PhysicsGlobals.KpaToAtmospheres"></member><member name="P:PhysicsGlobals.LiftDragMultiplier"></member><member name="P:PhysicsGlobals.LiftingSurfaceCurves"></member><member name="P:PhysicsGlobals.LiftMultiplier"></member><member name="P:PhysicsGlobals.MachConvectionDensityExponent"></member><member name="P:PhysicsGlobals.MachConvectionFactor"></member><member name="P:PhysicsGlobals.MachConvectionVelocityExponent"></member><member name="P:PhysicsGlobals.MachTemperatureScalar"></member><member name="P:PhysicsGlobals.MachTemperatureVelocityExponent"></member><member name="P:PhysicsGlobals.MaxAngularVelocity"></member><member name="P:PhysicsGlobals.NewtonianConvectionFactorBase"></member><member name="P:PhysicsGlobals.NewtonianConvectionFactorTotal"></member><member name="P:PhysicsGlobals.NewtonianDensityExponent"></member><member name="P:PhysicsGlobals.NewtonianMachTempLerpEndMach"></member><member name="P:PhysicsGlobals.NewtonianMachTempLerpExponent"></member><member name="P:PhysicsGlobals.NewtonianMachTempLerpStartMach"></member><member name="P:PhysicsGlobals.NewtonianTemperatureFactor"></member><member name="P:PhysicsGlobals.NewtonianVelocityExponent"></member><member name="P:PhysicsGlobals.OcclusionMinStep"></member><member name="P:PhysicsGlobals.OrbitDriftAltThreshold"></member><member name="P:PhysicsGlobals.OrbitDriftFramesToWait"></member><member name="P:PhysicsGlobals.OrbitDriftSqrThreshold"></member><member name="P:PhysicsGlobals.PhysicsDatabaseFilename"></member><member name="P:PhysicsGlobals.RadiationFactor"></member><member name="P:PhysicsGlobals.RigidJointBreakForceFactor"></member><member name="P:PhysicsGlobals.RigidJointBreakTorqueFactor"></member><member name="P:PhysicsGlobals.ShieldedConductionFactor"></member><member name="P:PhysicsGlobals.ShowRigidJointTweakable"></member><member name="P:PhysicsGlobals.SkinInternalConductionFactor"></member><member name="P:PhysicsGlobals.SkinSkinConductionFactor"></member><member name="P:PhysicsGlobals.SolarInsolationAtHome"></member><member name="P:PhysicsGlobals.SolarLuminosity"></member><member name="P:PhysicsGlobals.SolarLuminosityAtHome"></member><member name="P:PhysicsGlobals.SpaceTemperature"></member><member name="P:PhysicsGlobals.StagingCooldownTimer"></member><member name="P:PhysicsGlobals.StandardSpecificHeatCapacity"></member><member name="P:PhysicsGlobals.StefanBoltzmanConstant"></member><member name="P:PhysicsGlobals.TemperatureGaugeHighlightThreshold"></member><member name="P:PhysicsGlobals.TemperatureGaugeThreshold"></member><member name="P:PhysicsGlobals.TemperaturePropertyID"></member><member name="P:PhysicsGlobals.ThermalColorsDebug"></member><member name="P:PhysicsGlobals.ThermalConductionEnabled"></member><member name="P:PhysicsGlobals.ThermalConvectionEnabled"></member><member name="P:PhysicsGlobals.ThermalConvergenceFactor"></member><member name="P:PhysicsGlobals.ThermalDataDisplay"></member><member name="P:PhysicsGlobals.ThermalIntegrationAlwaysRK2"></member><member name="P:PhysicsGlobals.ThermalIntegrationHighMaxPasses"></member><member name="P:PhysicsGlobals.ThermalIntegrationHighMinPasses"></member><member name="P:PhysicsGlobals.ThermalIntegrationMaxTimeOnePass"></member><member name="P:PhysicsGlobals.ThermalIntegrationMinStep"></member><member name="P:PhysicsGlobals.ThermalMaxIntegrationWarp"></member><member name="P:PhysicsGlobals.ThermalRadiationEnabled"></member><member name="P:PhysicsGlobals.ThermoGUIDisplay"></member><member name="P:PhysicsGlobals.TurbulentConvectionEnd"></member><member name="P:PhysicsGlobals.TurbulentConvectionMult"></member><member name="P:PhysicsGlobals.TurbulentConvectionStart"></member><member name="M:PhysicsGlobals.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.BroadcastMessage(string,object)"></member><member name="M:PhysicsGlobals.BroadcastMessage(string)"></member><member name="M:PhysicsGlobals.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.CalculateValues"></member><member name="M:PhysicsGlobals.CancelInvoke"></member><member name="M:PhysicsGlobals.CancelInvoke(string)"></member><member name="M:PhysicsGlobals.CompareTag(string)"></member><member name="M:PhysicsGlobals.Equals(object)"></member><member name="M:PhysicsGlobals.Finalize"></member><member name="M:PhysicsGlobals.GetComponent(System.Type)"></member><member name="M:PhysicsGlobals.GetComponent"></member><member name="M:PhysicsGlobals.GetComponent(string)"></member><member name="M:PhysicsGlobals.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentInChildren(System.Type)"></member><member name="M:PhysicsGlobals.GetComponentInChildren"></member><member name="M:PhysicsGlobals.GetComponentInChildren(System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentInParent(System.Type)"></member><member name="M:PhysicsGlobals.GetComponentInParent"></member><member name="M:PhysicsGlobals.GetComponents(System.Type)"></member><member name="M:PhysicsGlobals.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PhysicsGlobals.GetComponents(List)"></member><member name="M:PhysicsGlobals.GetComponents"></member><member name="M:PhysicsGlobals.GetComponentsInChildren(System.Type)"></member><member name="M:PhysicsGlobals.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentsInChildren(System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PhysicsGlobals.GetComponentsInChildren"></member><member name="M:PhysicsGlobals.GetComponentsInChildren(List)"></member><member name="M:PhysicsGlobals.GetComponentsInParent(System.Type)"></member><member name="M:PhysicsGlobals.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentsInParent(System.Boolean)"></member><member name="M:PhysicsGlobals.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PhysicsGlobals.GetComponentsInParent"></member><member name="M:PhysicsGlobals.GetHashCode"></member><member name="M:PhysicsGlobals.GetInstanceID"></member><member name="M:PhysicsGlobals.GetType"></member><member name="M:PhysicsGlobals.Invoke(string,System.Single)"></member><member name="M:PhysicsGlobals.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PhysicsGlobals.IsInvoking(string)"></member><member name="M:PhysicsGlobals.IsInvoking"></member><member name="M:PhysicsGlobals.LoadDatabase"><para>&amp;lt; yes this will add a few extra curves for GC to erase</para></member><member name="M:PhysicsGlobals.MemberwiseClone"></member><member name="M:PhysicsGlobals.SaveDatabase"></member><member name="M:PhysicsGlobals.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.SendMessage(string,object)"></member><member name="M:PhysicsGlobals.SendMessage(string)"></member><member name="M:PhysicsGlobals.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.SendMessageUpwards(string,object)"></member><member name="M:PhysicsGlobals.SendMessageUpwards(string)"></member><member name="M:PhysicsGlobals.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PhysicsGlobals.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PhysicsGlobals.StartCoroutine(string,object)"></member><member name="M:PhysicsGlobals.StartCoroutine(string)"></member><member name="M:PhysicsGlobals.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PhysicsGlobals.StopAllCoroutines"></member><member name="M:PhysicsGlobals.StopCoroutine(string)"></member><member name="M:PhysicsGlobals.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PhysicsGlobals.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PhysicsGlobals.ToString"></member><member name="M:PhysicsGlobals.DragCurveValue(PhysicsGlobals+SurfaceCurvesList,System.Single,System.Single)"><para>Gets the surface drag curve value for the given normalized dot face and mach number</para></member><member name="M:PhysicsGlobals.GetBlackBodyRadiation(System.Single,Part)"></member><member name="M:PhysicsGlobals.GetLiftingSurfaceCurve(string)"></member><member name="M:PhysicsGlobals.#ctor"></member><member name="T:Planetarium"><summary>Probably the most useful function here is Planetarium.GetUniversalTime().</summary></member><member name="F:Planetarium.CurrentMainBody"><summary>Presumably, the main body of the active vessel?</summary></member><member name="F:Planetarium.fixedDeltaTime"></member><member name="F:Planetarium.Home"><para>kerbin</para></member><member name="F:Planetarium.inverseRotAngle"></member><member name="F:Planetarium.orbits"></member><member name="F:Planetarium.pause"></member><member name="F:Planetarium.rotation"></member><member name="F:Planetarium.Sun"><summary>The CelestialBody representing the Sun.</summary></member><member name="F:Planetarium.time"></member><member name="F:Planetarium.timeScale"></member><member name="F:Planetarium.zUpRotation"></member><member name="F:Planetarium.fetch"><summary>Use this instance to access non-static fields.</summary></member><member name="F:Planetarium.Zup"></member><member name="P:Planetarium.enabled"></member><member name="P:Planetarium.gameObject"></member><member name="P:Planetarium.hideFlags"></member><member name="P:Planetarium.isActiveAndEnabled"></member><member name="P:Planetarium.name"></member><member name="P:Planetarium.tag"></member><member name="P:Planetarium.transform"></member><member name="P:Planetarium.useGUILayout"></member><member name="P:Planetarium.forward"><summary>Along with "up" and "right," one of the three vectors defining the fixed celestial reference frame.</summary></member><member name="P:Planetarium.InverseRotAngle"></member><member name="P:Planetarium.Orbits"></member><member name="P:Planetarium.Pause"></member><member name="P:Planetarium.right"><summary>Along with "up" and "forward," one of the three vectors defining the fixed celestial reference frame. The LAN (longitude of the ascending node) of every orbit is defined in reference to Planetarium.right. Specifically, the LAN is the angle between Planetarium.right and the orbit's ascending node, as viewed along Planetarium.up.</summary></member><member name="P:Planetarium.Rotation"></member><member name="P:Planetarium.TimeScale"></member><member name="P:Planetarium.up"><summary>Along with "right" and "forward," one of the three vectors defining the fixed celestial reference frame. As of 0.23.5, all planet rotation axes are aligned with Planetarium.up.</summary></member><member name="P:Planetarium.ZupRotation"></member><member name="M:Planetarium.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.BroadcastMessage(string,object)"></member><member name="M:Planetarium.BroadcastMessage(string)"></member><member name="M:Planetarium.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.CancelInvoke"></member><member name="M:Planetarium.CancelInvoke(string)"></member><member name="M:Planetarium.CompareTag(string)"></member><member name="M:Planetarium.Equals(object)"></member><member name="M:Planetarium.Finalize"></member><member name="M:Planetarium.GetComponent(System.Type)"></member><member name="M:Planetarium.GetComponent"></member><member name="M:Planetarium.GetComponent(string)"></member><member name="M:Planetarium.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Planetarium.GetComponentInChildren(System.Type)"></member><member name="M:Planetarium.GetComponentInChildren"></member><member name="M:Planetarium.GetComponentInChildren(System.Boolean)"></member><member name="M:Planetarium.GetComponentInParent(System.Type)"></member><member name="M:Planetarium.GetComponentInParent"></member><member name="M:Planetarium.GetComponents(System.Type)"></member><member name="M:Planetarium.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Planetarium.GetComponents(List)"></member><member name="M:Planetarium.GetComponents"></member><member name="M:Planetarium.GetComponentsInChildren(System.Type)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Boolean)"></member><member name="M:Planetarium.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Planetarium.GetComponentsInChildren"></member><member name="M:Planetarium.GetComponentsInChildren(List)"></member><member name="M:Planetarium.GetComponentsInParent(System.Type)"></member><member name="M:Planetarium.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Planetarium.GetComponentsInParent(System.Boolean)"></member><member name="M:Planetarium.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Planetarium.GetComponentsInParent"></member><member name="M:Planetarium.GetHashCode"></member><member name="M:Planetarium.GetInstanceID"></member><member name="M:Planetarium.GetType"></member><member name="M:Planetarium.Invoke(string,System.Single)"></member><member name="M:Planetarium.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Planetarium.IsInvoking(string)"></member><member name="M:Planetarium.IsInvoking"></member><member name="M:Planetarium.MemberwiseClone"></member><member name="M:Planetarium.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessage(string,object)"></member><member name="M:Planetarium.SendMessage(string)"></member><member name="M:Planetarium.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.SendMessageUpwards(string,object)"></member><member name="M:Planetarium.SendMessageUpwards(string)"></member><member name="M:Planetarium.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Planetarium.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StartCoroutine(string,object)"></member><member name="M:Planetarium.StartCoroutine(string)"></member><member name="M:Planetarium.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StopAllCoroutines"></member><member name="M:Planetarium.StopCoroutine(string)"></member><member name="M:Planetarium.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Planetarium.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Planetarium.ToString"></member><member name="M:Planetarium.UpdateCBs"><para>Force an update of the celestial bodies without modifing the current time.</para></member><member name="M:Planetarium.FrameIsRotating"><summary>Presumably, whether the game is currently using a rotating frame for physics (as opposed to an unrotating inertial frame).  Below a certain altitude (CelestialBody.inverseRot</summary><returns/></member><member name="M:Planetarium.GetUniversalTime"><summary>The simulation time, in seconds, since this save was started.</summary><returns>Universal time, in seconds</returns></member><member name="M:Planetarium.SetUniversalTime(System.Double)"></member><member name="M:Planetarium.SphericalVector(System.Double,System.Double)"><para>Create a Z-up (ie, right-handed) vector pointing in the direction.</para></member><member name="M:Planetarium.ZupAtT(System.Double,CelestialBody,Planetarium+CelestialFrame&amp;)"></member><member name="M:Planetarium.#ctor"></member><member name="T:PlanetariumCamera"><summary>A class related to the map view camera.</summary></member><member name="F:PlanetariumCamera.AbortExternalControl"></member><member name="F:PlanetariumCamera.cameraWobbleSensitivity"></member><member name="F:PlanetariumCamera.camHdg"></member><member name="F:PlanetariumCamera.camPitch"></member><member name="F:PlanetariumCamera.endHeading"></member><member name="F:PlanetariumCamera.initialTarget"></member><member name="F:PlanetariumCamera.maxDistance"></member><member name="F:PlanetariumCamera.maxPitch"></member><member name="F:PlanetariumCamera.minDistance"></member><member name="F:PlanetariumCamera.minHeight"></member><member name="F:PlanetariumCamera.minHeightAtMaxDist"></member><member name="F:PlanetariumCamera.minHeightAtMinDist"></member><member name="F:PlanetariumCamera.minPitch"></member><member name="F:PlanetariumCamera.mode"></member><member name="F:PlanetariumCamera.orbitSensitivity"></member><member name="F:PlanetariumCamera.pivotTranslateSharpness"></member><member name="F:PlanetariumCamera.sharpness"></member><member name="F:PlanetariumCamera.startDistance"></member><member name="F:PlanetariumCamera.style"></member><member name="F:PlanetariumCamera.TabSwitchTargets"></member><member name="F:PlanetariumCamera.target"></member><member name="F:PlanetariumCamera.targetHeading"></member><member name="F:PlanetariumCamera.targets"></member><member name="F:PlanetariumCamera.zoomScaleFactor"></member><member name="F:PlanetariumCamera.fetch"><summary>Use this instance to access non-static members of this class.</summary></member><member name="P:PlanetariumCamera.Distance"></member><member name="P:PlanetariumCamera.enabled"></member><member name="P:PlanetariumCamera.gameObject"></member><member name="P:PlanetariumCamera.hideFlags"></member><member name="P:PlanetariumCamera.isActiveAndEnabled"></member><member name="P:PlanetariumCamera.name"></member><member name="P:PlanetariumCamera.pivotRotation"></member><member name="P:PlanetariumCamera.tag"></member><member name="P:PlanetariumCamera.transform"></member><member name="P:PlanetariumCamera.useGUILayout"></member><member name="P:PlanetariumCamera.Camera"><summary>This is the Camera that looks at the planetarium scene. See the Unity documentation on Camera to see what you can do with this object.</summary></member><member name="P:PlanetariumCamera.fetch"></member><member name="M:PlanetariumCamera.Activate"></member><member name="M:PlanetariumCamera.AddTarget(MapObject)"></member><member name="M:PlanetariumCamera.AddTarget(Transform)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,object)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string)"></member><member name="M:PlanetariumCamera.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.CancelInvoke"></member><member name="M:PlanetariumCamera.CancelInvoke(string)"></member><member name="M:PlanetariumCamera.CompareTag(string)"></member><member name="M:PlanetariumCamera.Deactivate"></member><member name="M:PlanetariumCamera.Equals(object)"></member><member name="M:PlanetariumCamera.Finalize"></member><member name="M:PlanetariumCamera.FindNearestTarget"></member><member name="M:PlanetariumCamera.findNearestTarget"></member><member name="M:PlanetariumCamera.GetCameraTransform"></member><member name="M:PlanetariumCamera.GetComponent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponent"></member><member name="M:PlanetariumCamera.GetComponent(string)"></member><member name="M:PlanetariumCamera.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentInChildren(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentInChildren"></member><member name="M:PlanetariumCamera.GetComponentInChildren(System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentInParent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentInParent"></member><member name="M:PlanetariumCamera.GetComponents(System.Type)"></member><member name="M:PlanetariumCamera.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:PlanetariumCamera.GetComponents(List)"></member><member name="M:PlanetariumCamera.GetComponents"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:PlanetariumCamera.GetComponentsInChildren"></member><member name="M:PlanetariumCamera.GetComponentsInChildren(List)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Type)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Boolean)"></member><member name="M:PlanetariumCamera.GetComponentsInParent(System.Boolean,List)"></member><member name="M:PlanetariumCamera.GetComponentsInParent"></member><member name="M:PlanetariumCamera.GetHashCode"></member><member name="M:PlanetariumCamera.GetInstanceID"></member><member name="M:PlanetariumCamera.getPitch"></member><member name="M:PlanetariumCamera.GetPivot"></member><member name="M:PlanetariumCamera.getReferenceFrame"></member><member name="M:PlanetariumCamera.GetTarget(System.Int32)"></member><member name="M:PlanetariumCamera.GetTargetIndex(string)"></member><member name="M:PlanetariumCamera.GetType"></member><member name="M:PlanetariumCamera.getYaw"></member><member name="M:PlanetariumCamera.IKSPCamera.get_enabled"></member><member name="M:PlanetariumCamera.Invoke(string,System.Single)"></member><member name="M:PlanetariumCamera.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:PlanetariumCamera.IsInvoking(string)"></member><member name="M:PlanetariumCamera.IsInvoking"></member><member name="M:PlanetariumCamera.MemberwiseClone"></member><member name="M:PlanetariumCamera.OnNavigatorHandoff"></member><member name="M:PlanetariumCamera.OnNavigatorRequestControl"><para>Called before the device takes control of camera input. Return true to allow the device to have control, or false to deny it.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PlanetariumCamera.OnNavigatorTakeOver(Callback)"><para>Called when the device is about to take control of camera input. Return a method to be used to check whether the camera should receive control again. Also if necessary to get control back immediately, you can call the provided callback parameter.</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:PlanetariumCamera.onVesselSwitching(Vessel,Vessel)"><para>&amp;lt; remove old target after adding the new one so as to avoid target becoming null (and defaulting to something else) during the switch</para></member><member name="M:PlanetariumCamera.RemoveTarget(MapObject)"></member><member name="M:PlanetariumCamera.RemoveTarget(Transform)"></member><member name="M:PlanetariumCamera.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessage(string,object)"></member><member name="M:PlanetariumCamera.SendMessage(string)"></member><member name="M:PlanetariumCamera.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,object)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string)"></member><member name="M:PlanetariumCamera.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:PlanetariumCamera.SetCamCoordsFromPosition(UnityEngine.Vector3)"><para>Set the camera&amp;apos;s coordinates (camPitch, camHdg) from the given worldspace position &lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;pos&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PlanetariumCamera.SetDistance(System.Single)"></member><member name="M:PlanetariumCamera.SetTarget(CelestialBody)"></member><member name="M:PlanetariumCamera.SetTarget(string)"></member><member name="M:PlanetariumCamera.SetTarget(System.Int32)"></member><member name="M:PlanetariumCamera.SetTarget(MapObject)"><para>&amp;lt; find the active target and focus it</para></member><member name="M:PlanetariumCamera.setTarget(System.Int32)"></member><member name="M:PlanetariumCamera.setTarget(Transform)"></member><member name="M:PlanetariumCamera.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StartCoroutine(string,object)"></member><member name="M:PlanetariumCamera.StartCoroutine(string)"></member><member name="M:PlanetariumCamera.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StopAllCoroutines"></member><member name="M:PlanetariumCamera.StopCoroutine(string)"></member><member name="M:PlanetariumCamera.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:PlanetariumCamera.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:PlanetariumCamera.ToString"></member><member name="M:PlanetariumCamera.#ctor"></member><member name="T:PositionTarget"><para>Via Sarbian with permission</para><remarks>- Virtual point in space used to create a virtual target for a vessel.
This object can be moved, like a real space object using Update() method.
This target can be used by SAS system.</remarks></member><member name="M:PositionTarget.Equals(object)"></member><member name="M:PositionTarget.Finalize"></member><member name="M:PositionTarget.GetActiveTargetable"></member><member name="M:PositionTarget.GetDisplayName"></member><member name="M:PositionTarget.GetFwdVector"></member><member name="M:PositionTarget.GetHashCode"></member><member name="M:PositionTarget.GetName"><summary>Name of the PositionTarget</summary></member><member name="M:PositionTarget.GetObtVelocity"></member><member name="M:PositionTarget.GetOrbit"></member><member name="M:PositionTarget.GetOrbitDriver"></member><member name="M:PositionTarget.GetSrfVelocity"></member><member name="M:PositionTarget.GetTargetingMode"></member><member name="M:PositionTarget.GetTransform"></member><member name="M:PositionTarget.GetType"></member><member name="M:PositionTarget.GetVessel"></member><member name="M:PositionTarget.MemberwiseClone"></member><member name="M:PositionTarget.ToString"></member><member name="M:PositionTarget.Update(CelestialBody,System.Double,System.Double)"></member><member name="M:PositionTarget.Update(CelestialBody,System.Double,System.Double,System.Double)"></member><member name="M:PositionTarget.Update(Vector3d)"><para>Call this every frame to make sure the target transform stays up to date</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;position&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:PositionTarget.#ctor(string)"><summary>Create a new PositionTarget</summary></member><member name="T:ProceduralAsteroid"><summary>Generates an asteroid shape</summary></member><member name="F:ProceduralAsteroid.radius"><summary>The desired reference surface of the asteroid mesh</summary></member><member name="P:ProceduralAsteroid.enabled"></member><member name="P:ProceduralAsteroid.gameObject"></member><member name="P:ProceduralAsteroid.hideFlags"></member><member name="P:ProceduralAsteroid.isActiveAndEnabled"></member><member name="P:ProceduralAsteroid.name"></member><member name="P:ProceduralAsteroid.tag"></member><member name="P:ProceduralAsteroid.transform"></member><member name="P:ProceduralAsteroid.useGUILayout"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,object)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string)"></member><member name="M:ProceduralAsteroid.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.CancelInvoke"></member><member name="M:ProceduralAsteroid.CancelInvoke(string)"></member><member name="M:ProceduralAsteroid.CompareTag(string)"></member><member name="M:ProceduralAsteroid.Equals(object)"></member><member name="M:ProceduralAsteroid.Finalize"></member><member name="M:ProceduralAsteroid.Generate(System.Int32,System.Single,UnityEngine.Transform,System.Func,Callback,System.Boolean)"></member><member name="M:ProceduralAsteroid.Generate(System.Int32,System.Single,Transform)"><summary>Initializes a randomly generated asteroid shape</summary><param name="'seed'">Used to randomize the mesh</param><param name="'radius'">The desired reference surface of the asteroid mesh</param><param name="'parent'">The reference frame in which the asteroid is to be oriented</param><remarks>Note:</remarks><paramref name="parent"/><remarks>may not be null, even though UnityEngine.Transforms 	are usually allowed to have null parents.</remarks><returns>An object containing all relevant meshes and key statistics</returns></member><member name="M:ProceduralAsteroid.GetComponent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponent"></member><member name="M:ProceduralAsteroid.GetComponent(string)"></member><member name="M:ProceduralAsteroid.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentInChildren(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentInChildren"></member><member name="M:ProceduralAsteroid.GetComponentInChildren(System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentInParent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentInParent"></member><member name="M:ProceduralAsteroid.GetComponents(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ProceduralAsteroid.GetComponents(List)"></member><member name="M:ProceduralAsteroid.GetComponents"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren"></member><member name="M:ProceduralAsteroid.GetComponentsInChildren(List)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Type)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Boolean)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ProceduralAsteroid.GetComponentsInParent"></member><member name="M:ProceduralAsteroid.GetHashCode"></member><member name="M:ProceduralAsteroid.GetInstanceID"></member><member name="M:ProceduralAsteroid.GetType"></member><member name="M:ProceduralAsteroid.Invoke(string,System.Single)"></member><member name="M:ProceduralAsteroid.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ProceduralAsteroid.IsInvoking(string)"></member><member name="M:ProceduralAsteroid.IsInvoking"></member><member name="M:ProceduralAsteroid.MemberwiseClone"></member><member name="M:ProceduralAsteroid.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessage(string,object)"></member><member name="M:ProceduralAsteroid.SendMessage(string)"></member><member name="M:ProceduralAsteroid.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,object)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string)"></member><member name="M:ProceduralAsteroid.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ProceduralAsteroid.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StartCoroutine(string,object)"></member><member name="M:ProceduralAsteroid.StartCoroutine(string)"></member><member name="M:ProceduralAsteroid.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StopAllCoroutines"></member><member name="M:ProceduralAsteroid.StopCoroutine(string)"></member><member name="M:ProceduralAsteroid.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ProceduralAsteroid.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ProceduralAsteroid.ToString"></member><member name="M:ProceduralAsteroid.#ctor"></member><member name="T:ProtoCrewMember"><para>Crew member prototype</para></member><member name="F:ProtoCrewMember._inactive"></member><member name="F:ProtoCrewMember.careerLog"><para>Entire career flight log of this crew member</para></member><member name="F:ProtoCrewMember.courage"><para>Courage of crew member</para></member><member name="F:ProtoCrewMember.experience"><para>&lt;ref refid='namespace_experience' kindref='compound'&gt;Experience&lt;/ref&gt; of kerbal</para></member><member name="F:ProtoCrewMember.experienceLevel"><para>&lt;ref refid='namespace_experience' kindref='compound'&gt;Experience&lt;/ref&gt; level of kerbal</para></member><member name="F:ProtoCrewMember.experienceTrait"><para>The experience trait that this kerbal has</para></member><member name="F:ProtoCrewMember.flightLog"><para>Flight log of this crew member</para></member><member name="F:ProtoCrewMember.geeForce"><para>Current g force from the vessel. Note: by default ignores angular velocity.</para></member><member name="F:ProtoCrewMember.gExperienced"></member><member name="F:ProtoCrewMember.gIncrement"><para>Set this yourself in ApplyGCallback and then apply it to gExperienced.</para></member><member name="F:ProtoCrewMember.hasToured"><para>Flag for tourists set to disappear on next recovery.</para></member><member name="F:ProtoCrewMember.inactiveTimeEnd"><para>When the kerbal was set inactive</para></member><member name="F:ProtoCrewMember.isBadass"><para>Is this crew member bad ass?</para></member><member name="F:ProtoCrewMember.KerbalRef"><para>In-game reference of this protocrewmember</para></member><member name="F:ProtoCrewMember.outDueToG"><para>Are we inactive due to Gs?</para></member><member name="F:ProtoCrewMember.seat"></member><member name="F:ProtoCrewMember.seatIdx"></member><member name="F:ProtoCrewMember.stupidity"><para>Stupidity of crew member</para></member><member name="F:ProtoCrewMember.trait"><para>The name of the experience trait</para><remarks>- This appears to return the type of Kerbal that is in question.  It will return "Pilot", "Engineer", or "Scientist" pending the type of Kerbal (or a custom one if new Kerbals are added).  This can be changed by using the KerbalRoster.SetExperienceTrait(Kerbal_Name, traitName) method.</remarks></member><member name="F:ProtoCrewMember.UTaR"><para>UT at respawn (means time at which we can respawn this guy)</para></member><member name="F:ProtoCrewMember.veteran"><para>Is this crew member a veteran?</para></member><member name="F:ProtoCrewMember.ApplyGCallback"><para>Do your own G processing here and change gExperienced and set gIncrement. To enable, set doStockGCalcs true.</para></member><member name="F:ProtoCrewMember.CallbackActiveFixedUpdate"></member><member name="F:ProtoCrewMember.CallbackActiveUpdate"></member><member name="F:ProtoCrewMember.CallbackOnPartPack"></member><member name="F:ProtoCrewMember.CallbackOnPartUnpack"></member><member name="F:ProtoCrewMember.CallbackUpdate"></member><member name="F:ProtoCrewMember.doStockGCalcs"><para>Set true if you want to use ApplyGCallback instead of stock.</para></member><member name="F:ProtoCrewMember.GToleranceMult"><para>Multiplier to this kerbals&amp;apos; G tolerance, based on stats/level</para></member><member name="F:ProtoCrewMember.MaxSustainedG"></member><member name="F:ProtoCrewMember.Spawn"></member><member name="P:ProtoCrewMember.ExperienceLevelDelta"></member><member name="P:ProtoCrewMember.ExtraExperience"></member><member name="P:ProtoCrewMember.gender"></member><member name="P:ProtoCrewMember.GExperiencedNormalized"></member><member name="P:ProtoCrewMember.inactive"><para>Is crew member capable of activity?</para></member><member name="P:ProtoCrewMember.name"><para>Name of crew member (primary key into roster)</para></member><member name="P:ProtoCrewMember.nameWithGender"><para>Name of the kerbal, with the gender suffix added for lingoona</para></member><member name="P:ProtoCrewMember.rosterStatus"><para>Roster status of this crew member</para></member><member name="P:ProtoCrewMember.type"><para>Type of this kerbal</para></member><member name="M:ProtoCrewMember.ActiveFixedUpdate(Part)"><para>Run for PCMs on an active part in flight (packed or unpacked). Called by part.FixedUpdate Does G checking (if enabled). Then calls the callbacks.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;p&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ProtoCrewMember.ActiveUpdate(Part)"><para>Run for PCMs on an active part in flight (packed or unpacked). Called by part.Update Calls the callbacks.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;p&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ProtoCrewMember.ArchiveFlightLog"></member><member name="M:ProtoCrewMember.CalculateExperiencePoints(Game)"></member><member name="M:ProtoCrewMember.ChangeName(string)"></member><member name="M:ProtoCrewMember.CheckActive(System.Double)"></member><member name="M:ProtoCrewMember.CheckRespawnTimer(System.Double,GameParameters)"></member><member name="M:ProtoCrewMember.Die"><para>Sets this crewmember as dead</para><para>&amp;lt; don&amp;apos;t change the vessel index yet, we still might be drawing the KIA screen</para></member><member name="M:ProtoCrewMember.Equals(object)"></member><member name="M:ProtoCrewMember.Finalize"></member><member name="M:ProtoCrewMember.GetEffect"></member><member name="M:ProtoCrewMember.GetEffect(string)"></member><member name="M:ProtoCrewMember.GetHashCode"></member><member name="M:ProtoCrewMember.GetType"></member><member name="M:ProtoCrewMember.HasEffect"></member><member name="M:ProtoCrewMember.HasEffect(string)"><summary>Returns true if the crew member has the relevant skill "effect".  In this case, "effect" is referenced in the Kerbal traits.cfg file.  For example, Kerbals with the Pilot trait have the effect "AutopilotSkill" and "FullVesselControlSkill".</summary></member><member name="M:ProtoCrewMember.MemberwiseClone"></member><member name="M:ProtoCrewMember.OnPartPack(Part)"></member><member name="M:ProtoCrewMember.OnPartUnpack(Part)"></member><member name="M:ProtoCrewMember.RegisterExperienceTraits(Part)"></member><member name="M:ProtoCrewMember.Save(ConfigNode)"><para>Save this PCM to a given confignode</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;node&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ProtoCrewMember.SetInactive(System.Double,System.Boolean)"><para>Sets kerbal inactive for given time</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;time&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;additive&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ProtoCrewMember.SetTimeForRespawn(System.Double)"><para>Starts the respawn cycle for this crewmember to either respawn or be declared dead (based on game parameters) at the given UT (will set him as &amp;apos;Missing&amp;apos;). (Use this if &lt;ref refid='class_planetarium_1a76ca1f76852a1bcb479abf36ac3f17fd' kindref='member'&gt;Planetarium.GetUniversalTime&lt;/ref&gt; isn&amp;apos;t available)</para></member><member name="M:ProtoCrewMember.StartRespawnPeriod(System.Double)"><para>Starts the respawn cycle for this crewmember (will set him as &amp;apos;Missing&amp;apos;). At the end of this period, he will either be dead or be made available again, depending on game parameters.</para></member><member name="M:ProtoCrewMember.ToString"></member><member name="M:ProtoCrewMember.UnregisterExperienceTraits(Part)"></member><member name="M:ProtoCrewMember.Update(System.Double)"><para>Run for all PCMs via &lt;ref refid='class_kerbal_roster' kindref='compound'&gt;KerbalRoster&lt;/ref&gt;, itself run from &lt;ref refid='class_planetarium' kindref='compound'&gt;Planetarium&lt;/ref&gt; (so early in the frame) Sets any PCMs active that should be set active. Then calls the callbacks</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;UT&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ProtoCrewMember.UpdateExperience"></member><member name="M:ProtoCrewMember._GToleranceMult(ProtoCrewMember)"></member><member name="M:ProtoCrewMember._MaxSustainedG(ProtoCrewMember)"></member><member name="M:ProtoCrewMember._Spawn(ProtoCrewMember)"></member><member name="M:ProtoCrewMember.#ctor(ProtoCrewMember+KerbalType)"><para>Create a &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt; manually</para></member><member name="M:ProtoCrewMember.#ctor(ProtoCrewMember+KerbalType,string)"></member><member name="M:ProtoCrewMember.#ctor(ProtoCrewMember)"></member><member name="M:ProtoCrewMember.#ctor(Game+Modes,ConfigNode,ProtoCrewMember+KerbalType)"><para>Create a &lt;ref refid='class_proto_crew_member' kindref='compound'&gt;ProtoCrewMember&lt;/ref&gt; from the loaded save string</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;crewData&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;protoPart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="T:Reputation"></member><member name="F:Reputation.runner"></member><member name="F:Reputation.snapshot"></member><member name="F:Reputation.targetScenes"></member><member name="F:Reputation.Instance"></member><member name="F:Reputation.RepRange"></member><member name="P:Reputation.ClassID"></member><member name="P:Reputation.ClassName"></member><member name="P:Reputation.enabled"></member><member name="P:Reputation.Events"></member><member name="P:Reputation.Fields"></member><member name="P:Reputation.gameObject"></member><member name="P:Reputation.hideFlags"></member><member name="P:Reputation.isActiveAndEnabled"></member><member name="P:Reputation.name"></member><member name="P:Reputation.reputation"></member><member name="P:Reputation.tag"></member><member name="P:Reputation.transform"></member><member name="P:Reputation.useGUILayout"></member><member name="P:Reputation.CurrentRep"><para>The current reputation, which ranges from -1000 to 1000</para><remarks>-</remarks></member><member name="P:Reputation.UnitRep"><para>The current &amp;apos;unit&amp;apos; reputation. A value from -1 to 1</para><remarks>-</remarks></member><member name="M:Reputation.AddReputation(System.Single,TransactionReasons)"><para>Adds the given amount of &lt;ref refid='class_reputation' kindref='compound'&gt;Reputation&lt;/ref&gt;. Because &lt;ref refid='class_reputation' kindref='compound'&gt;Reputation&lt;/ref&gt; follows a dimishing returns curve approaching extremes, this method will split the given amounts into small &amp;apos;grains&amp;apos;, to ensure the value added properly traces the curve.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;reputation&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;reason&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>-</remarks></member><member name="M:Reputation.addReputation_discrete(System.Single,TransactionReasons)"><para>Unlike AddReputation, this method adds the given amount instantly. Use with caution, may cause values to jump around wildly</para><remarks>-</remarks></member><member name="M:Reputation.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.BroadcastMessage(string,object)"></member><member name="M:Reputation.BroadcastMessage(string)"></member><member name="M:Reputation.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.CancelInvoke"></member><member name="M:Reputation.CancelInvoke(string)"></member><member name="M:Reputation.CompareTag(string)"></member><member name="M:Reputation.Equals(object)"></member><member name="M:Reputation.Finalize"></member><member name="M:Reputation.GetComponent(System.Type)"></member><member name="M:Reputation.GetComponent"></member><member name="M:Reputation.GetComponent(string)"></member><member name="M:Reputation.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Reputation.GetComponentInChildren(System.Type)"></member><member name="M:Reputation.GetComponentInChildren"></member><member name="M:Reputation.GetComponentInChildren(System.Boolean)"></member><member name="M:Reputation.GetComponentInParent(System.Type)"></member><member name="M:Reputation.GetComponentInParent"></member><member name="M:Reputation.GetComponents(System.Type)"></member><member name="M:Reputation.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Reputation.GetComponents(List)"></member><member name="M:Reputation.GetComponents"></member><member name="M:Reputation.GetComponentsInChildren(System.Type)"></member><member name="M:Reputation.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Reputation.GetComponentsInChildren(System.Boolean)"></member><member name="M:Reputation.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Reputation.GetComponentsInChildren"></member><member name="M:Reputation.GetComponentsInChildren(List)"></member><member name="M:Reputation.GetComponentsInParent(System.Type)"></member><member name="M:Reputation.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Reputation.GetComponentsInParent(System.Boolean)"></member><member name="M:Reputation.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Reputation.GetComponentsInParent"></member><member name="M:Reputation.GetHashCode"></member><member name="M:Reputation.GetInstanceID"></member><member name="M:Reputation.GetType"></member><member name="M:Reputation.Invoke(string,System.Single)"></member><member name="M:Reputation.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Reputation.IsInvoking(string)"></member><member name="M:Reputation.IsInvoking"></member><member name="M:Reputation.Load(ConfigNode)"></member><member name="M:Reputation.MemberwiseClone"></member><member name="M:Reputation.OnAwake"></member><member name="M:Reputation.OnLoad(ConfigNode)"></member><member name="M:Reputation.OnSave(ConfigNode)"></member><member name="M:Reputation.Save(ConfigNode)"></member><member name="M:Reputation.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessage(string,object)"></member><member name="M:Reputation.SendMessage(string)"></member><member name="M:Reputation.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SendMessageUpwards(string,object)"></member><member name="M:Reputation.SendMessageUpwards(string)"></member><member name="M:Reputation.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Reputation.SetReputation(System.Single,TransactionReasons)"></member><member name="M:Reputation.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Reputation.StartCoroutine(string,object)"></member><member name="M:Reputation.StartCoroutine(string)"></member><member name="M:Reputation.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Reputation.StopAllCoroutines"></member><member name="M:Reputation.StopCoroutine(string)"></member><member name="M:Reputation.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Reputation.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Reputation.ToString"></member><member name="M:Reputation.#ctor"></member><member name="T:ResearchAndDevelopment"><summary>This class implements various functions to query the Tech Tree and handle Science.

Tech Tree: Use this to see whether the player has unlocked a part, or to mark parts as being experimental for Contracts.</summary></member><member name="F:ResearchAndDevelopment.runner"></member><member name="F:ResearchAndDevelopment.snapshot"></member><member name="F:ResearchAndDevelopment.targetScenes"></member><member name="F:ResearchAndDevelopment.GetReferenceDataValueFunc"><para>Overridable function for getting the reference data value of a science subject.</para></member><member name="F:ResearchAndDevelopment.GetSubjectValueFunc"><para>Overridable function for getting the value of the given science subject, given the current amount of science done for it.</para></member><member name="F:ResearchAndDevelopment.Instance"></member><member name="P:ResearchAndDevelopment.ClassID"></member><member name="P:ResearchAndDevelopment.ClassName"></member><member name="P:ResearchAndDevelopment.enabled"></member><member name="P:ResearchAndDevelopment.Events"></member><member name="P:ResearchAndDevelopment.Fields"></member><member name="P:ResearchAndDevelopment.gameObject"></member><member name="P:ResearchAndDevelopment.hideFlags"></member><member name="P:ResearchAndDevelopment.isActiveAndEnabled"></member><member name="P:ResearchAndDevelopment.name"></member><member name="P:ResearchAndDevelopment.Science"></member><member name="P:ResearchAndDevelopment.tag"></member><member name="P:ResearchAndDevelopment.transform"></member><member name="P:ResearchAndDevelopment.useGUILayout"></member><member name="M:ResearchAndDevelopment.AddScience(System.Single,TransactionReasons)"><para>Add Science the the player Science total</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;value&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;reason&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; bottom out at a round 0. Rounding to places could leave us at up to -0.99 in the red.</para></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,object)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string)"></member><member name="M:ResearchAndDevelopment.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.CancelInvoke"></member><member name="M:ResearchAndDevelopment.CancelInvoke(string)"></member><member name="M:ResearchAndDevelopment.CheatAddScience(System.Single)"></member><member name="M:ResearchAndDevelopment.CheatTechnology"></member><member name="M:ResearchAndDevelopment.CompareTag(string)"></member><member name="M:ResearchAndDevelopment.Equals(object)"></member><member name="M:ResearchAndDevelopment.Finalize"></member><member name="M:ResearchAndDevelopment.GetComponent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponent"></member><member name="M:ResearchAndDevelopment.GetComponent(string)"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren"></member><member name="M:ResearchAndDevelopment.GetComponentInChildren(System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentInParent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentInParent"></member><member name="M:ResearchAndDevelopment.GetComponents(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ResearchAndDevelopment.GetComponents(List)"></member><member name="M:ResearchAndDevelopment.GetComponents"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren"></member><member name="M:ResearchAndDevelopment.GetComponentsInChildren(List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Type)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Boolean)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ResearchAndDevelopment.GetComponentsInParent"></member><member name="M:ResearchAndDevelopment.GetHashCode"></member><member name="M:ResearchAndDevelopment.GetInstanceID"></member><member name="M:ResearchAndDevelopment.GetTechState(string)"><para>Get the protoNode representation of this tech node. Will be null if the tech is still unavailable.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;techID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetType"></member><member name="M:ResearchAndDevelopment.Invoke(string,System.Single)"></member><member name="M:ResearchAndDevelopment.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ResearchAndDevelopment.IsInvoking(string)"></member><member name="M:ResearchAndDevelopment.IsInvoking"></member><member name="M:ResearchAndDevelopment.Load(ConfigNode)"></member><member name="M:ResearchAndDevelopment.MemberwiseClone"></member><member name="M:ResearchAndDevelopment.OnAwake"><para>&amp;lt; this will be overwritten by loaded data if any exists. If not, we can assume this is a newly started game.</para></member><member name="M:ResearchAndDevelopment.OnDestroy"></member><member name="M:ResearchAndDevelopment.OnLoad(ConfigNode)"><para>&amp;lt; start it off with enough science to get the first node.</para></member><member name="M:ResearchAndDevelopment.OnSave(ConfigNode)"></member><member name="M:ResearchAndDevelopment.Save(ConfigNode)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,object)"></member><member name="M:ResearchAndDevelopment.SendMessage(string)"></member><member name="M:ResearchAndDevelopment.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,object)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string)"></member><member name="M:ResearchAndDevelopment.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ResearchAndDevelopment.SetScience(System.Single,TransactionReasons)"></member><member name="M:ResearchAndDevelopment.SetTechState(string,ProtoTechNode)"><para>Sets the protoNode representation of the given tech node. Used to save a new tech after it&amp;apos;s been unlocked.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;techID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;techNode&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:ResearchAndDevelopment.Start"></member><member name="M:ResearchAndDevelopment.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StartCoroutine(string,object)"></member><member name="M:ResearchAndDevelopment.StartCoroutine(string)"></member><member name="M:ResearchAndDevelopment.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StopAllCoroutines"></member><member name="M:ResearchAndDevelopment.StopCoroutine(string)"></member><member name="M:ResearchAndDevelopment.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ResearchAndDevelopment.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ResearchAndDevelopment.SubmitScienceData(System.Single,ScienceSubject,System.Single,ProtoVessel,System.Boolean)"><para>Submit Data to be converted into science.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dataAmount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The amount of data being sent.</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;subject&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The subject the data is about.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;xmitScalar&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The transmission multiplier, omit if not transmitting.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;The amount of science earned.&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;
&lt;para&gt;&amp;lt; Only post a message if in flight. All other scenes will show a complete dialog. &lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.ToString"></member><member name="M:ResearchAndDevelopment.UnlockProtoTechNode(ProtoTechNode)"></member><member name="M:ResearchAndDevelopment.AddExperimentalPart(AvailablePart)"><summary>Marks ap as an experimental part, making it available in the Editor even if it has not been purchased yet.
Typically called when a Contract is accepted using the part.

See: Contract.OnAccepted()</summary></member><member name="M:ResearchAndDevelopment.CanAfford(System.Single)"><para>Check the the player can afford the amount of Science passed in</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;amount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.CheckForMissingParts"></member><member name="M:ResearchAndDevelopment.CountUniversalScience"></member><member name="M:ResearchAndDevelopment.GetBiomeTags(CelestialBody,System.Boolean)"><para>Returns a list of the Biome Tags in English for a given &lt;ref refid='class_celestial_body' kindref='compound'&gt;CelestialBody&lt;/ref&gt;</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;cb&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The CB to query</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;includeMiniBiomes&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;True to return the minibiomes as well&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetBiomeTagsLocalized(CelestialBody,System.Boolean)"><para>Returns a list of the Biome Tags in localized format for a given &lt;ref refid='class_celestial_body' kindref='compound'&gt;CelestialBody&lt;/ref&gt;</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;cb&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The CB to query</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;includeMiniBiomes&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;True to return the minibiomes as well&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetExperiment(string)"><para>Get a &lt;ref refid='class_science_experiment' kindref='compound'&gt;ScienceExperiment&lt;/ref&gt; from known experiments</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;experimentID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetExperimentIDs"></member><member name="M:ResearchAndDevelopment.GetExperimentSubject(ScienceExperiment,ExperimentSituations,CelestialBody,string,string)"><para>Returns a reference to the science subject concerning this experiment at the given circumstances.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;experiment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;situation&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;body&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetExperimentSubject(ScienceExperiment,ExperimentSituations,string,string,CelestialBody,string,string)"><para>Returns a science subject concerning this experiment and source at the given circumstances.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;experiment&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_science_experiment' kindref='compound'&gt;ScienceExperiment&lt;/ref&gt; for the subject</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;situation&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Situation string&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;sourceUId&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;&lt;ref refid='class_part' kindref='compound'&gt;Part&lt;/ref&gt; UId&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;sourceTitle&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Title of the Subject&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;body&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Celestial Body involved&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;biome&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The Biome name&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;displaybiome&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The localized Biome name&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetExperimentSubject(ScienceExperiment,ExperimentSituations,CelestialBody,string)"><summary>For the given combination of conditions, find the ScienceSubject that records the science that we've retrieved thus far.</summary></member><member name="M:ResearchAndDevelopment.GetMiniBiomedisplayNameByScienceID(string,System.Boolean)"><para>Returns a mini biome displayName by passed in ScienceID (LandedAt string with no spaces)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;TagID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;ScienceID (IE:no spaces etc from the science ID format experiment</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;formatted&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;If true will return localized text, if false will return the localized tag field text&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;ref refid='class_mini_biome' kindref='compound'&gt;MiniBiome&lt;/ref&gt; displayName or passed in string if not found&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetMiniBiomedisplayNameByUnityTag(string,System.Boolean)"><para>Returns a mini biome displayName by passed in Unity Tag</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;TagID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;Unity Tag name</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;formatted&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;If true will return localized text, if false will return the localized tag field text&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetMiniBiomeTags(CelestialBody)"><para>Returns a list of the &lt;ref refid='class_mini_biome' kindref='compound'&gt;MiniBiome&lt;/ref&gt; Tags in English for a given &lt;ref refid='class_celestial_body' kindref='compound'&gt;CelestialBody&lt;/ref&gt;</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;cb&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetMiniBiomeTagsLocalized(CelestialBody)"><para>Returns a list of the &lt;ref refid='class_mini_biome' kindref='compound'&gt;MiniBiome&lt;/ref&gt; Tags in English for a given &lt;ref refid='class_celestial_body' kindref='compound'&gt;CelestialBody&lt;/ref&gt;</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;cb&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The CB to query</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;includeMiniBiomes&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;True to return the minibiomes as well&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetNextScienceValue(System.Single,ScienceSubject,System.Single)"><para>Returns the scientific output of submitting the given amount of data on a subject a second time around. Use for previewing devaluation taking into account transmission loss.</para></member><member name="M:ResearchAndDevelopment.GetReferenceDataValue(System.Single,ScienceSubject)"><para>Returns the &amp;apos;reference&amp;apos; value for the given amount of data on a subject. Useful for progress bars and such.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dataAmount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;subject&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetResults(string)"><para>&amp;lt; prioritized search to find experiment results.</para></member><member name="M:ResearchAndDevelopment.GetScienceValue(System.Single,ScienceSubject,System.Single)"><para>Returns the scientific value of the given amount of data on a subject, taking into account its transmission yield</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;dataAmount&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The amount of data</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;subject&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The subject the data is about&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
/// &lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;xmitScalar&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The transmission value. Omit if not transmitting.&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetSituationTags"><para>Returns a list of the valid Experiment Situations</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ResearchAndDevelopment.GetSituationTagsDescriptions"><para>Returns a list of Situation Tags Description attributes (localized strings of the Experiment Situations).</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:ResearchAndDevelopment.GetSubjectByID(string)"></member><member name="M:ResearchAndDevelopment.GetSubjects"></member><member name="M:ResearchAndDevelopment.GetSubjectValue(System.Single,ScienceSubject)"><para>Returns the scientific value of a subject for the given amount of science done in it. Does not actually modify the subject&amp;apos;s value. Use for previewing devaluation and such.</para><remarks>- A value from 0 to 1, indicating the fraction of "undiscovered" science for that subject that remains to be discovered. For example, in a fresh career where no science has been gathered yet, all subjects will return 1.  A subject that has been completely "mined out" will return 0.  The subjectScience parameter indicates how much science has already been acquired for that subject.  The subject parameter provides the information about science cap (i.e. what's the max possible science obtainable for that subject).</remarks></member><member name="M:ResearchAndDevelopment.GetTechnologyState(string)"><para>Find if the given tech is available</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;techID&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:ResearchAndDevelopment.GetTechnologyTitle(string)"></member><member name="M:ResearchAndDevelopment.IsExperimentalPart(AvailablePart)"><summary>Returns TRUE if ap has been marked as "experimental" using ResearchAndDevelopment.AddExperimentalPart().</summary></member><member name="M:ResearchAndDevelopment.PartAssignmentSummary"></member><member name="M:ResearchAndDevelopment.PartModelPurchased(AvailablePart)"><summary>Returns TRUE if ap has been purchased, OR if ap has been marked as "experimental".
This happens automatically by default as "No Entry Purchase Required on Research" (PartUpgradesInCareer in persistent.sfs) is enabled, which effectively purchases all parts whenever a tech-level is unlocked.

See also: IsExperimentalPart(), PartTechAvailable(), AddExperimentalPart(), RemoveExperimentalPart()</summary></member><member name="M:ResearchAndDevelopment.PartTechAvailable(AvailablePart)"><summary>Returns TRUE if the tech-level containing ap has been unlocked.</summary></member><member name="M:ResearchAndDevelopment.RefreshTechTreeUI"></member><member name="M:ResearchAndDevelopment.RemoveExperimentalPart(AvailablePart)"><summary>Removes ap from the list of experimental parts.  Should be called when there are no more active contracts using the part, typically from Contract.Finished(), Contract.Cancelled(), or Contract.Failed().</summary></member><member name="M:ResearchAndDevelopment.ResearchedValidContractObjectives(string[])"></member><member name="M:ResearchAndDevelopment.ResearchedValidContractObjectives(System.Collections.Generic.List,System.Boolean)"></member><member name="M:ResearchAndDevelopment.ScienceTransmissionRewardString(System.Single,TransactionReasons)"></member><member name="M:ResearchAndDevelopment.#ctor"></member><member name="T:ResourceFlowMode"><summary>An enumeration of the different behaviors resources can have with respect to fuel flow.</summary></member><member name="T:ScaledSpace"><summary>A class that handles the transformations between the scaled-down coordinate system used by the map view and the  regular coordinate system used by the main flight view and the physics.</summary></member><member name="F:ScaledSpace.originTarget"></member><member name="F:ScaledSpace.scaledSpaceTransforms"></member><member name="F:ScaledSpace.scaleFactor"></member><member name="P:ScaledSpace.enabled"></member><member name="P:ScaledSpace.gameObject"></member><member name="P:ScaledSpace.hideFlags"></member><member name="P:ScaledSpace.isActiveAndEnabled"></member><member name="P:ScaledSpace.name"></member><member name="P:ScaledSpace.tag"></member><member name="P:ScaledSpace.transform"></member><member name="P:ScaledSpace.useGUILayout"></member><member name="P:ScaledSpace.Instance"></member><member name="P:ScaledSpace.InverseScaleFactor"></member><member name="P:ScaledSpace.ScaleFactor"><summary>"Scaled space" is the coordinate system used by the planetarium view. It's the same coordinate system as the world coordinates used by the physics, except scaled down by this scale factor.</summary></member><member name="P:ScaledSpace.SceneTransform"></member><member name="M:ScaledSpace.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.BroadcastMessage(string,object)"></member><member name="M:ScaledSpace.BroadcastMessage(string)"></member><member name="M:ScaledSpace.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.CancelInvoke"></member><member name="M:ScaledSpace.CancelInvoke(string)"></member><member name="M:ScaledSpace.CompareTag(string)"></member><member name="M:ScaledSpace.Equals(object)"></member><member name="M:ScaledSpace.Finalize"></member><member name="M:ScaledSpace.GetComponent(System.Type)"></member><member name="M:ScaledSpace.GetComponent"></member><member name="M:ScaledSpace.GetComponent(string)"></member><member name="M:ScaledSpace.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ScaledSpace.GetComponentInChildren(System.Type)"></member><member name="M:ScaledSpace.GetComponentInChildren"></member><member name="M:ScaledSpace.GetComponentInChildren(System.Boolean)"></member><member name="M:ScaledSpace.GetComponentInParent(System.Type)"></member><member name="M:ScaledSpace.GetComponentInParent"></member><member name="M:ScaledSpace.GetComponents(System.Type)"></member><member name="M:ScaledSpace.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScaledSpace.GetComponents(List)"></member><member name="M:ScaledSpace.GetComponents"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Type)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScaledSpace.GetComponentsInChildren"></member><member name="M:ScaledSpace.GetComponentsInChildren(List)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Type)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Boolean)"></member><member name="M:ScaledSpace.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScaledSpace.GetComponentsInParent"></member><member name="M:ScaledSpace.GetHashCode"></member><member name="M:ScaledSpace.GetInstanceID"></member><member name="M:ScaledSpace.GetType"></member><member name="M:ScaledSpace.Invoke(string,System.Single)"></member><member name="M:ScaledSpace.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScaledSpace.IsInvoking(string)"></member><member name="M:ScaledSpace.IsInvoking"></member><member name="M:ScaledSpace.MemberwiseClone"></member><member name="M:ScaledSpace.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessage(string,object)"></member><member name="M:ScaledSpace.SendMessage(string)"></member><member name="M:ScaledSpace.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,object)"></member><member name="M:ScaledSpace.SendMessageUpwards(string)"></member><member name="M:ScaledSpace.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScaledSpace.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StartCoroutine(string,object)"></member><member name="M:ScaledSpace.StartCoroutine(string)"></member><member name="M:ScaledSpace.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StopAllCoroutines"></member><member name="M:ScaledSpace.StopCoroutine(string)"></member><member name="M:ScaledSpace.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScaledSpace.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScaledSpace.ToString"></member><member name="M:ScaledSpace.AddScaledSpaceObject(MapObject)"></member><member name="M:ScaledSpace.AddScaledSpaceTransform(Transform)"></member><member name="M:ScaledSpace.LocalToScaledSpace(Vector3d)"><summary>Convert a position in world coordinates into a position in planetarium coordinates.</summary><param name="localSpacePoint">A position in world coordinates</param><returns>The corresponding position in planetarium coordinates</returns></member><member name="M:ScaledSpace.LocalToScaledSpace(Vector3d&amp;)"></member><member name="M:ScaledSpace.LocalToScaledSpace(System.Collections.Generic.List)"></member><member name="M:ScaledSpace.LocalToScaledSpace(Vector3d[],System.Collections.Generic.List)"></member><member name="M:ScaledSpace.RemoveScaledSpaceObject(MapObject)"></member><member name="M:ScaledSpace.RemoveScaledSpaceTransform(Transform)"></member><member name="M:ScaledSpace.ScaledToLocalSpace(Vector3d)"><summary>Convert a position in planetarium coordinates into a position in world coordinates.</summary><param name="scaledSpacePoint">A position in planetarium coordinates.</param><returns>The corresponding position in world coordinates.</returns></member><member name="M:ScaledSpace.#ctor"></member><member name="T:ScenarioCreationOptions"><summary>A list of options for use with the KSPScenario attribute.</summary></member><member name="T:ScenarioDiscoverableObjects"><summary>Stores information on asteroid spawning  Executed while in Flight, Tracking Station, and Space Center scenes The module schedules periodic "spawn checks" while the game clock is running, at an interval  set by spawnInterval. At each spawn check, any asteroids that have gone untracked for too long  are removed from the game.  To add an element of randomness, only a fraction of checks (controlled by spawnOddsAgainst)  have a chance to produce asteroids. No asteroids are produced if the number of untracked  asteroids already in the game exceeds spawnGroupMaxLimit. Because spawn checks happen  very frequently, the number of detected asteroids in a game where the player never  tracks an asteroid will almost always be close to spawnGroupMaxLimit.</summary></member><member name="F:ScenarioDiscoverableObjects.lastSeed"></member><member name="F:ScenarioDiscoverableObjects.maxUntrackedLifetime"><summary>Longest time an asteroid can go untracked before disappearing, in Earth days</summary><seealso cref="DiscoveryInfo.unobservedLifetime"/></member><member name="F:ScenarioDiscoverableObjects.minUntrackedLifetime"><summary>Shortest time an asteroid can go untracked before disappearing, in Earth days</summary><seealso cref="DiscoveryInfo.unobservedLifetime"/></member><member name="F:ScenarioDiscoverableObjects.runner"></member><member name="F:ScenarioDiscoverableObjects.sizeCurve"><summary>Sets size distribution for asteroids  The output range of [0, 1) is divided equally among the classes. So [0, 0.2) is class A,  [0.2, 0.4) is class B, ..., [0.8, 1) is class E. Default curve translates to 	12% class A, 13% class B, 49% class C, 13% class D, and 12% class E</summary></member><member name="F:ScenarioDiscoverableObjects.snapshot"></member><member name="F:ScenarioDiscoverableObjects.spawnGroupMaxLimit"><summary>Number of untracked asteroids at which spawn rate stops completely</summary></member><member name="F:ScenarioDiscoverableObjects.spawnGroupMinLimit"><summary>Number of untracked asteroids at which spawn rate begins to slow</summary></member><member name="F:ScenarioDiscoverableObjects.spawnInterval"><summary>Number of seconds between asteroid checks  These are approximately seconds of in-game time, but if you make sudden changes  in the time warp rate the spawner may need some time to catch up. Since asteroids are removed during spawn checks, spawnInterval also controls the  asteroid removal rate.</summary></member><member name="F:ScenarioDiscoverableObjects.spawnOddsAgainst"><summary>Controls the fraction of spawn checks in which new asteroids are generated  The probability of spawning an asteroid is 1 / (1 + spawnOddsAgainst)</summary></member><member name="F:ScenarioDiscoverableObjects.targetScenes"></member><member name="P:ScenarioDiscoverableObjects.ClassID"></member><member name="P:ScenarioDiscoverableObjects.ClassName"></member><member name="P:ScenarioDiscoverableObjects.enabled"></member><member name="P:ScenarioDiscoverableObjects.Events"></member><member name="P:ScenarioDiscoverableObjects.Fields"></member><member name="P:ScenarioDiscoverableObjects.gameObject"></member><member name="P:ScenarioDiscoverableObjects.hideFlags"></member><member name="P:ScenarioDiscoverableObjects.isActiveAndEnabled"></member><member name="P:ScenarioDiscoverableObjects.name"></member><member name="P:ScenarioDiscoverableObjects.tag"></member><member name="P:ScenarioDiscoverableObjects.transform"></member><member name="P:ScenarioDiscoverableObjects.useGUILayout"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,object)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string)"></member><member name="M:ScenarioDiscoverableObjects.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.CancelInvoke"></member><member name="M:ScenarioDiscoverableObjects.CancelInvoke(string)"></member><member name="M:ScenarioDiscoverableObjects.CompareTag(string)"></member><member name="M:ScenarioDiscoverableObjects.DebugSpawnProbability"></member><member name="M:ScenarioDiscoverableObjects.debugSpawnProbability"><summary>Returns a description of the current spawn interval and spawn odds</summary><seealso cref="spawnOddsAgainst"/><seealso cref="spawnInterval"/></member><member name="M:ScenarioDiscoverableObjects.Equals(object)"></member><member name="M:ScenarioDiscoverableObjects.Finalize"></member><member name="M:ScenarioDiscoverableObjects.GetComponent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponent"></member><member name="M:ScenarioDiscoverableObjects.GetComponent(string)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInChildren(System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInParent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentInParent"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents(List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponents"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInChildren(List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioDiscoverableObjects.GetComponentsInParent"></member><member name="M:ScenarioDiscoverableObjects.GetHashCode"></member><member name="M:ScenarioDiscoverableObjects.GetInstanceID"></member><member name="M:ScenarioDiscoverableObjects.GetType"></member><member name="M:ScenarioDiscoverableObjects.Invoke(string,System.Single)"></member><member name="M:ScenarioDiscoverableObjects.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioDiscoverableObjects.IsInvoking(string)"></member><member name="M:ScenarioDiscoverableObjects.IsInvoking"></member><member name="M:ScenarioDiscoverableObjects.Load(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.MemberwiseClone"></member><member name="M:ScenarioDiscoverableObjects.OnAwake"></member><member name="M:ScenarioDiscoverableObjects.OnLoad(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.OnSave(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.Save(ConfigNode)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,object)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string)"></member><member name="M:ScenarioDiscoverableObjects.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,object)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string)"></member><member name="M:ScenarioDiscoverableObjects.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioDiscoverableObjects.SpawnAsteroid"><summary>Creates a random asteroid and Kerbin-intercepting orbit</summary></member><member name="M:ScenarioDiscoverableObjects.SpawnDresAsteroid(System.Int32)"></member><member name="M:ScenarioDiscoverableObjects.SpawnHomeAsteroid(System.Int32)"></member><member name="M:ScenarioDiscoverableObjects.SpawnLastAsteroid"><summary>Creates a random asteroid and Kerbin-intercepting orbit.</summary><seealso cref="SpawnAsteroid()"/><remarks>Asteroid is identical to the last 	call of SpawnAsteroid()&lt;/seealso&gt; Intended for debugging?</remarks></member><member name="M:ScenarioDiscoverableObjects.Start"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(string,object)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine(string)"></member><member name="M:ScenarioDiscoverableObjects.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StopAllCoroutines"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(string)"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioDiscoverableObjects.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioDiscoverableObjects.ToString"></member><member name="M:ScenarioDiscoverableObjects.#ctor"></member><member name="T:ScenarioModule"><para>&lt;ref refid='class_scenario_module' kindref='compound'&gt;ScenarioModule&lt;/ref&gt; provides a base to write scenario-specific logic, like tutorials and missions. It handles persistence integration.</para></member><member name="F:ScenarioModule.runner"></member><member name="F:ScenarioModule.snapshot"></member><member name="F:ScenarioModule.targetScenes"></member><member name="P:ScenarioModule.ClassID"></member><member name="P:ScenarioModule.ClassName"></member><member name="P:ScenarioModule.enabled"></member><member name="P:ScenarioModule.Events"></member><member name="P:ScenarioModule.Fields"></member><member name="P:ScenarioModule.gameObject"></member><member name="P:ScenarioModule.hideFlags"></member><member name="P:ScenarioModule.isActiveAndEnabled"></member><member name="P:ScenarioModule.name"></member><member name="P:ScenarioModule.tag"></member><member name="P:ScenarioModule.transform"></member><member name="P:ScenarioModule.useGUILayout"></member><member name="M:ScenarioModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.BroadcastMessage(string,object)"></member><member name="M:ScenarioModule.BroadcastMessage(string)"></member><member name="M:ScenarioModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.CancelInvoke"></member><member name="M:ScenarioModule.CancelInvoke(string)"></member><member name="M:ScenarioModule.CompareTag(string)"></member><member name="M:ScenarioModule.Equals(object)"></member><member name="M:ScenarioModule.Finalize"></member><member name="M:ScenarioModule.GetComponent(System.Type)"></member><member name="M:ScenarioModule.GetComponent"></member><member name="M:ScenarioModule.GetComponent(string)"></member><member name="M:ScenarioModule.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioModule.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioModule.GetComponentInChildren"></member><member name="M:ScenarioModule.GetComponentInChildren(System.Boolean)"></member><member name="M:ScenarioModule.GetComponentInParent(System.Type)"></member><member name="M:ScenarioModule.GetComponentInParent"></member><member name="M:ScenarioModule.GetComponents(System.Type)"></member><member name="M:ScenarioModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioModule.GetComponents(List)"></member><member name="M:ScenarioModule.GetComponents"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioModule.GetComponentsInChildren"></member><member name="M:ScenarioModule.GetComponentsInChildren(List)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioModule.GetComponentsInParent"></member><member name="M:ScenarioModule.GetHashCode"></member><member name="M:ScenarioModule.GetInstanceID"></member><member name="M:ScenarioModule.GetType"></member><member name="M:ScenarioModule.Invoke(string,System.Single)"></member><member name="M:ScenarioModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioModule.IsInvoking(string)"></member><member name="M:ScenarioModule.IsInvoking"></member><member name="M:ScenarioModule.Load(ConfigNode)"></member><member name="M:ScenarioModule.MemberwiseClone"></member><member name="M:ScenarioModule.OnAwake"><summary>Called when the module is activated for the first time after a scene change, before OnLoad.</summary></member><member name="M:ScenarioModule.OnLoad(ConfigNode)"><summary>Called just after the savegame is loaded (including after every scene change [assuming, of course, that this class's KSPScenario attribute dictates that it's active in the target scene]), before MonoBehaviour.Start.</summary><param name="node">The ConfigNode containing this ScenarioModule's data, loaded from the persistence file.</param></member><member name="M:ScenarioModule.OnSave(ConfigNode)"><summary>Called just before the game is saved (including before scene changes).</summary><param name="node">The ConfigNode containing this ScenarioModule's data, that is about to be saved to the persistence file.</param></member><member name="M:ScenarioModule.Save(ConfigNode)"></member><member name="M:ScenarioModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessage(string,object)"></member><member name="M:ScenarioModule.SendMessage(string)"></member><member name="M:ScenarioModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,object)"></member><member name="M:ScenarioModule.SendMessageUpwards(string)"></member><member name="M:ScenarioModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StartCoroutine(string,object)"></member><member name="M:ScenarioModule.StartCoroutine(string)"></member><member name="M:ScenarioModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StopAllCoroutines"></member><member name="M:ScenarioModule.StopCoroutine(string)"></member><member name="M:ScenarioModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioModule.ToString"></member><member name="M:ScenarioModule.#ctor"></member><member name="T:ScenarioUpgradeableFacilities"></member><member name="F:ScenarioUpgradeableFacilities.runner"></member><member name="F:ScenarioUpgradeableFacilities.snapshot"></member><member name="F:ScenarioUpgradeableFacilities.targetScenes"></member><member name="F:ScenarioUpgradeableFacilities.Instance"></member><member name="F:ScenarioUpgradeableFacilities.protoUpgradeables"></member><member name="P:ScenarioUpgradeableFacilities.ClassID"></member><member name="P:ScenarioUpgradeableFacilities.ClassName"></member><member name="P:ScenarioUpgradeableFacilities.enabled"></member><member name="P:ScenarioUpgradeableFacilities.Events"></member><member name="P:ScenarioUpgradeableFacilities.Fields"></member><member name="P:ScenarioUpgradeableFacilities.gameObject"></member><member name="P:ScenarioUpgradeableFacilities.hideFlags"></member><member name="P:ScenarioUpgradeableFacilities.isActiveAndEnabled"></member><member name="P:ScenarioUpgradeableFacilities.name"></member><member name="P:ScenarioUpgradeableFacilities.tag"></member><member name="P:ScenarioUpgradeableFacilities.transform"></member><member name="P:ScenarioUpgradeableFacilities.useGUILayout"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string)"></member><member name="M:ScenarioUpgradeableFacilities.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.CancelInvoke"></member><member name="M:ScenarioUpgradeableFacilities.CancelInvoke(string)"></member><member name="M:ScenarioUpgradeableFacilities.CheatFacilities"></member><member name="M:ScenarioUpgradeableFacilities.CompareTag(string)"></member><member name="M:ScenarioUpgradeableFacilities.Equals(object)"></member><member name="M:ScenarioUpgradeableFacilities.Finalize"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent"></member><member name="M:ScenarioUpgradeableFacilities.GetComponent(string)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInChildren(System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInParent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentInParent"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents(List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponents"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInChildren(List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Type)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Boolean)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScenarioUpgradeableFacilities.GetComponentsInParent"></member><member name="M:ScenarioUpgradeableFacilities.GetHashCode"></member><member name="M:ScenarioUpgradeableFacilities.GetInstanceID"></member><member name="M:ScenarioUpgradeableFacilities.GetType"></member><member name="M:ScenarioUpgradeableFacilities.Invoke(string,System.Single)"></member><member name="M:ScenarioUpgradeableFacilities.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScenarioUpgradeableFacilities.IsInvoking(string)"></member><member name="M:ScenarioUpgradeableFacilities.IsInvoking"></member><member name="M:ScenarioUpgradeableFacilities.Load(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.MemberwiseClone"></member><member name="M:ScenarioUpgradeableFacilities.OnAwake"></member><member name="M:ScenarioUpgradeableFacilities.OnDestroy"></member><member name="M:ScenarioUpgradeableFacilities.OnLoad(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.OnSave(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.Save(ConfigNode)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string)"></member><member name="M:ScenarioUpgradeableFacilities.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(string,object)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine(string)"></member><member name="M:ScenarioUpgradeableFacilities.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StopAllCoroutines"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(string)"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScenarioUpgradeableFacilities.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScenarioUpgradeableFacilities.ToString"></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility)"><summary>Returns a float representing the current level of a given facility. it varies between 0, the entry level and 1 the max level.</summary></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevel(string)"></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevelCount(SpaceCenterFacility)"><summary>Gets the count of levels for this facility. E.g. 3 for most facilities (as of 1.1)</summary></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityLevelCount(string)"></member><member name="M:ScenarioUpgradeableFacilities.GetFacilityName(SpaceCenterFacility)"></member><member name="M:ScenarioUpgradeableFacilities.RegisterUpgradeable(Upgradeables.UpgradeableFacility,string)"></member><member name="M:ScenarioUpgradeableFacilities.SlashSanitize(string)"></member><member name="M:ScenarioUpgradeableFacilities.UnregisterUpgradeable(Upgradeables.UpgradeableFacility,string)"></member><member name="M:ScenarioUpgradeableFacilities.#ctor"></member><member name="T:ScienceData"><summary>Class containing information on science reports, stored in the persistent file in modules using IScienceDataContainer.</summary></member><member name="F:ScienceData.baseTransmitValue"></member><member name="F:ScienceData.container"></member><member name="F:ScienceData.dataAmount"><summary>Amount of data, in mits, to be transmitted or recovered. Affects transmission time and energy usage.</summary></member><member name="F:ScienceData.labBoost"><summary>Level of science lab boost, less than 1 is un-boosted, 1.5 is the standard lab boosted value, higher levels don't appear to be used.</summary></member><member name="F:ScienceData.labValue"></member><member name="F:ScienceData.subjectID"><summary>ID of science data in Experimentname@CelestialbodynameExperimentalsituationBiome format, matches Science Subject id.</summary></member><member name="F:ScienceData.title"><summary>Science data title, displayed on experimental results dialog page and recovery summary.</summary></member><member name="F:ScienceData.transmitBonus"></member><member name="F:ScienceData.transmitValue"><summary>Percentage of science value that can be transmitted. 1 is equal to the amount gained by returning to Kerbin.</summary></member><member name="F:ScienceData.triggered"></member><member name="M:ScienceData.Equals(object)"></member><member name="M:ScienceData.Finalize"></member><member name="M:ScienceData.GetHashCode"></member><member name="M:ScienceData.GetType"></member><member name="M:ScienceData.Load(ConfigNode)"></member><member name="M:ScienceData.MemberwiseClone"></member><member name="M:ScienceData.Save(ConfigNode)"></member><member name="M:ScienceData.ToString"></member><member name="M:ScienceData.CopyOf(ScienceData)"></member><member name="M:ScienceData.#ctor(ConfigNode)"></member><member name="M:ScienceData.#ctor(System.Single,System.Single,System.Single,string,string,System.Boolean,System.UInt32)"></member><member name="M:ScienceData.#ctor(System.Single,System.Single,System.Single,string,string)"><summary>Generate Science Data based on Science Subject values.</summary><param name="amount">Amount of data, it mits.</param><param name="xmitValue">Transmission value</param><param name="labBoost">Current state of science lab boost</param><param name="id">Matches Science Subject ID</param><param name="dataName">Title of science data</param></member><member name="T:ScienceExperiment"><summary>Class containing information from the experiment stored in the ScienceDefs file.</summary></member><member name="F:ScienceExperiment.baseValue"><summary>Base science value from ScienceDefs file.</summary></member><member name="F:ScienceExperiment.biomeMask"><summary>Bitmask to determine when biomes are relevant.</summary></member><member name="F:ScienceExperiment.dataScale"><summary>Multiplier to increase data amount in mits.</summary></member><member name="F:ScienceExperiment.experimentTitle"><summary>Title to be displayed for experimental results dialog and science archives.</summary></member><member name="F:ScienceExperiment.id"><summary>Matches ID from ModuleScienceExperiment field.</summary></member><member name="F:ScienceExperiment.requireAtmosphere"><summary>Can the experiment only be performed on planets with an atmosphere?</summary></member><member name="F:ScienceExperiment.requiredExperimentLevel"></member><member name="F:ScienceExperiment.scienceCap"><summary>Maximum science value available for each experimental result.</summary></member><member name="F:ScienceExperiment.situationMask"><summary>Bitmask to determine which Experiment Situations the experiment can be performed in.</summary></member><member name="P:ScienceExperiment.Results"></member><member name="M:ScienceExperiment.BiomeIsRelevantWhile(ExperimentSituations)"><summary>Checks if the biome is relevent to the experiment given the biomeMask specified in the ScienceDefs file.</summary><param name="situation">Current Experiment Situation</param><returns/></member><member name="M:ScienceExperiment.Equals(object)"></member><member name="M:ScienceExperiment.Finalize"></member><member name="M:ScienceExperiment.GetHashCode"></member><member name="M:ScienceExperiment.GetType"></member><member name="M:ScienceExperiment.IsAvailableWhile(ExperimentSituations,CelestialBody)"><summary>Determines if the experiment is available given the situationMask and requireAtmosphere values specified in the ScienceDefs file.</summary><param name="situation">Current Experiment Situation</param><param name="body">Current Celestial Body</param><returns/></member><member name="M:ScienceExperiment.IsUnlocked"></member><member name="M:ScienceExperiment.Load(ConfigNode)"></member><member name="M:ScienceExperiment.MemberwiseClone"></member><member name="M:ScienceExperiment.Save(ConfigNode)"></member><member name="M:ScienceExperiment.ToString"></member><member name="M:ScienceExperiment.#ctor"></member><member name="T:ScienceSubject"><summary>Class containing information on a specific science result, data stored in the persistent file under the R&amp;amp;D node.</summary></member><member name="F:ScienceSubject.dataScale"><para>A fixed scaling factor for the size of the data in relation to science units</para><remarks>- Multiply science value by this dataScale value to determine data amount in mits.</remarks></member><member name="F:ScienceSubject.id"><summary>Subject ID in Experimentname@CelestialbodyExperimentalsituationBiome format</summary></member><member name="F:ScienceSubject.science"><para>The amount of science gathered by this subject</para><remarks>- Amount of science already earned from this subject, not updated until after transmission/recovery.</remarks></member><member name="F:ScienceSubject.scienceCap"><para>the target &amp;apos;max&amp;apos; value for scaling the scienceValue</para><remarks>- Total science allowable for this subject, based on subjectValue.</remarks></member><member name="F:ScienceSubject.scientificValue"><para>A scaling factor for the data, that decreases as science is earned on the subject.</para><remarks>- Diminishing value multiplier for decreasing the science value returned from repeated experiments.</remarks></member><member name="F:ScienceSubject.subjectValue"><para>A scaling factor for the data, based on celestial body and experiment situation.</para><remarks>- Multiplier for specific Celestial Body/Experiment Situation combination.</remarks></member><member name="F:ScienceSubject.title"><summary>Title of science subject, displayed in science archives.</summary></member><member name="M:ScienceSubject.Equals(object)"></member><member name="M:ScienceSubject.Finalize"></member><member name="M:ScienceSubject.GetHashCode"></member><member name="M:ScienceSubject.GetType"></member><member name="M:ScienceSubject.HasPartialIDstring(string)"><para>test whether the subject id contains the given string</para></member><member name="M:ScienceSubject.IsFromBody(CelestialBody)"><para>Test whether the subject is from a given celestial body</para></member><member name="M:ScienceSubject.IsFromSituation(ExperimentSituations)"><para>test whether the subject was performed under a given situation</para></member><member name="M:ScienceSubject.Load(ConfigNode)"></member><member name="M:ScienceSubject.MemberwiseClone"></member><member name="M:ScienceSubject.Save(ConfigNode)"></member><member name="M:ScienceSubject.ToString"></member><member name="M:ScienceSubject.#ctor(string,string,System.Single,System.Single,System.Single)"></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,CelestialBody,string,string)"></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,string,string,CelestialBody,string,string)"></member><member name="M:ScienceSubject.#ctor(ConfigNode)"><summary>Return a Science Subject from Research and Development node in the persistent file.</summary><param name="node"/></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,CelestialBody,string)"><summary>Generate new Science Subject.</summary><param name="exp">Science Experiment from ScienceDefs file and ModuleScienceExperiment</param><param name="sit">Current experimantal situation, based on VesselSituation</param><param name="body">Current Celestial Body</param><param name="biome">Current biome if applicable, empty string if not</param></member><member name="M:ScienceSubject.#ctor(ScienceExperiment,ExperimentSituations,string,string,CelestialBody,string)"></member><member name="T:ScreenMessage"><summary>A class representing temporary messages posted to the screen. Don't use this class, use the static methods in ScreenMessages instead.</summary></member><member name="F:ScreenMessage.color"></member><member name="F:ScreenMessage.duration"></member><member name="F:ScreenMessage.guiStyleOverride"></member><member name="F:ScreenMessage.message"></member><member name="F:ScreenMessage.persistAcrossScenes"></member><member name="F:ScreenMessage.startTime"></member><member name="F:ScreenMessage.style"></member><member name="F:ScreenMessage.textInstance"></member><member name="M:ScreenMessage.Equals(object)"></member><member name="M:ScreenMessage.Finalize"></member><member name="M:ScreenMessage.GetHashCode"></member><member name="M:ScreenMessage.GetType"></member><member name="M:ScreenMessage.MemberwiseClone"></member><member name="M:ScreenMessage.ToString"></member><member name="M:ScreenMessage.#ctor(string,System.Single,ScreenMessageStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,System.Boolean,ScreenMessageStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,ScreenMessageStyle,GUIStyle)"></member><member name="M:ScreenMessage.#ctor(string,System.Single,System.Boolean,ScreenMessageStyle,GUIStyle)"></member><member name="T:ScreenMessages"><summary>A class that lets you post temporary messages to the screen. If you use this class your messages will automatically have the same style as regular in-game messages.</summary></member><member name="F:ScreenMessages.activeMessages"><summary>The set of currently active screen messages. This is a non-static member, but you can get a reference to the ScreenMessages instance via</summary><code>ScreenMessages sm = (ScreenMessages)GameObject.FindObjectOfType(typeof(ScreenMessages));</code></member><member name="F:ScreenMessages.defaultColor"></member><member name="F:ScreenMessages.lifetimeGradient"></member><member name="F:ScreenMessages.lowerCenter"></member><member name="F:ScreenMessages.textPrefab"></member><member name="F:ScreenMessages.textStyles"></member><member name="F:ScreenMessages.upperCenter"></member><member name="F:ScreenMessages.upperLeft"></member><member name="F:ScreenMessages.upperRight"></member><member name="F:ScreenMessages.useLifetimeGradient"></member><member name="F:ScreenMessages.useRenderQueue"></member><member name="P:ScreenMessages.ActiveMessages"></member><member name="P:ScreenMessages.enabled"></member><member name="P:ScreenMessages.gameObject"></member><member name="P:ScreenMessages.hideFlags"></member><member name="P:ScreenMessages.isActiveAndEnabled"></member><member name="P:ScreenMessages.name"></member><member name="P:ScreenMessages.tag"></member><member name="P:ScreenMessages.transform"></member><member name="P:ScreenMessages.useGUILayout"></member><member name="P:ScreenMessages.Instance"></member><member name="M:ScreenMessages.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.BroadcastMessage(string,object)"></member><member name="M:ScreenMessages.BroadcastMessage(string)"></member><member name="M:ScreenMessages.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.CancelInvoke"></member><member name="M:ScreenMessages.CancelInvoke(string)"></member><member name="M:ScreenMessages.CompareTag(string)"></member><member name="M:ScreenMessages.Equals(object)"></member><member name="M:ScreenMessages.Finalize"></member><member name="M:ScreenMessages.GetComponent(System.Type)"></member><member name="M:ScreenMessages.GetComponent"></member><member name="M:ScreenMessages.GetComponent(string)"></member><member name="M:ScreenMessages.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:ScreenMessages.GetComponentInChildren(System.Type)"></member><member name="M:ScreenMessages.GetComponentInChildren"></member><member name="M:ScreenMessages.GetComponentInChildren(System.Boolean)"></member><member name="M:ScreenMessages.GetComponentInParent(System.Type)"></member><member name="M:ScreenMessages.GetComponentInParent"></member><member name="M:ScreenMessages.GetComponents(System.Type)"></member><member name="M:ScreenMessages.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:ScreenMessages.GetComponents(List)"></member><member name="M:ScreenMessages.GetComponents"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Type)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:ScreenMessages.GetComponentsInChildren"></member><member name="M:ScreenMessages.GetComponentsInChildren(List)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Type)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Boolean)"></member><member name="M:ScreenMessages.GetComponentsInParent(System.Boolean,List)"></member><member name="M:ScreenMessages.GetComponentsInParent"></member><member name="M:ScreenMessages.GetHashCode"></member><member name="M:ScreenMessages.GetInstanceID"></member><member name="M:ScreenMessages.GetType"></member><member name="M:ScreenMessages.Invoke(string,System.Single)"></member><member name="M:ScreenMessages.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:ScreenMessages.IsInvoking(string)"></member><member name="M:ScreenMessages.IsInvoking"></member><member name="M:ScreenMessages.MemberwiseClone"></member><member name="M:ScreenMessages.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessage(string,object)"></member><member name="M:ScreenMessages.SendMessage(string)"></member><member name="M:ScreenMessages.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,object)"></member><member name="M:ScreenMessages.SendMessageUpwards(string)"></member><member name="M:ScreenMessages.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:ScreenMessages.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StartCoroutine(string,object)"></member><member name="M:ScreenMessages.StartCoroutine(string)"></member><member name="M:ScreenMessages.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StopAllCoroutines"></member><member name="M:ScreenMessages.StopCoroutine(string)"></member><member name="M:ScreenMessages.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:ScreenMessages.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:ScreenMessages.ToString"></member><member name="M:ScreenMessages.PostScreenMessage(string,System.Single,ScreenMessageStyle)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post</param><param name="duration">How long the message should remain on the screen, in seconds.</param><param name="style">Which style of screen message to post--for instance, should it by like the warp message, the quicksaving message, etc.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string,System.Single)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post</param><param name="duration">How long the message should remain on the screen, in seconds.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="message">The message to post.</param><returns>A reference to the posted message</returns></member><member name="M:ScreenMessages.PostScreenMessage(string,ScreenMessage)"></member><member name="M:ScreenMessages.PostScreenMessage(ScreenMessage)"><summary>Post a temporary message to the screen. Examples of screen messages are the "Warp = {number}x" message and the "Quicksaving..." message.</summary><param name="msg">The message to post</param></member><member name="M:ScreenMessages.RemoveMessage(ScreenMessage)"><summary>Remove a currently active message from the screen.</summary><param name="msg">The message to remove</param></member><member name="M:ScreenMessages.#ctor"></member><member name="T:ShipConstruct"></member><member name="F:ShipConstruct.parts"><summary>A list of all the parts in the ShipConstruct. The parts are listed in the same order in which they were added to the ship in the editor.</summary></member><member name="F:ShipConstruct.shipDescription"></member><member name="F:ShipConstruct.shipFacility"></member><member name="F:ShipConstruct.shipName"></member><member name="F:ShipConstruct.shipPartsUnlocked"></member><member name="F:ShipConstruct.shipSize"></member><member name="F:ShipConstruct.shipType"></member><member name="F:ShipConstruct.lastCompatibleMajor"></member><member name="F:ShipConstruct.lastCompatibleMinor"></member><member name="F:ShipConstruct.lastCompatibleRev"></member><member name="P:ShipConstruct.Count"></member><member name="P:ShipConstruct.Item"></member><member name="P:ShipConstruct.Parts"></member><member name="M:ShipConstruct.Add(Part)"></member><member name="M:ShipConstruct.AreAllPartsConnected"></member><member name="M:ShipConstruct.Clear"></member><member name="M:ShipConstruct.Contains(Part)"></member><member name="M:ShipConstruct.Equals(object)"></member><member name="M:ShipConstruct.Finalize"></member><member name="M:ShipConstruct.GetEnumerator"></member><member name="M:ShipConstruct.GetHashCode"></member><member name="M:ShipConstruct.GetShipCosts(float&amp;,float&amp;)"></member><member name="M:ShipConstruct.GetShipCosts(System.Single,System.Single)"></member><member name="M:ShipConstruct.GetShipMass(float&amp;,float&amp;)"></member><member name="M:ShipConstruct.GetTotalMass"></member><member name="M:ShipConstruct.GetType"></member><member name="M:ShipConstruct.isControllable"><para>Returns true if at least one part on this ship is flagged as a control source</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><remarks>-</remarks></member><member name="M:ShipConstruct.LoadShip(ConfigNode)"><para>&amp;lt; assume VAB by default</para><para>&amp;lt; Added for Unity 4 support CJ</para><para>&amp;lt; defaults</para><para>&amp;lt; symP = parts.Find(p =&amp;gt; p.craftID == syms[i][j]);</para><remarks>-</remarks></member><member name="M:ShipConstruct.MemberwiseClone"></member><member name="M:ShipConstruct.Remove(Part)"></member><member name="M:ShipConstruct.SaveShip"><para>&amp;lt; try recalculating ship size here again, some ctors don&amp;apos;t have enough info to set it up correctly there.</para><remarks>-</remarks></member><member name="M:ShipConstruct.ToString"></member><member name="M:ShipConstruct.#ctor"></member><member name="M:ShipConstruct.#ctor(EditorFacility)"></member><member name="M:ShipConstruct.#ctor(string,EditorFacility,System.Collections.Generic.List)"></member><member name="M:ShipConstruct.#ctor(string,string,Part)"></member><member name="M:ShipConstruct.#ctor(string,string,System.Collections.Generic.List)"></member><member name="M:ShipConstruct.#ctor(System.Int32)"></member><member name="M:ShipConstruct.#ctor(string,System.Int32,List&lt;Part&gt;)"></member><member name="T:SpaceCenter"></member><member name="F:SpaceCenter.AreaRadius"></member><member name="F:SpaceCenter.cb"></member><member name="F:SpaceCenter.spaceCenterAreaTrigger"></member><member name="F:SpaceCenter.Instance"></member><member name="P:SpaceCenter.enabled"></member><member name="P:SpaceCenter.gameObject"></member><member name="P:SpaceCenter.hideFlags"></member><member name="P:SpaceCenter.isActiveAndEnabled"></member><member name="P:SpaceCenter.Latitude"></member><member name="P:SpaceCenter.Longitude"></member><member name="P:SpaceCenter.name"></member><member name="P:SpaceCenter.SpaceCenterTransform"></member><member name="P:SpaceCenter.SrfNVector"></member><member name="P:SpaceCenter.tag"></member><member name="P:SpaceCenter.transform"></member><member name="P:SpaceCenter.useGUILayout"></member><member name="M:SpaceCenter.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.BroadcastMessage(string,object)"></member><member name="M:SpaceCenter.BroadcastMessage(string)"></member><member name="M:SpaceCenter.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.CancelInvoke"></member><member name="M:SpaceCenter.CancelInvoke(string)"></member><member name="M:SpaceCenter.CompareTag(string)"></member><member name="M:SpaceCenter.Equals(object)"></member><member name="M:SpaceCenter.Finalize"></member><member name="M:SpaceCenter.GetComponent(System.Type)"></member><member name="M:SpaceCenter.GetComponent"></member><member name="M:SpaceCenter.GetComponent(string)"></member><member name="M:SpaceCenter.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:SpaceCenter.GetComponentInChildren(System.Type)"></member><member name="M:SpaceCenter.GetComponentInChildren"></member><member name="M:SpaceCenter.GetComponentInChildren(System.Boolean)"></member><member name="M:SpaceCenter.GetComponentInParent(System.Type)"></member><member name="M:SpaceCenter.GetComponentInParent"></member><member name="M:SpaceCenter.GetComponents(System.Type)"></member><member name="M:SpaceCenter.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:SpaceCenter.GetComponents(List)"></member><member name="M:SpaceCenter.GetComponents"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Type)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:SpaceCenter.GetComponentsInChildren"></member><member name="M:SpaceCenter.GetComponentsInChildren(List)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Type)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Boolean)"></member><member name="M:SpaceCenter.GetComponentsInParent(System.Boolean,List)"></member><member name="M:SpaceCenter.GetComponentsInParent"></member><member name="M:SpaceCenter.GetHashCode"></member><member name="M:SpaceCenter.GetInstanceID"></member><member name="M:SpaceCenter.GetType"></member><member name="M:SpaceCenter.GreatCircleDistance(Vector3d)"></member><member name="M:SpaceCenter.Invoke(string,System.Single)"></member><member name="M:SpaceCenter.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:SpaceCenter.IsInvoking(string)"></member><member name="M:SpaceCenter.IsInvoking"></member><member name="M:SpaceCenter.MemberwiseClone"></member><member name="M:SpaceCenter.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessage(string,object)"></member><member name="M:SpaceCenter.SendMessage(string)"></member><member name="M:SpaceCenter.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,object)"></member><member name="M:SpaceCenter.SendMessageUpwards(string)"></member><member name="M:SpaceCenter.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:SpaceCenter.Start"></member><member name="M:SpaceCenter.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StartCoroutine(string,object)"></member><member name="M:SpaceCenter.StartCoroutine(string)"></member><member name="M:SpaceCenter.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StopAllCoroutines"></member><member name="M:SpaceCenter.StopCoroutine(string)"></member><member name="M:SpaceCenter.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:SpaceCenter.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:SpaceCenter.ToString"></member><member name="M:SpaceCenter.#ctor"></member><member name="T:Sun"></member><member name="F:Sun.AU"></member><member name="F:Sun.brightnessCurve"></member><member name="F:Sun.brightnessMultiplier"></member><member name="F:Sun.fadeEnd"></member><member name="F:Sun.fadeStart"></member><member name="F:Sun.localTime"></member><member name="F:Sun.scaledSunLight"></member><member name="F:Sun.shadowBiasFlight"></member><member name="F:Sun.shadowBiasSpaceCentre"></member><member name="F:Sun.sun"></member><member name="F:Sun.sunDirection"></member><member name="F:Sun.sunFlare"></member><member name="F:Sun.sunRotation"></member><member name="F:Sun.sunRotationPrecision"></member><member name="F:Sun.target"></member><member name="F:Sun.useLocalSpaceSunLight"></member><member name="F:Sun.Instance"></member><member name="P:Sun.enabled"></member><member name="P:Sun.gameObject"></member><member name="P:Sun.hideFlags"></member><member name="P:Sun.isActiveAndEnabled"></member><member name="P:Sun.name"></member><member name="P:Sun.tag"></member><member name="P:Sun.transform"></member><member name="P:Sun.useGUILayout"></member><member name="M:Sun.Awake"></member><member name="M:Sun.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.BroadcastMessage(string,object)"></member><member name="M:Sun.BroadcastMessage(string)"></member><member name="M:Sun.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.CancelInvoke"></member><member name="M:Sun.CancelInvoke(string)"></member><member name="M:Sun.CompareTag(string)"></member><member name="M:Sun.Equals(object)"></member><member name="M:Sun.Finalize"></member><member name="M:Sun.GameSceneLoadRequested(GameScenes)"></member><member name="M:Sun.GetComponent(System.Type)"></member><member name="M:Sun.GetComponent"></member><member name="M:Sun.GetComponent(string)"></member><member name="M:Sun.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Sun.GetComponentInChildren(System.Type)"></member><member name="M:Sun.GetComponentInChildren"></member><member name="M:Sun.GetComponentInChildren(System.Boolean)"></member><member name="M:Sun.GetComponentInParent(System.Type)"></member><member name="M:Sun.GetComponentInParent"></member><member name="M:Sun.GetComponents(System.Type)"></member><member name="M:Sun.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Sun.GetComponents(List)"></member><member name="M:Sun.GetComponents"></member><member name="M:Sun.GetComponentsInChildren(System.Type)"></member><member name="M:Sun.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Sun.GetComponentsInChildren(System.Boolean)"></member><member name="M:Sun.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Sun.GetComponentsInChildren"></member><member name="M:Sun.GetComponentsInChildren(List)"></member><member name="M:Sun.GetComponentsInParent(System.Type)"></member><member name="M:Sun.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Sun.GetComponentsInParent(System.Boolean)"></member><member name="M:Sun.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Sun.GetComponentsInParent"></member><member name="M:Sun.GetHashCode"></member><member name="M:Sun.GetInstanceID"></member><member name="M:Sun.GetLocalTimeAtPosition(Vector3d,CelestialBody)"><para>&amp;lt; Positive in the solar afternoon.</para><remarks>-</remarks></member><member name="M:Sun.GetLocalTimeAtPosition(System.Double,System.Double,CelestialBody)"></member><member name="M:Sun.GetLocalTimeAtPosition(System.Double,System.Double,System.Double,CelestialBody)"></member><member name="M:Sun.GetType"></member><member name="M:Sun.Invoke(string,System.Single)"></member><member name="M:Sun.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Sun.IsInvoking(string)"></member><member name="M:Sun.IsInvoking"></member><member name="M:Sun.MemberwiseClone"></member><member name="M:Sun.OnDestroy"></member><member name="M:Sun.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessage(string,object)"></member><member name="M:Sun.SendMessage(string)"></member><member name="M:Sun.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.SendMessageUpwards(string,object)"></member><member name="M:Sun.SendMessageUpwards(string)"></member><member name="M:Sun.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Sun.Start"></member><member name="M:Sun.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Sun.StartCoroutine(string,object)"></member><member name="M:Sun.StartCoroutine(string)"></member><member name="M:Sun.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Sun.StopAllCoroutines"></member><member name="M:Sun.StopCoroutine(string)"></member><member name="M:Sun.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Sun.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Sun.SunlightEnabled(System.Boolean)"></member><member name="M:Sun.ToString"></member><member name="M:Sun.#ctor"></member><member name="T:TimeWarp"><summary>The class that handles time warp.</summary></member><member name="F:TimeWarp.altitudeLimits"><summary>Unused? CelestialBodies have their own sets of altitude limits.</summary></member><member name="F:TimeWarp.current_rate_index"></member><member name="F:TimeWarp.maxModeSwitchRate_index"></member><member name="F:TimeWarp.maxPhysicsRate_index"></member><member name="F:TimeWarp.Mode"></member><member name="F:TimeWarp.physicsWarpRates"><summary>The available physics warp rates. In 0.18.2 these are {1, 2, 3, 4} by default. You can modify the available rates by modifying this array.</summary></member><member name="F:TimeWarp.screenTextStyle"></member><member name="F:TimeWarp.setAutoWarp"></member><member name="F:TimeWarp.textDuration"></member><member name="F:TimeWarp.timeQuadrantTab"></member><member name="F:TimeWarp.warpHighButton"></member><member name="F:TimeWarp.warpLowButton"></member><member name="F:TimeWarp.warpRates"><summary>The available regular warp rates. In 0.18.2 these are {1, 5, 10, 50, 100, 1000, 10000, 100000} by default. You can modify the available rates by modifying this array.</summary></member><member name="F:TimeWarp.warpToMaxWarping"></member><member name="F:TimeWarp.warpToMinWarping"></member><member name="F:TimeWarp.warpToUT"></member><member name="F:TimeWarp.fetch"><summary>Use this TimeWarp instance to access non-static members.</summary></member><member name="F:TimeWarp.GThreshold"></member><member name="P:TimeWarp.enabled"></member><member name="P:TimeWarp.gameObject"></member><member name="P:TimeWarp.hideFlags"></member><member name="P:TimeWarp.isActiveAndEnabled"></member><member name="P:TimeWarp.name"></member><member name="P:TimeWarp.tag"></member><member name="P:TimeWarp.transform"></member><member name="P:TimeWarp.useGUILayout"></member><member name="P:TimeWarp.CurrentRate"><summary>The current warp rate, e.g. 50 if the current warp rate is 50x. This number may not be equal to one of the entries in warpRates, because KSP will smoothly interpolate between two warp rates over a period of time when you increase or decrease the warp.</summary></member><member name="P:TimeWarp.CurrentRateIndex"><summary>The index of the current current warp rate in either warpRates or physicsWarpRates, depending on whether WarpMode is HIGH or LOW. Note that CurrentRate may not equal the warp rate indexed by CurrentRateIndex if KSP has not finished interpolating the last warp change.</summary></member><member name="P:TimeWarp.deltaTime"></member><member name="P:TimeWarp.fixedDeltaTime"><summary>The time between FixedUpdate cycles (i.e., the time between physics steps). See the Unity FixedUpdate documentation for more details.</summary></member><member name="P:TimeWarp.MaxPhysicsRate"></member><member name="P:TimeWarp.WarpMode"><summary>Whether we are in regular warp mode or physics warp mode</summary></member><member name="M:TimeWarp.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.BroadcastMessage(string,object)"></member><member name="M:TimeWarp.BroadcastMessage(string)"></member><member name="M:TimeWarp.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.CancelAutoWarp(System.Int32,System.Boolean)"></member><member name="M:TimeWarp.CancelInvoke"></member><member name="M:TimeWarp.CancelInvoke(string)"></member><member name="M:TimeWarp.CompareTag(string)"></member><member name="M:TimeWarp.Equals(object)"></member><member name="M:TimeWarp.Finalize"></member><member name="M:TimeWarp.GetAltitudeLimit(System.Int32,CelestialBody)"><summary>Presumably, gets the minimum altitude in meters above the sea level of the given body at which the given warp rate index is allowed.</summary><param name="i">A warp rate index</param><param name="body">The body in question</param><returns>The minimum altitude in meters at which that warp rate index is allowed</returns></member><member name="M:TimeWarp.GetComponent(System.Type)"></member><member name="M:TimeWarp.GetComponent"></member><member name="M:TimeWarp.GetComponent(string)"></member><member name="M:TimeWarp.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:TimeWarp.GetComponentInChildren(System.Type)"></member><member name="M:TimeWarp.GetComponentInChildren"></member><member name="M:TimeWarp.GetComponentInChildren(System.Boolean)"></member><member name="M:TimeWarp.GetComponentInParent(System.Type)"></member><member name="M:TimeWarp.GetComponentInParent"></member><member name="M:TimeWarp.GetComponents(System.Type)"></member><member name="M:TimeWarp.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:TimeWarp.GetComponents(List)"></member><member name="M:TimeWarp.GetComponents"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Type)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:TimeWarp.GetComponentsInChildren"></member><member name="M:TimeWarp.GetComponentsInChildren(List)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Type)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Boolean)"></member><member name="M:TimeWarp.GetComponentsInParent(System.Boolean,List)"></member><member name="M:TimeWarp.GetComponentsInParent"></member><member name="M:TimeWarp.GetHashCode"></member><member name="M:TimeWarp.GetInstanceID"></member><member name="M:TimeWarp.GetMaxRateForAltitude(System.Double,CelestialBody)"></member><member name="M:TimeWarp.GetType"></member><member name="M:TimeWarp.Invoke(string,System.Single)"></member><member name="M:TimeWarp.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:TimeWarp.IsInvoking(string)"></member><member name="M:TimeWarp.IsInvoking"></member><member name="M:TimeWarp.MemberwiseClone"></member><member name="M:TimeWarp.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessage(string,object)"></member><member name="M:TimeWarp.SendMessage(string)"></member><member name="M:TimeWarp.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.SendMessageUpwards(string,object)"></member><member name="M:TimeWarp.SendMessageUpwards(string)"></member><member name="M:TimeWarp.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:TimeWarp.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StartCoroutine(string,object)"></member><member name="M:TimeWarp.StartCoroutine(string)"></member><member name="M:TimeWarp.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StopAllCoroutines"></member><member name="M:TimeWarp.StopCoroutine(string)"></member><member name="M:TimeWarp.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:TimeWarp.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:TimeWarp.ToString"></member><member name="M:TimeWarp.WarpTo(System.Double,System.Double,System.Double)"></member><member name="M:TimeWarp.SetRate(System.Int32,System.Boolean,System.Boolean)"></member><member name="M:TimeWarp.SetRate(System.Int32,System.Boolean)"><summary>Changes the warp rate to either warpRates[rateIndex] or physicsWarpRates[rate_index], depending on whether WarpMode is HIGH or LOW.</summary><param name="rate_index">The index of the desired new warp rate</param><param name="instant">If false, KSP will gradually smoothly adjust the warp rate up or down until it reaches the target. If true, the warp rate will change instantly.</param></member><member name="M:TimeWarp.#ctor"></member><member name="T:TransactionReasons"></member><member name="T:TutorialScenario"><summary>A TutorialScenario is a ScenarioModule with some added features that are useful for building tutorials or similar kinds of scenarios. A TutorialScenario comes with a builtin in finite state machine for running the scenario and displays "tutorial pages" in a GUI window alongside a picture of a friendly Kerbal instructor. You can take advantage of all these features by making your ScenarioModule a subclass of TutorialScenario.  See HarvesteR's example code in his forum article:   http://forum.kerbalspaceprogram.com/content.php/121-Writing-Tutorials-A-Demo-%28and-some-source-code%29</summary></member><member name="F:TutorialScenario.arrowPrefab"></member><member name="F:TutorialScenario.arrows"></member><member name="F:TutorialScenario.avatarRect"></member><member name="F:TutorialScenario.currentPage"></member><member name="F:TutorialScenario.dialogDisplay"></member><member name="F:TutorialScenario.dRect"></member><member name="F:TutorialScenario.ExclusiveTutorial"></member><member name="F:TutorialScenario.guiSkinName"></member><member name="F:TutorialScenario.instructor"><summary>Controls the animated image of the kerbal instructor. This object lets you make the instructor run various animations .</summary></member><member name="F:TutorialScenario.instructorPortraitSize"></member><member name="F:TutorialScenario.instructorPrefabName"><summary>Set this string in OnAssetSetup to specify which instructor kerbal will appear in the tutorial window. The value "Instructor_Gene" gives Gene Kerman as the instructor. The default if you do not specify anything is Werner von Kerman.</summary></member><member name="F:TutorialScenario.instructorTexture"></member><member name="F:TutorialScenario.mainlight"></member><member name="F:TutorialScenario.rect"></member><member name="F:TutorialScenario.runner"></member><member name="F:TutorialScenario.skin"></member><member name="F:TutorialScenario.snapshot"></member><member name="F:TutorialScenario.targetScenes"></member><member name="F:TutorialScenario.textureBorderRadius"></member><member name="F:TutorialScenario.Tutorial"><summary>The finite state machine that controls the progression of the tutorial.</summary></member><member name="F:TutorialScenario.tutorialArrowPrefabName"></member><member name="F:TutorialScenario.tutorialControlColorString"></member><member name="F:TutorialScenario.TutorialDialogEnabled"><para>If this is an &amp;quot;exclusive&amp;quot; tutorial, or if it is an advisory popup in a normal game.</para></member><member name="F:TutorialScenario.tutorialHighlightColorString"></member><member name="P:TutorialScenario.ClassID"></member><member name="P:TutorialScenario.ClassName"></member><member name="P:TutorialScenario.enabled"></member><member name="P:TutorialScenario.Events"></member><member name="P:TutorialScenario.Fields"></member><member name="P:TutorialScenario.gameObject"></member><member name="P:TutorialScenario.hideFlags"></member><member name="P:TutorialScenario.isActiveAndEnabled"></member><member name="P:TutorialScenario.name"></member><member name="P:TutorialScenario.tag"></member><member name="P:TutorialScenario.transform"></member><member name="P:TutorialScenario.useGUILayout"></member><member name="M:TutorialScenario.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.BroadcastMessage(string,object)"></member><member name="M:TutorialScenario.BroadcastMessage(string)"></member><member name="M:TutorialScenario.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.CancelInvoke"></member><member name="M:TutorialScenario.CancelInvoke(string)"></member><member name="M:TutorialScenario.ClearArrows"></member><member name="M:TutorialScenario.CloseTutorialWindow(System.Boolean)"><para>&amp;lt; can&amp;apos;t set the old one to Started = false, so...</para></member><member name="M:TutorialScenario.CompareTag(string)"></member><member name="M:TutorialScenario.CreateArrow"></member><member name="M:TutorialScenario.DeleteArrow(TutorialArrow)"></member><member name="M:TutorialScenario.Destroy(UnityEngine.Object)"></member><member name="M:TutorialScenario.Equals(object)"></member><member name="M:TutorialScenario.Finalize"></member><member name="M:TutorialScenario.GetComponent(System.Type)"></member><member name="M:TutorialScenario.GetComponent"></member><member name="M:TutorialScenario.GetComponent(string)"></member><member name="M:TutorialScenario.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:TutorialScenario.GetComponentInChildren(System.Type)"></member><member name="M:TutorialScenario.GetComponentInChildren"></member><member name="M:TutorialScenario.GetComponentInChildren(System.Boolean)"></member><member name="M:TutorialScenario.GetComponentInParent(System.Type)"></member><member name="M:TutorialScenario.GetComponentInParent"></member><member name="M:TutorialScenario.GetComponents(System.Type)"></member><member name="M:TutorialScenario.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:TutorialScenario.GetComponents(List)"></member><member name="M:TutorialScenario.GetComponents"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Type)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:TutorialScenario.GetComponentsInChildren"></member><member name="M:TutorialScenario.GetComponentsInChildren(List)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Type)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Boolean)"></member><member name="M:TutorialScenario.GetComponentsInParent(System.Boolean,List)"></member><member name="M:TutorialScenario.GetComponentsInParent"></member><member name="M:TutorialScenario.GetCurrentStateName"></member><member name="M:TutorialScenario.GetHashCode"></member><member name="M:TutorialScenario.GetInstanceID"></member><member name="M:TutorialScenario.GetType"></member><member name="M:TutorialScenario.Invoke(string,System.Single)"></member><member name="M:TutorialScenario.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:TutorialScenario.IsInvoking(string)"></member><member name="M:TutorialScenario.IsInvoking"></member><member name="M:TutorialScenario.Load(ConfigNode)"></member><member name="M:TutorialScenario.MemberwiseClone"></member><member name="M:TutorialScenario.OnAssetSetup"><para>This is called before the tutorial assets are set up. Use this to change the asset settings on subclasses</para><remarks>- Override this function to run some initialization code?</remarks></member><member name="M:TutorialScenario.OnAwake"></member><member name="M:TutorialScenario.OnLoad(ConfigNode)"></member><member name="M:TutorialScenario.OnOnDestroy"></member><member name="M:TutorialScenario.OnSave(ConfigNode)"></member><member name="M:TutorialScenario.OnTutorialSetup"><summary>Override this function to run some code as the tutorial is being set up.</summary></member><member name="M:TutorialScenario.Save(ConfigNode)"></member><member name="M:TutorialScenario.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessage(string,object)"></member><member name="M:TutorialScenario.SendMessage(string)"></member><member name="M:TutorialScenario.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,object)"></member><member name="M:TutorialScenario.SendMessageUpwards(string)"></member><member name="M:TutorialScenario.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:TutorialScenario.SetDialogRect(UnityEngine.Rect)"><summary>Sets the location of the GUI window of the tutorial.</summary><param name="r"/></member><member name="M:TutorialScenario.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StartCoroutine(string,object)"></member><member name="M:TutorialScenario.StartCoroutine(string)"></member><member name="M:TutorialScenario.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StopAllCoroutines"></member><member name="M:TutorialScenario.StopCoroutine(string)"></member><member name="M:TutorialScenario.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:TutorialScenario.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:TutorialScenario.ToString"></member><member name="M:TutorialScenario.GetTutorialNode(string)"></member><member name="M:TutorialScenario.#ctor"></member><member name="T:UI_Scene"><summary>This enum value controls where (i.e. in which game scene) a given action takes place.

Example: UI fields on part modules (such as UI_Toggle) have a property, affectSymCounterparts, that determine "if this UI action happens, should it affect all the symmetry counterparts of the part where the action took place?"  The UI_Scene decides where that would happen.</summary></member><member name="T:UntrackedObjectClass"><summary>Describes an asteroid's size</summary></member><member name="T:Vector3d"><summary>A Vector3d in 3D space. Vector3d is just like Unity's Vector3 class, except it uses doubles instead of floats, so refer to the Unity documentation on Vector3. Vector3d also adds a few functions.</summary></member><member name="F:Vector3d.x"></member><member name="F:Vector3d.y"></member><member name="F:Vector3d.z"></member><member name="F:Vector3d.kEpsilon"></member><member name="P:Vector3d.Item"></member><member name="P:Vector3d.magnitude"></member><member name="P:Vector3d.normalized"></member><member name="P:Vector3d.sqrMagnitude"></member><member name="P:Vector3d.xzy"><summary>Returs a new Vector3d with the y and z coordinates swapped?</summary></member><member name="P:Vector3d.back"><summary>Minus forward</summary></member><member name="P:Vector3d.down"><summary>Minus up</summary></member><member name="P:Vector3d.forward"></member><member name="P:Vector3d.fwd"></member><member name="P:Vector3d.left"><summary>Minus right.</summary></member><member name="P:Vector3d.one"></member><member name="P:Vector3d.right"></member><member name="P:Vector3d.up"></member><member name="P:Vector3d.zero"></member><member name="M:Vector3d.Basis(Vector3d,Vector3d,Vector3d)"></member><member name="M:Vector3d.Equals(object)"></member><member name="M:Vector3d.Finalize"></member><member name="M:Vector3d.GetHashCode"></member><member name="M:Vector3d.GetType"></member><member name="M:Vector3d.IsZero"></member><member name="M:Vector3d.MemberwiseClone"></member><member name="M:Vector3d.Normalize"></member><member name="M:Vector3d.Scale(Vector3d)"></member><member name="M:Vector3d.Swizzle"></member><member name="M:Vector3d.ToString"></member><member name="M:Vector3d.ToString(string)"></member><member name="M:Vector3d.Zero"></member><member name="M:Vector3d.Angle(Vector3d,Vector3d)"></member><member name="M:Vector3d.AngleBetween(Vector3d,Vector3d)"></member><member name="M:Vector3d.Cross(Vector3d,Vector3d)"></member><member name="M:Vector3d.Distance(Vector3d,Vector3d)"></member><member name="M:Vector3d.Dot(Vector3d,Vector3d)"></member><member name="M:Vector3d.Exclude(Vector3d,Vector3d)"><summary>Returns</summary><code>fromThat - Vector3d.Project(fromThat, excludeThis)</code><remarks>. That is, it removes the component of fromThat that is parallel to excludeThis and returns the remainder, which will be perpendicular to excludeThis.</remarks><param name="excludeThis">The direction to exclude from the result.</param><param name="fromThat">The starting vector</param><returns>A vector perpendicular to excludeThis and pointing in the same general direction as fromThat.</returns></member><member name="M:Vector3d.Lerp(Vector3d,Vector3d,System.Double)"></member><member name="M:Vector3d.Lerp(Vector3d,Vector3d,System.Single)"></member><member name="M:Vector3d.Magnitude(Vector3d)"></member><member name="M:Vector3d.Max(Vector3d,Vector3d)"></member><member name="M:Vector3d.Min(Vector3d,Vector3d)"></member><member name="M:Vector3d.Normalize(Vector3d)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d&amp;,Vector3d&amp;,Vector3d&amp;)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d,Vector3d)"></member><member name="M:Vector3d.OrthoNormalize(Vector3d,Vector3d,Vector3d)"></member><member name="M:Vector3d.Project(Vector3d,Vector3d)"></member><member name="M:Vector3d.Reflect(Vector3d,Vector3d)"></member><member name="M:Vector3d.RotateTowards(Vector3d,Vector3d,System.Single,System.Single)"></member><member name="M:Vector3d.Scale(Vector3d,Vector3d)"></member><member name="M:Vector3d.Slerp(Vector3d,Vector3d,System.Single)"></member><member name="M:Vector3d.SqrMagnitude(Vector3d)"></member><member name="M:Vector3d.#ctor(System.Double,System.Double,System.Double)"></member><member name="M:Vector3d.#ctor(System.Double,System.Double)"></member><member name="T:Vessel"><para>Vessels define individual ships in flight. They work essentially as a header for the set of parts that make up the ship.</para><remarks>- A Vessel object represents a single vessel. Parts that break off from a vessel become their own Vessels. Vessels that merge via docking become one Vessel.</remarks></member><member name="F:Vessel.acceleration"><summary>This is a kind of time-averaged acceleration.  What you probably want instead is acceleration_immediate.</summary></member><member name="F:Vessel.acceleration_immediate"><summary>The acceleration of the vessel, in m/s^2.</summary></member><member name="F:Vessel.altitude"><summary>Presumably, this is the current altitude above sea of the vessel, in meters? Is equal to pqsAltitude + heightFromTerrain (where heightFromTerrain is not -1).</summary></member><member name="F:Vessel.angularMomentum"><summary>Presumably, this is the current angular momentum of the vessel?</summary></member><member name="F:Vessel.angularVelocity"><summary>The current angular velocity vector of the vessel.</summary></member><member name="F:Vessel.angularVelocityD"></member><member name="F:Vessel.atmDensity"><summary>Presumably, this is the current density of the atmosphere at the vessel's position?</summary></member><member name="F:Vessel.atmosphericTemperature"></member><member name="F:Vessel.CoM"><summary>Presumably, this is the position of the center of mass of the vessel?</summary></member><member name="F:Vessel.CoMD"></member><member name="F:Vessel.connection"></member><member name="F:Vessel.convectiveCoefficient"></member><member name="F:Vessel.convectiveMachFlux"></member><member name="F:Vessel.crew"></member><member name="F:Vessel.crewableParts"></member><member name="F:Vessel.crewCachedPartCount"></member><member name="F:Vessel.crewedParts"></member><member name="F:Vessel.crossfeedSets"><para>all the crossfeed (i.e. non-vessel-wide) sets on the vessel</para></member><member name="F:Vessel.ctrlState"><summary>The set of flight inputs currently being fed to the vessel. For example the current throttle being applied to the vesesl is vessel.ctrlState.mainThrottle.</summary></member><member name="F:Vessel.currentStage"></member><member name="F:Vessel.directSunlight"></member><member name="F:Vessel.displaylandedAt"><para>A string of where the vessel is landed in Localized language.</para></member><member name="F:Vessel.distanceToSun"></member><member name="F:Vessel.dockingPorts"></member><member name="F:Vessel.dynamicPressurekPa"></member><member name="F:Vessel.east"></member><member name="F:Vessel.EditableNodes"></member><member name="F:Vessel.evaController"><summary>If the vessel is a Kerbal on EVA, this object contains most EVA related information</summary></member><member name="F:Vessel.externalTemperature"></member><member name="F:Vessel.flightPlanNode"></member><member name="F:Vessel.flowGraph"><para>a holder for the flowgraph</para></member><member name="F:Vessel.frameWasRotating"></member><member name="F:Vessel.geeForce"></member><member name="F:Vessel.geeForce_immediate"></member><member name="F:Vessel.graviticAcceleration"></member><member name="F:Vessel.gravityForPos"></member><member name="F:Vessel.gravityMultiplier"></member><member name="F:Vessel.gravityTrue"></member><member name="F:Vessel.gThresh"></member><member name="F:Vessel.heightFromPartOffsetLocal"></member><member name="F:Vessel.heightFromSurface"><summary>Appears to always be -1?</summary></member><member name="F:Vessel.heightFromTerrain"><summary>The vertical distance in meters between the vessel and the nearest terrain (including buildings),  or -1 when sea depth is greater than 600m (terrainAltitude &amp;lt;= -600). Once you are above roughly 42km above ground it turns to -1 again (only confirmed on Kerbin so far)</summary></member><member name="F:Vessel.horizontalSrfSpeed"><summary>Presumably, the horizontal component of srf_velocity, in m/s.</summary></member><member name="F:Vessel.id"><para>Unique identifier for each vessel.</para><remarks>- A unique identifier assigned to a vessel. When two vessels dock, the combined vessel has the id of the vessel docked to. On undock, the vessel undocked from keeps its id, the vessel that undocks gets a new id.  Note that this id is always fresh, a vessel gets a different id when it undocks then it had before docking. This is the pid value in the persistent.sfs at the VESSEL level.</remarks></member><member name="F:Vessel.indicatedAirSpeed"></member><member name="F:Vessel.krakensbaneAcc"></member><member name="F:Vessel.Landed"><summary>Whether the vessel is currently sitting on the ground.</summary></member><member name="F:Vessel.landedAt"><para>A string of where the vessel is landed in English.</para></member><member name="F:Vessel.landedAtLast"></member><member name="F:Vessel.lastBody"></member><member name="F:Vessel.lastUT"><para>for use in FI when checking if vessel has spent time unloaded.</para></member><member name="F:Vessel.lastVel"></member><member name="F:Vessel.latitude"><summary>The current latitude of the vessel over the current mainBody, in degrees.</summary></member><member name="F:Vessel.launchTime"><summary>The universal time at which the vessel was launched, in seconds?</summary></member><member name="F:Vessel.loaded"><summary>Whether the vessel is currently loaded. [outdated?]Vessels are only loaded when they come within about 2.5km of the active vessel.[outdated?]
Vessels are loaded when they come within the load distance witch depends on the current situation (landet, orbiting, ...) usualy 2.5km see also</summary><see cref="#classesVesselRanges"/><remarks>VesselRanges&lt;/see&gt;</remarks></member><member name="F:Vessel.localCoM"><para>This is used for persistence purposes. Use findLocalCenterOfMass() if you just want the center of mass.</para></member><member name="F:Vessel.longitude"><summary>The current longitude of the vessel over the current mainBody, in degrees</summary></member><member name="F:Vessel.mach"></member><member name="F:Vessel.mapObject"></member><member name="F:Vessel.maxControlLevel"></member><member name="F:Vessel.missionTime"><summary>Mission elapsed time, in seconds, maybe?</summary></member><member name="F:Vessel.MOI"></member><member name="F:Vessel.navigationWaypoint"><para>the active navigation waypoint for this vessel</para></member><member name="F:Vessel.nextVel"></member><member name="F:Vessel.north"></member><member name="F:Vessel.objectUnderVessel"></member><member name="F:Vessel.obt_speed"><summary>Presumably obt_velocity.magnitude.

Vessel.obt_velocity and .srf_velocity and the spd versions are not valid in FixedUpdate unless on rails. This is because they are based off what the orbit is estimated to be after PhysX integration runs (i.e. after all FixedUpdates run).  (From http://forum.kerbalspaceprogram.com/index.php?/topic/147576-modders-notes-for-ksp-12/)</summary></member><member name="F:Vessel.obt_velocity"><summary>The current velocity of the vessel, in world coordinates, in the nonrotating inertial reference frame.

Vessel.obt_velocity and .srf_velocity and the spd versions are not valid in FixedUpdate unless on rails. This is because they are based off what the orbit is estimated to be after PhysX integration runs (i.e. after all FixedUpdates run).  (From http://forum.kerbalspaceprogram.com/index.php?/topic/147576-modders-notes-for-ksp-12/)</summary></member><member name="F:Vessel.OnAutopilotUpdate"></member><member name="F:Vessel.OnFlyByWire"><para>pass the control state from the scene handler to this vessel.</para><remarks>- You can add your own function to this callback to register a function that can provide flight control input to the vessel. Once you've registered this callback, it will be called once per FixedUpdate. Provide flight control input by modifying the FlightCtrlState passed to your function. This FlightCtrlState will already contain the player's input, which you can modify or override as desired.</remarks><example><code>void MyAutopilotFunction(FlightCtrlState s) {   s.yaw = 1; } ... vessel.OnFlyByWire += MyAutopilotFunction</code>This will create an autopilot that always yaws hard to the right. You can probably devise something more useful, though...</example></member><member name="F:Vessel.OnJustAboutToBeDestroyed"><summary>You can add a function to this callback, and the function will be called when the vessel is "just about to be destroyed."</summary></member><member name="F:Vessel.OnPostAutopilotUpdate"></member><member name="F:Vessel.OnPreAutopilotUpdate"></member><member name="F:Vessel.orbitDriver"><summary>This is the 'parent' container for everything to do with the vessels orbit, use OrbitDriver.orbit to find and set information about the vessel orbit.</summary></member><member name="F:Vessel.orbitRenderer"></member><member name="F:Vessel.orbitTargeter"></member><member name="F:Vessel.packed"><para>landing / splashdown detection</para><remarks>- Whether the vessel is currently packed. Vessels are only packed when the come within about 300m of the active vessel.</remarks></member><member name="F:Vessel.partMaxGThresh"></member><member name="F:Vessel.partMaxPresThresh"></member><member name="F:Vessel.parts"><summary>A list of the parts in the vessel. Note that when the vessel is not loaded, this list will be empty.</summary></member><member name="F:Vessel.patchedConicRenderer"></member><member name="F:Vessel.patchedConicSolver"><summary>Among other things, the patchedConicSolver stores information about the player's current set of maneuver nodes.</summary></member><member name="F:Vessel.permanentGroundContact"></member><member name="F:Vessel.perturbation"></member><member name="F:Vessel.perturbation_immediate"></member><member name="F:Vessel.pqsAltitude"><summary>Presumably, the height in meters of the planet's terrain QuadSphere directly under the vessel, compared to sea level. This does not take the height of buildings into account. It is generally within +/- 1m of terrainAltitude,  except when over buildings (terrainAltitude does account for buildings) or sea with a depth of greater than 600m (terrainAltitude &amp;lt;= -600, heightFromTerrain == -1).</summary></member><member name="F:Vessel.precalc"></member><member name="F:Vessel.presThresh"></member><member name="F:Vessel.protoVessel"><summary>The protoVessel can be used to get some saved information about unloaded vessels.</summary></member><member name="F:Vessel.pTI"></member><member name="F:Vessel.radarAltitude"></member><member name="F:Vessel.rb_velocity"></member><member name="F:Vessel.rb_velocityD"></member><member name="F:Vessel.referenceTransformId"><summary>This is the flightID of the part that is the current 'Control from Here' part. This is the root part until changed by the player. The vessel transform is set to the transform of this part. This is the 'ref' value in the persistent.sfs at the VESSEL level.</summary></member><member name="F:Vessel.referenceTransformIdRecall"></member><member name="F:Vessel.resourcePartSet"><para>The vessel partset.</para></member><member name="F:Vessel.resourcesDirty"><para>We set the dirty flag if we&amp;apos;re waiting.</para></member><member name="F:Vessel.rootPart"><summary>The root of the tree of parts that comprises the vessel. Usually this is the original command pod placed when constructing the vessel.</summary></member><member name="F:Vessel.situation"><summary>Some coarse information about the current state of the vessel.</summary></member><member name="F:Vessel.solarFlux"></member><member name="F:Vessel.specificAcceleration"><para>Specific acceleration is the vessel&amp;apos;s potential acceleration per unit of throttle. Used to estimate burn times and such. NOTE: this value is calculated based on smoothed acceleration, so it isn&amp;apos;t completely accurate. It will also change as the vessel&amp;apos;s mass is reduced as fuel burns away. (it does get pretty accurate after burning for a few seconds)</para></member><member name="F:Vessel.speed"></member><member name="F:Vessel.speedOfSound"></member><member name="F:Vessel.Splashed"><summary>Whether the vessel is currently splashed down.</summary></member><member name="F:Vessel.srf_vel_direction"><summary>Presumably srf_velocity / srf_velocity.magnitude

Vessel.obt_velocity and .srf_velocity and the spd versions are not valid in FixedUpdate unless on rails. This is because they are based off what the orbit is estimated to be after PhysX integration runs (i.e. after all FixedUpdates run).  (From http://forum.kerbalspaceprogram.com/index.php?/topic/147576-modders-notes-for-ksp-12/)</summary></member><member name="F:Vessel.srf_velocity"><summary>The velocity of the vessel in the "surface" reference frame, the reference frame that rotates with the planet.

Vessel.obt_velocity and .srf_velocity and the spd versions are not valid in FixedUpdate unless on rails. This is because they are based off what the orbit is estimated to be after PhysX integration runs (i.e. after all FixedUpdates run).  (From http://forum.kerbalspaceprogram.com/index.php?/topic/147576-modders-notes-for-ksp-12/)</summary></member><member name="F:Vessel.srfRelRotation"></member><member name="F:Vessel.srfSpeed"><summary>Vessel.obt_velocity and .srf_velocity and the spd versions are not valid in FixedUpdate unless on rails. This is because they are based off what the orbit is estimated to be after PhysX integration runs (i.e. after all FixedUpdates run).  (From http://forum.kerbalspaceprogram.com/index.php?/topic/147576-modders-notes-for-ksp-12/)</summary></member><member name="F:Vessel.state"></member><member name="F:Vessel.staticPressurekPa"><summary>Presumably, the atmospheric pressure at the vessel's current location.</summary></member><member name="F:Vessel.targetObject"></member><member name="F:Vessel.terrainAltitude"><summary>The height in meters of the nearest terrain (including buildings) directly under the vessel, compared to sea level. Ground which is underwater will have a negative terrainAltitude.</summary></member><member name="F:Vessel.terrainNormal"></member><member name="F:Vessel.totalMass"></member><member name="F:Vessel.up"></member><member name="F:Vessel.upAxis"></member><member name="F:Vessel.updateResourcesOnEvent"><para>do we update immediately on event, or wait until the end of a series of modify events (i.e. vessel instantiation or decoupling)</para></member><member name="F:Vessel.velocityD"></member><member name="F:Vessel.verticalSpeed"><summary>Presumably, the vertical speed of the vessel in m/s.</summary></member><member name="F:Vessel.vesselModules"></member><member name="F:Vessel.vesselName"><summary>The name of the vessel as it appears in e.g. the tracking station.</summary></member><member name="F:Vessel.vesselRanges"></member><member name="F:Vessel.vesselTransform"></member><member name="F:Vessel.vesselType"><summary>The type of the vessel, as shown by the type of icon on the map view.</summary></member><member name="F:Vessel.waterOffset"></member><member name="F:Vessel.HeightFromPartOffsetGlobal"></member><member name="F:Vessel.PartialControlHasSASRCS"></member><member name="F:Vessel.warningThresholdG"></member><member name="F:Vessel.warningThresholdPres"></member><member name="P:Vessel.ActionGroups"></member><member name="P:Vessel.AutoClean"></member><member name="P:Vessel.AutoCleanReason"></member><member name="P:Vessel.Autopilot"></member><member name="P:Vessel.BestSituation"></member><member name="P:Vessel.Connection"></member><member name="P:Vessel.CurrentCoM"></member><member name="P:Vessel.CurrentControlLevel"></member><member name="P:Vessel.DiscoveryInfo"><summary>Describes to what extent this object has been explored</summary></member><member name="P:Vessel.distanceLandedPackThreshold"></member><member name="P:Vessel.distanceLandedUnpackThreshold"></member><member name="P:Vessel.distancePackThreshold"></member><member name="P:Vessel.distanceUnpackThreshold"></member><member name="P:Vessel.enabled"></member><member name="P:Vessel.EVALadderVessel"></member><member name="P:Vessel.gameObject"></member><member name="P:Vessel.hideFlags"></member><member name="P:Vessel.HoldPhysics"></member><member name="P:Vessel.isActiveAndEnabled"></member><member name="P:Vessel.isActiveVessel"><summary>Whether the player is currently controlling this vessel.</summary></member><member name="P:Vessel.isCommandable"></member><member name="P:Vessel.IsControllable"><para>True if the vessel has at least one operational control source and is active (focused).</para></member><member name="P:Vessel.isEVA"></member><member name="P:Vessel.isPersistent"></member><member name="P:Vessel.IsRecoverable"></member><member name="P:Vessel.Item"></member><member name="P:Vessel.Item"></member><member name="P:Vessel.LandedInKSC"></member><member name="P:Vessel.LandedOrSplashed"><summary>Landed || Splashed; use this to determined whether the vessel is on the ground somewhere, whether on land or water.</summary></member><member name="P:Vessel.mainBody"><summary>The body whose sphere of influence the vessel is currently in.</summary></member><member name="P:Vessel.name"></member><member name="P:Vessel.orbit"><summary>The current orbit of the vessel.</summary></member><member name="P:Vessel.Parts"><summary>A list of the parts this vessel is composed of.</summary></member><member name="P:Vessel.PatchedConicsAttached"></member><member name="P:Vessel.ReferenceTransform"><para>The reference transform is used to define the orientation of a vessel for controls and gauges. It defines which way is &amp;apos;up&amp;apos; or &amp;apos;forward&amp;apos; or which way pitch rotates, for instance. Read only. Use SetReferenceTransform to set. Defaults to vessel transform if no other transform is set.</para></member><member name="P:Vessel.SituationString"><para>Returns the Localized &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; situation String</para></member><member name="P:Vessel.tag"></member><member name="P:Vessel.transform"></member><member name="P:Vessel.useGUILayout"></member><member name="P:Vessel.VesselValues"></member><member name="P:Vessel.loadDistance"></member><member name="P:Vessel.unloadDistance"></member><member name="M:Vessel.AttachPatchedConicsSolver"></member><member name="M:Vessel.BackupVessel"></member><member name="M:Vessel.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.BroadcastMessage(string,object)"></member><member name="M:Vessel.BroadcastMessage(string)"></member><member name="M:Vessel.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.BuildCrossfeedPartSets"></member><member name="M:Vessel.CancelInvoke"></member><member name="M:Vessel.CancelInvoke(string)"></member><member name="M:Vessel.ChangeWorldVelocity(Vector3d)"><para>change the worldspace velocity of this vessel</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- Add a given velocity offset to the vessels current velocity, instantaneously (may only work for loaded vessels?)</remarks><param name="velOffset"/></member><member name="M:Vessel.CheckKill"></member><member name="M:Vessel.checkLanded"></member><member name="M:Vessel.checkSplashed"></member><member name="M:Vessel.checkVisibility"><para>Returns true if this vessel is within the visible range of any commandable (focusable) vessel, false otherwise.</para></member><member name="M:Vessel.Clean(string)"></member><member name="M:Vessel.ClearActiveInternalSpace"><para>Sets all internal spaces in the vessel invisible</para></member><member name="M:Vessel.ClearStaging"></member><member name="M:Vessel.CompareTag(string)"></member><member name="M:Vessel.ContainsCollider(UnityEngine.Collider)"><para>Checks colliders on all parts to see if the given one belongs to any of them.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;c&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.CrewListSetDirty"></member><member name="M:Vessel.CycleAllAutoStrut"><para>&amp;lt; Cycle any auto-struts</para></member><member name="M:Vessel.DespawnCrew"></member><member name="M:Vessel.DestroyVesselComponents"></member><member name="M:Vessel.DetachPatchedConicsSolver"></member><member name="M:Vessel.Die"></member><member name="M:Vessel.Equals(object)"></member><member name="M:Vessel.FallBackReferenceTransform"></member><member name="M:Vessel.FeedInputFeed"></member><member name="M:Vessel.Finalize"></member><member name="M:Vessel.FindDefaultVesselType"></member><member name="M:Vessel.findLocalCenterOfPressure"><summary>Broken Function with expensive runtime. Do not use. (If it worked it'd do as the name says but it doesn't as of 0.23.5)</summary><returns/></member><member name="M:Vessel.findLocalMOI(UnityEngine.Vector3)"><summary>Returns the vessel's moment of inertia around its center of mass. &lt;warning&gt;Returns nonsense answers; DO NOT USE&lt;/warning&gt;</summary></member><member name="M:Vessel.FindPartModuleImplementing"></member><member name="M:Vessel.FindPartModulesImplementing"><summary>Returns a list of part modules on the vessel that implement module T, useful for finding modules on an unloaded craft.  Returns List&lt;T&gt; where T is the module being searched for.</summary></member><member name="M:Vessel.findWorldCenterOfMass"><summary>Computes and returns the position of the center of mass of the vessel, in world coordinates.</summary><returns/></member><member name="M:Vessel.GetActiveParts"></member><member name="M:Vessel.GetActiveTargetable"></member><member name="M:Vessel.GetComponent(System.Type)"></member><member name="M:Vessel.GetComponent"></member><member name="M:Vessel.GetComponent(string)"></member><member name="M:Vessel.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:Vessel.GetComponentInChildren(System.Type)"></member><member name="M:Vessel.GetComponentInChildren"></member><member name="M:Vessel.GetComponentInChildren(System.Boolean)"></member><member name="M:Vessel.GetComponentInParent(System.Type)"></member><member name="M:Vessel.GetComponentInParent"></member><member name="M:Vessel.GetComponents(System.Type)"></member><member name="M:Vessel.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:Vessel.GetComponents(List)"></member><member name="M:Vessel.GetComponents"></member><member name="M:Vessel.GetComponentsInChildren(System.Type)"></member><member name="M:Vessel.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:Vessel.GetComponentsInChildren(System.Boolean)"></member><member name="M:Vessel.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:Vessel.GetComponentsInChildren"></member><member name="M:Vessel.GetComponentsInChildren(List)"></member><member name="M:Vessel.GetComponentsInParent(System.Type)"></member><member name="M:Vessel.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:Vessel.GetComponentsInParent(System.Boolean)"></member><member name="M:Vessel.GetComponentsInParent(System.Boolean,List)"></member><member name="M:Vessel.GetComponentsInParent"></member><member name="M:Vessel.GetConnectedResourceTotals(System.Int32,double&amp;,double&amp;,System.Boolean)"></member><member name="M:Vessel.GetConnectedResourceTotals(System.Int32,double&amp;,double&amp;,System.Double,System.Boolean)"></member><member name="M:Vessel.GetCrewCapacity"></member><member name="M:Vessel.GetCrewCount"><summary>The number of kerbals inside the vessel. This is ONLY reliable when the vessel is loaded (vessel.loaded == true).  When the vessel is unloaded you can compute the crew count as</summary><code>vessel.protoVessel.protoPartSnapshots.Sum(pps =&gt; pps.protoModuleCrew.Count))</code><returns/></member><member name="M:Vessel.GetCurrentOrbit"></member><member name="M:Vessel.GetDisplayName"></member><member name="M:Vessel.GetFwdVector"></member><member name="M:Vessel.GetHashCode"></member><member name="M:Vessel.GetHeightFromSurface"><para>Get the &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; height from the surface. Similar to GetHeightFromTerrain but checks against all surfaces. Sets heightFromSurface to the vessel height as well. Or -1 if not found.</para><para>&lt;simplesect kind='return'&gt;<para>the vessel height from the surface</para>&lt;/simplesect&gt;</para></member><member name="M:Vessel.GetHeightFromTerrain"></member><member name="M:Vessel.GetInstanceID"></member><member name="M:Vessel.GetName"></member><member name="M:Vessel.GetObtVelocity"></member><member name="M:Vessel.GetOrbit"></member><member name="M:Vessel.GetOrbitDriver"></member><member name="M:Vessel.GetReferenceTransformPart"></member><member name="M:Vessel.GetSrfVelocity"></member><member name="M:Vessel.GetTargetingMode"></member><member name="M:Vessel.GetTotalMass"><para>Get the sum of the mass of all (physical) parts on this vessel</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para><para>&amp;lt; if (p.physicalSignificance != Part.PhysicalSignificance.FULL) continue;</para><para>&amp;lt; CJ Adding resources Support</para></member><member name="M:Vessel.GetTransform"><summary>Gets the transform of the part the vessel is being controlled from (i.e., the part set by the "control from here" right click option).</summary><returns/></member><member name="M:Vessel.GetType"></member><member name="M:Vessel.GetVessel"></member><member name="M:Vessel.GetVesselCrew"></member><member name="M:Vessel.GetWorldPos3D"><para>Get a double precision vector for the vessel&amp;apos;s worldspace position (for when transform.position isn&amp;apos;t accurate enough)</para><para>&lt;simplesect kind='return'&gt;<para/>&lt;/simplesect&gt;</para></member><member name="M:Vessel.GoOffRails"><para>puts the ship back into a simulated orbit and reenables physics</para><para>&amp;lt; can&amp;apos;t unpack unloaded vessels</para><para>&amp;lt; don&amp;apos;t unpack landed vessels if the planet is actually spinning.</para><remarks>- Pulls the vessel off rails?</remarks></member><member name="M:Vessel.GoOnRails"><para>disables physics and puts the ship into a propagated orbit</para><remarks>- Puts the vessel on rails?</remarks></member><member name="M:Vessel.HasValidContractObjectives(string[])"></member><member name="M:Vessel.HasValidContractObjectives(System.Collections.Generic.List,System.Boolean)"></member><member name="M:Vessel.IgnoreGForces(System.Int32)"></member><member name="M:Vessel.Initialize(System.Boolean)"><para>Initialize is used in cases where the &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; component is added to a ship that already exists.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;fromShipAssembly&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; store these in separate variables, because the rootPart values will get recalculated</para><para>&amp;lt; reset connected and attached flags if the vessel is more than debris</para><para>&amp;lt; New vessels always start out as being inactive</para><para>&amp;lt; lock controls until able to unpack</para><para>&amp;lt; throw this event to notify our parts that their vessel got modified (in this case, replaced entirely)</para><para>&amp;lt; the ship constructor will do this in the ship case.</para></member><member name="M:Vessel.Invoke(string,System.Single)"></member><member name="M:Vessel.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:Vessel.IsClearToSave"></member><member name="M:Vessel.IsFirstFrame"></member><member name="M:Vessel.IsInvoking(string)"></member><member name="M:Vessel.IsInvoking"></member><member name="M:Vessel.KillPermanentGroundContact"></member><member name="M:Vessel.Load"><para>&amp;lt; correct altitude based on &lt;ref refid='class_p_q_s' kindref='compound'&gt;PQS&lt;/ref&gt; nominal height for the current lat/lon</para></member><member name="M:Vessel.LoadVesselModules(ConfigNode)"></member><member name="M:Vessel.MakeActive"></member><member name="M:Vessel.MakeInactive"><para>&amp;lt; Kill any targeting.</para></member><member name="M:Vessel.MemberwiseClone"></member><member name="M:Vessel.MurderCrew"></member><member name="M:Vessel.OffsetVelocity(Vector3d)"></member><member name="M:Vessel.onCrewTransferred(GameEvents+HostedFromToAction)"></member><member name="M:Vessel.OnDestroy"></member><member name="M:Vessel.OnLoadFlightState(System.Collections.Generic.Dictionary)"></member><member name="M:Vessel.OnSaveFlightState(System.Collections.Generic.Dictionary)"></member><member name="M:Vessel.PQSAltitude"></member><member name="M:Vessel.printCollisions"></member><member name="M:Vessel.printGroundContacts"></member><member name="M:Vessel.RebuildCrewList"></member><member name="M:Vessel.RecallReferenceTransform"></member><member name="M:Vessel.RemoveCrew(ProtoCrewMember)"></member><member name="M:Vessel.RemoveCrew(string)"></member><member name="M:Vessel.RemoveCrewList(System.Collections.Generic.List,System.Boolean)"></member><member name="M:Vessel.RenameVessel"></member><member name="M:Vessel.RequestResource(Part,System.Int32,System.Double,System.Boolean)"><para>Request a resource from across the vessel.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;part&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The part requesting the pull/push of the resource</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;id&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the hash of the resource&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;demand&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;the demand in units, positive means draw (pull), negative means push&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;usePriority&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;draw in staging order&lt;/para&gt;&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;&lt;/para&gt;&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.ResetCollisionIgnores"></member><member name="M:Vessel.ResetGroundContact"></member><member name="M:Vessel.ResumeNavigation"><para>Method called when vessel goes active, we need to start a coroutine while we wait for the contractsystem to be loaded</para></member><member name="M:Vessel.ResumeStaging"></member><member name="M:Vessel.ResumeTarget"></member><member name="M:Vessel.RevealAltitude"><summary>Returns the vessel's altitude above the reference sphere of the CelestialBody it orbits.  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealDisplayName"></member><member name="M:Vessel.RevealMass"><summary>Returns the vessel's mass, in tons  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealName"><summary>Returns the vessel's tracking station name  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealSituationString"><summary>Describes the state of the vessel</summary><returns>A string containing the sphere of influence and trajectory of the object</returns><example>"Orbiting the Sun"</example><remarks>Implements IDiscoverable</remarks></member><member name="M:Vessel.RevealSpeed"><summary>Returns the vessel's speed  Implements IDiscoverable</summary></member><member name="M:Vessel.RevealType"><summary>Returns the type of the vessel</summary><returns>A string representation of vesselType</returns><remarks>Implements IDiscoverable</remarks></member><member name="M:Vessel.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessage(string,object)"></member><member name="M:Vessel.SendMessage(string)"></member><member name="M:Vessel.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SendMessageUpwards(string,object)"></member><member name="M:Vessel.SendMessageUpwards(string)"></member><member name="M:Vessel.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:Vessel.SetActiveInternalSpace(Part)"><para>Sets the internal space for the given part visible (and all others invisible)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;visiblePart&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Vessel.SetActiveInternalSpaces(System.Collections.Generic.HashSet)"></member><member name="M:Vessel.SetAutoClean(string)"></member><member name="M:Vessel.SetLandedAt(string,UnityEngine.GameObject,string)"><para>Set the LandedAt and displaylandedAt variables. an optional GameObject and an optional inputdisplaylandedAt string can be passed in. The landedAt field will be set to the passed in landedAt string. If an inputdisplaylandedAt string is passed in then the displaylandedAt string is set to this string (Usually localized language). If the inputdisplaylandedAt is empty and a GameObject is supplied the GameObject Unity Tag will be used to lookup a &lt;ref refid='class_mini_biome' kindref='compound'&gt;MiniBiome&lt;/ref&gt; name. If no inputdisplaylandedAt or GameObject are passed in the displaylandedAt field is set to the landedAt field.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;landedAt&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;gO&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;inputdisplaylandedAt&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Vessel.SetLoaded(System.Boolean)"></member><member name="M:Vessel.SetPosition(Vector3d)"></member><member name="M:Vessel.SetPosition(Vector3d,System.Boolean)"><para>Sets the worldspace position of this vessel, and all its parts</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;position&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><para>&amp;lt; physicsless parts will be moved along with their parents</para></member><member name="M:Vessel.SetReferenceTransform(Part,System.Boolean)"><para>&amp;lt; unset the ref transform id if setting a null transform.</para></member><member name="M:Vessel.SetRotation(UnityEngine.Quaternion)"><para>Sets the worldspace rotation of this vessel, and all its parts</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;rotation&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Vessel.SetRotation(UnityEngine.Quaternion,System.Boolean)"><para>Sets the worldspace rotation of this vessel, and all its parts. Accepts bool on whether to reset pos (leave false if pos is set elsewhere)</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;rotation&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para></member><member name="M:Vessel.SetWorldVelocity(Vector3d)"><para>set the absolute world velocity of this vessel</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;vel&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;</para><remarks>- Sets the velocity of the vessel to a new value, instantaneously. May only work for loaded vessels?</remarks><param name="vel"/></member><member name="M:Vessel.SpawnCrew"></member><member name="M:Vessel.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:Vessel.StartCoroutine(string,object)"></member><member name="M:Vessel.StartCoroutine(string)"></member><member name="M:Vessel.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:Vessel.StartFromBackup(ProtoVessel)"><para>Start from backup is used when the scene is being resumed, and the &lt;ref refid='class_vessel' kindref='compound'&gt;Vessel&lt;/ref&gt; component is added before the parts themselves. Note that this method won&amp;apos;t load the parts. It only creates the vessel object. To load parts, use the &lt;ref refid='class_vessel_1a8f5cc26078b9d4a7558fe8d11232fe3f' kindref='member'&gt;Vessel.Load()&lt;/ref&gt; method.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;backup&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;para&gt;The Protovessel object for this vessel</para><remarks>&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.StopAllCoroutines"></member><member name="M:Vessel.StopCoroutine(string)"></member><member name="M:Vessel.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:Vessel.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:Vessel.ToString"></member><member name="M:Vessel.Translate(Vector3d)"></member><member name="M:Vessel.Unload"></member><member name="M:Vessel.UpdateAcceleration(System.Double,System.Boolean)"><para>&amp;lt; If we&amp;apos;re not dead and we have the engines on, then let&amp;apos;s compute an estimated acceleration from engines.</para></member><member name="M:Vessel.UpdateCaches"><para>&amp;lt; do data transmitter thingie here</para></member><member name="M:Vessel.UpdateLandedSplashed"></member><member name="M:Vessel.UpdatePosVel"><para>&amp;lt; use CoM, not root part</para><para>&amp;lt; Pythagorean idea thanks to suggestion from Toadicus on modders&amp;apos; corner tracker. And it&amp;apos;s even faster than the old trig version, too!</para></member><member name="M:Vessel.UpdateResourceSets"><para>Clears dirty flag and updates the vessel and the crossfeed sets</para></member><member name="M:Vessel.UpdateResourceSetsIfDirty"><para>Will update only if dirty.</para></member><member name="M:Vessel.UpdateVesselModuleActivation"></member><member name="M:Vessel.AutoRename(Vessel,string)"></member><member name="M:Vessel.CrewWasModified(Vessel)"></member><member name="M:Vessel.CrewWasModified(Vessel,Vessel)"></member><member name="M:Vessel.GetDominantVessel(Vessel,Vessel)"><para>Find the dominant vessel on a dock situation. The dominant vessel will have the secondary merged into it.</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v1&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v2&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.GetLandedAtString(string)"><para>Get the landedAt string in English</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;landedAt&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;LandedAt string in English with spaces</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.GetMETString(Vessel)"></member><member name="M:Vessel.GetNextManeuverTime(Vessel,bool&amp;)"></member><member name="M:Vessel.GetSituationString(Vessel+Situations)"></member><member name="M:Vessel.GetSituationString(Vessel)"><para>Get the Situation String, Will be Localized</para><para>&lt;parameterlist kind='param'&gt;&lt;parameteritem&gt;
&lt;parameternamelist&gt;
&lt;parametername&gt;v&lt;/parametername&gt;
&lt;/parameternamelist&gt;
&lt;parameterdescription&gt;
&lt;/parameterdescription&gt;
&lt;/parameteritem&gt;
&lt;/parameterlist&gt;
&lt;simplesect kind='return'&gt;&lt;para&gt;</para><remarks>&lt;/simplesect&gt;
&lt;/para&gt;</remarks></member><member name="M:Vessel.IsValidVesselName(string)"></member><member name="M:Vessel.#ctor"></member><member name="T:VesselModule"><summary>Like "PartModule for vessels."  If you have a VesselModule subclass, an instance of your module will be added to every vessel in the game at vessel creation time, and destroyed when the vessel is destroyed.</summary></member><member name="F:VesselModule.fields"></member><member name="F:VesselModule.vessel"></member><member name="P:VesselModule.enabled"></member><member name="P:VesselModule.Fields"></member><member name="P:VesselModule.gameObject"></member><member name="P:VesselModule.hideFlags"></member><member name="P:VesselModule.isActiveAndEnabled"></member><member name="P:VesselModule.name"></member><member name="P:VesselModule.tag"></member><member name="P:VesselModule.transform"></member><member name="P:VesselModule.useGUILayout"></member><member name="P:VesselModule.Vessel"></member><member name="M:VesselModule.Awake"></member><member name="M:VesselModule.BroadcastMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.BroadcastMessage(string,object)"></member><member name="M:VesselModule.BroadcastMessage(string)"></member><member name="M:VesselModule.BroadcastMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.CancelInvoke"></member><member name="M:VesselModule.CancelInvoke(string)"></member><member name="M:VesselModule.CompareTag(string)"></member><member name="M:VesselModule.Equals(object)"></member><member name="M:VesselModule.Finalize"></member><member name="M:VesselModule.GetActivation"></member><member name="M:VesselModule.GetComponent(System.Type)"></member><member name="M:VesselModule.GetComponent"></member><member name="M:VesselModule.GetComponent(string)"></member><member name="M:VesselModule.GetComponentInChildren(System.Type,System.Boolean)"></member><member name="M:VesselModule.GetComponentInChildren(System.Type)"></member><member name="M:VesselModule.GetComponentInChildren"></member><member name="M:VesselModule.GetComponentInChildren(System.Boolean)"></member><member name="M:VesselModule.GetComponentInParent(System.Type)"></member><member name="M:VesselModule.GetComponentInParent"></member><member name="M:VesselModule.GetComponents(System.Type)"></member><member name="M:VesselModule.GetComponents(System.Type,System.Collections.Generic.List)"></member><member name="M:VesselModule.GetComponents(List)"></member><member name="M:VesselModule.GetComponents"></member><member name="M:VesselModule.GetComponentsInChildren(System.Type)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Type,System.Boolean)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Boolean)"></member><member name="M:VesselModule.GetComponentsInChildren(System.Boolean,List)"></member><member name="M:VesselModule.GetComponentsInChildren"></member><member name="M:VesselModule.GetComponentsInChildren(List)"></member><member name="M:VesselModule.GetComponentsInParent(System.Type)"></member><member name="M:VesselModule.GetComponentsInParent(System.Type,System.Boolean)"></member><member name="M:VesselModule.GetComponentsInParent(System.Boolean)"></member><member name="M:VesselModule.GetComponentsInParent(System.Boolean,List)"></member><member name="M:VesselModule.GetComponentsInParent"></member><member name="M:VesselModule.GetHashCode"></member><member name="M:VesselModule.GetInstanceID"></member><member name="M:VesselModule.GetOrder"></member><member name="M:VesselModule.GetType"></member><member name="M:VesselModule.Invoke(string,System.Single)"></member><member name="M:VesselModule.InvokeRepeating(string,System.Single,System.Single)"></member><member name="M:VesselModule.IsInvoking(string)"></member><member name="M:VesselModule.IsInvoking"></member><member name="M:VesselModule.Load(ConfigNode)"></member><member name="M:VesselModule.MemberwiseClone"></member><member name="M:VesselModule.OnAwake"></member><member name="M:VesselModule.OnGoOffRails"></member><member name="M:VesselModule.OnGoOnRails"></member><member name="M:VesselModule.OnLoad(ConfigNode)"></member><member name="M:VesselModule.OnLoadVessel"></member><member name="M:VesselModule.OnSave(ConfigNode)"></member><member name="M:VesselModule.OnStart"></member><member name="M:VesselModule.OnUnloadVessel"></member><member name="M:VesselModule.Save(ConfigNode)"></member><member name="M:VesselModule.SendMessage(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessage(string,object)"></member><member name="M:VesselModule.SendMessage(string)"></member><member name="M:VesselModule.SendMessage(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessageUpwards(string,object,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.SendMessageUpwards(string,object)"></member><member name="M:VesselModule.SendMessageUpwards(string)"></member><member name="M:VesselModule.SendMessageUpwards(string,UnityEngine.SendMessageOptions)"></member><member name="M:VesselModule.ShouldBeActive"></member><member name="M:VesselModule.Start"></member><member name="M:VesselModule.StartCoroutine(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StartCoroutine(string,object)"></member><member name="M:VesselModule.StartCoroutine(string)"></member><member name="M:VesselModule.StartCoroutine_Auto(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StopAllCoroutines"></member><member name="M:VesselModule.StopCoroutine(string)"></member><member name="M:VesselModule.StopCoroutine(System.Collections.IEnumerator)"></member><member name="M:VesselModule.StopCoroutine(UnityEngine.Coroutine)"></member><member name="M:VesselModule.ToString"></member><member name="M:VesselModule.#ctor"></member><member name="T:VesselRanges"><summary>VesselRanges are used to store the distance at which the Vessel changes to a other state.
A small example:</summary><c>public Vessel v;
v = FlightGlobals.anyVessel;   //maybe use the vessel id to specify

v.vesselRanges.landed.load = 10;</c><remarks>the code change the load distance of v to 10 (meters?) as long as v is in the situation 'landed'.
If v is in orbit the load distance</remarks><c>v.vesselRanges.orbit.load</c><remarks>is effective.
to avoid unknown behavior make the following relation sure:</remarks><c>unpack&lt;=pack&lt;=load&lt;=unload</c></member><member name="F:VesselRanges.escaping"></member><member name="F:VesselRanges.flying"></member><member name="F:VesselRanges.landed"></member><member name="F:VesselRanges.orbit"></member><member name="F:VesselRanges.prelaunch"></member><member name="F:VesselRanges.splashed"></member><member name="F:VesselRanges.subOrbital"></member><member name="M:VesselRanges.Equals(object)"></member><member name="M:VesselRanges.Finalize"></member><member name="M:VesselRanges.GetHashCode"></member><member name="M:VesselRanges.GetSituationRanges(Vessel+Situations)"></member><member name="M:VesselRanges.GetType"></member><member name="M:VesselRanges.Load(ConfigNode)"></member><member name="M:VesselRanges.MemberwiseClone"></member><member name="M:VesselRanges.Save(ConfigNode)"></member><member name="M:VesselRanges.ToString"></member><member name="M:VesselRanges.#ctor"></member><member name="M:VesselRanges.#ctor(VesselRanges)"></member><member name="T:VesselTargetModes"></member></members></doc>